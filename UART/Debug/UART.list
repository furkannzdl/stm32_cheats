
UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000027cc  080000b8  080000b8  000010b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08002884  08002884  00003884  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002924  08002924  0000400c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08002924  08002924  0000400c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08002924  08002924  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002924  08002924  00003924  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002928  08002928  00003928  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  0800292c  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b4  2000000c  08002938  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c0  08002938  000040c0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ab91  00000000  00000000  00004034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a92  00000000  00000000  0000ebc5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000808  00000000  00000000  00010658  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000634  00000000  00000000  00010e60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013afc  00000000  00000000  00011494  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ab80  00000000  00000000  00024f90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007be57  00000000  00000000  0002fb10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ab967  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001b7c  00000000  00000000  000ab9ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  000ad528  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	@ (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	@ (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	@ (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000000c 	.word	0x2000000c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	0800286c 	.word	0x0800286c

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	@ (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	@ (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	@ (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			@ (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000010 	.word	0x20000010
 80000fc:	0800286c 	.word	0x0800286c

08000100 <strlen>:
 8000100:	2300      	movs	r3, #0
 8000102:	5cc2      	ldrb	r2, [r0, r3]
 8000104:	3301      	adds	r3, #1
 8000106:	2a00      	cmp	r2, #0
 8000108:	d1fb      	bne.n	8000102 <strlen+0x2>
 800010a:	1e58      	subs	r0, r3, #1
 800010c:	4770      	bx	lr
	...

08000110 <__udivsi3>:
 8000110:	2200      	movs	r2, #0
 8000112:	0843      	lsrs	r3, r0, #1
 8000114:	428b      	cmp	r3, r1
 8000116:	d374      	bcc.n	8000202 <__udivsi3+0xf2>
 8000118:	0903      	lsrs	r3, r0, #4
 800011a:	428b      	cmp	r3, r1
 800011c:	d35f      	bcc.n	80001de <__udivsi3+0xce>
 800011e:	0a03      	lsrs	r3, r0, #8
 8000120:	428b      	cmp	r3, r1
 8000122:	d344      	bcc.n	80001ae <__udivsi3+0x9e>
 8000124:	0b03      	lsrs	r3, r0, #12
 8000126:	428b      	cmp	r3, r1
 8000128:	d328      	bcc.n	800017c <__udivsi3+0x6c>
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d30d      	bcc.n	800014c <__udivsi3+0x3c>
 8000130:	22ff      	movs	r2, #255	@ 0xff
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	ba12      	rev	r2, r2
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d302      	bcc.n	8000142 <__udivsi3+0x32>
 800013c:	1212      	asrs	r2, r2, #8
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	d065      	beq.n	800020e <__udivsi3+0xfe>
 8000142:	0b03      	lsrs	r3, r0, #12
 8000144:	428b      	cmp	r3, r1
 8000146:	d319      	bcc.n	800017c <__udivsi3+0x6c>
 8000148:	e000      	b.n	800014c <__udivsi3+0x3c>
 800014a:	0a09      	lsrs	r1, r1, #8
 800014c:	0bc3      	lsrs	r3, r0, #15
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x46>
 8000152:	03cb      	lsls	r3, r1, #15
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b83      	lsrs	r3, r0, #14
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x52>
 800015e:	038b      	lsls	r3, r1, #14
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b43      	lsrs	r3, r0, #13
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x5e>
 800016a:	034b      	lsls	r3, r1, #13
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b03      	lsrs	r3, r0, #12
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x6a>
 8000176:	030b      	lsls	r3, r1, #12
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0ac3      	lsrs	r3, r0, #11
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x76>
 8000182:	02cb      	lsls	r3, r1, #11
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a83      	lsrs	r3, r0, #10
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x82>
 800018e:	028b      	lsls	r3, r1, #10
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a43      	lsrs	r3, r0, #9
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x8e>
 800019a:	024b      	lsls	r3, r1, #9
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a03      	lsrs	r3, r0, #8
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x9a>
 80001a6:	020b      	lsls	r3, r1, #8
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	d2cd      	bcs.n	800014a <__udivsi3+0x3a>
 80001ae:	09c3      	lsrs	r3, r0, #7
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xa8>
 80001b4:	01cb      	lsls	r3, r1, #7
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0983      	lsrs	r3, r0, #6
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xb4>
 80001c0:	018b      	lsls	r3, r1, #6
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0943      	lsrs	r3, r0, #5
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xc0>
 80001cc:	014b      	lsls	r3, r1, #5
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0903      	lsrs	r3, r0, #4
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xcc>
 80001d8:	010b      	lsls	r3, r1, #4
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	08c3      	lsrs	r3, r0, #3
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xd8>
 80001e4:	00cb      	lsls	r3, r1, #3
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0883      	lsrs	r3, r0, #2
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xe4>
 80001f0:	008b      	lsls	r3, r1, #2
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0843      	lsrs	r3, r0, #1
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xf0>
 80001fc:	004b      	lsls	r3, r1, #1
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	1a41      	subs	r1, r0, r1
 8000204:	d200      	bcs.n	8000208 <__udivsi3+0xf8>
 8000206:	4601      	mov	r1, r0
 8000208:	4152      	adcs	r2, r2
 800020a:	4610      	mov	r0, r2
 800020c:	4770      	bx	lr
 800020e:	e7ff      	b.n	8000210 <__udivsi3+0x100>
 8000210:	b501      	push	{r0, lr}
 8000212:	2000      	movs	r0, #0
 8000214:	f000 f806 	bl	8000224 <__aeabi_idiv0>
 8000218:	bd02      	pop	{r1, pc}
 800021a:	46c0      	nop			@ (mov r8, r8)

0800021c <__aeabi_uidivmod>:
 800021c:	2900      	cmp	r1, #0
 800021e:	d0f7      	beq.n	8000210 <__udivsi3+0x100>
 8000220:	e776      	b.n	8000110 <__udivsi3>
 8000222:	4770      	bx	lr

08000224 <__aeabi_idiv0>:
 8000224:	4770      	bx	lr
 8000226:	46c0      	nop			@ (mov r8, r8)

08000228 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000228:	b5b0      	push	{r4, r5, r7, lr}
 800022a:	b08a      	sub	sp, #40	@ 0x28
 800022c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800022e:	f000 f9c5 	bl	80005bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000232:	f000 f83f 	bl	80002b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000236:	f000 f8b9 	bl	80003ac <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800023a:	f000 f883 	bl	8000344 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  char msg[] = "Hello from STM32G030!\r\n";
 800023e:	2510      	movs	r5, #16
 8000240:	197b      	adds	r3, r7, r5
 8000242:	4a19      	ldr	r2, [pc, #100]	@ (80002a8 <main+0x80>)
 8000244:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000246:	c313      	stmia	r3!, {r0, r1, r4}
 8000248:	ca13      	ldmia	r2!, {r0, r1, r4}
 800024a:	c313      	stmia	r3!, {r0, r1, r4}
  HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 800024c:	002c      	movs	r4, r5
 800024e:	193b      	adds	r3, r7, r4
 8000250:	0018      	movs	r0, r3
 8000252:	f7ff ff55 	bl	8000100 <strlen>
 8000256:	0003      	movs	r3, r0
 8000258:	b29a      	uxth	r2, r3
 800025a:	2301      	movs	r3, #1
 800025c:	425b      	negs	r3, r3
 800025e:	1939      	adds	r1, r7, r4
 8000260:	4812      	ldr	r0, [pc, #72]	@ (80002ac <main+0x84>)
 8000262:	f001 faf7 	bl	8001854 <HAL_UART_Transmit>

  while (1)
  {
    // LED toggle testi (1 saniyede bir)
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000266:	23a0      	movs	r3, #160	@ 0xa0
 8000268:	05db      	lsls	r3, r3, #23
 800026a:	2120      	movs	r1, #32
 800026c:	0018      	movs	r0, r3
 800026e:	f000 fd7a 	bl	8000d66 <HAL_GPIO_TogglePin>
    HAL_Delay(1000);
 8000272:	23fa      	movs	r3, #250	@ 0xfa
 8000274:	009b      	lsls	r3, r3, #2
 8000276:	0018      	movs	r0, r3
 8000278:	f000 fa26 	bl	80006c8 <HAL_Delay>

    // Periyodik mesaj
    char text[] = "LED toggled!\r\n";
 800027c:	003b      	movs	r3, r7
 800027e:	4a0c      	ldr	r2, [pc, #48]	@ (80002b0 <main+0x88>)
 8000280:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000282:	c313      	stmia	r3!, {r0, r1, r4}
 8000284:	8811      	ldrh	r1, [r2, #0]
 8000286:	8019      	strh	r1, [r3, #0]
 8000288:	7892      	ldrb	r2, [r2, #2]
 800028a:	709a      	strb	r2, [r3, #2]
    HAL_UART_Transmit(&huart2, (uint8_t*)text, strlen(text), HAL_MAX_DELAY);
 800028c:	003b      	movs	r3, r7
 800028e:	0018      	movs	r0, r3
 8000290:	f7ff ff36 	bl	8000100 <strlen>
 8000294:	0003      	movs	r3, r0
 8000296:	b29a      	uxth	r2, r3
 8000298:	2301      	movs	r3, #1
 800029a:	425b      	negs	r3, r3
 800029c:	0039      	movs	r1, r7
 800029e:	4803      	ldr	r0, [pc, #12]	@ (80002ac <main+0x84>)
 80002a0:	f001 fad8 	bl	8001854 <HAL_UART_Transmit>
  {
 80002a4:	46c0      	nop			@ (mov r8, r8)
 80002a6:	e7de      	b.n	8000266 <main+0x3e>
 80002a8:	08002884 	.word	0x08002884
 80002ac:	20000028 	.word	0x20000028
 80002b0:	0800289c 	.word	0x0800289c

080002b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002b4:	b590      	push	{r4, r7, lr}
 80002b6:	b093      	sub	sp, #76	@ 0x4c
 80002b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002ba:	2414      	movs	r4, #20
 80002bc:	193b      	adds	r3, r7, r4
 80002be:	0018      	movs	r0, r3
 80002c0:	2334      	movs	r3, #52	@ 0x34
 80002c2:	001a      	movs	r2, r3
 80002c4:	2100      	movs	r1, #0
 80002c6:	f002 faa4 	bl	8002812 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002ca:	1d3b      	adds	r3, r7, #4
 80002cc:	0018      	movs	r0, r3
 80002ce:	2310      	movs	r3, #16
 80002d0:	001a      	movs	r2, r3
 80002d2:	2100      	movs	r1, #0
 80002d4:	f002 fa9d 	bl	8002812 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80002d8:	2380      	movs	r3, #128	@ 0x80
 80002da:	009b      	lsls	r3, r3, #2
 80002dc:	0018      	movs	r0, r3
 80002de:	f000 fd5d 	bl	8000d9c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002e2:	193b      	adds	r3, r7, r4
 80002e4:	2202      	movs	r2, #2
 80002e6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002e8:	193b      	adds	r3, r7, r4
 80002ea:	2280      	movs	r2, #128	@ 0x80
 80002ec:	0052      	lsls	r2, r2, #1
 80002ee:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80002f0:	193b      	adds	r3, r7, r4
 80002f2:	2200      	movs	r2, #0
 80002f4:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002f6:	193b      	adds	r3, r7, r4
 80002f8:	2240      	movs	r2, #64	@ 0x40
 80002fa:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002fc:	193b      	adds	r3, r7, r4
 80002fe:	2200      	movs	r2, #0
 8000300:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000302:	193b      	adds	r3, r7, r4
 8000304:	0018      	movs	r0, r3
 8000306:	f000 fd95 	bl	8000e34 <HAL_RCC_OscConfig>
 800030a:	1e03      	subs	r3, r0, #0
 800030c:	d001      	beq.n	8000312 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800030e:	f000 f883 	bl	8000418 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000312:	1d3b      	adds	r3, r7, #4
 8000314:	2207      	movs	r2, #7
 8000316:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000318:	1d3b      	adds	r3, r7, #4
 800031a:	2200      	movs	r2, #0
 800031c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800031e:	1d3b      	adds	r3, r7, #4
 8000320:	2200      	movs	r2, #0
 8000322:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000324:	1d3b      	adds	r3, r7, #4
 8000326:	2200      	movs	r2, #0
 8000328:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800032a:	1d3b      	adds	r3, r7, #4
 800032c:	2100      	movs	r1, #0
 800032e:	0018      	movs	r0, r3
 8000330:	f001 f890 	bl	8001454 <HAL_RCC_ClockConfig>
 8000334:	1e03      	subs	r3, r0, #0
 8000336:	d001      	beq.n	800033c <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000338:	f000 f86e 	bl	8000418 <Error_Handler>
  }
}
 800033c:	46c0      	nop			@ (mov r8, r8)
 800033e:	46bd      	mov	sp, r7
 8000340:	b013      	add	sp, #76	@ 0x4c
 8000342:	bd90      	pop	{r4, r7, pc}

08000344 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000348:	4b16      	ldr	r3, [pc, #88]	@ (80003a4 <MX_USART2_UART_Init+0x60>)
 800034a:	4a17      	ldr	r2, [pc, #92]	@ (80003a8 <MX_USART2_UART_Init+0x64>)
 800034c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800034e:	4b15      	ldr	r3, [pc, #84]	@ (80003a4 <MX_USART2_UART_Init+0x60>)
 8000350:	22e1      	movs	r2, #225	@ 0xe1
 8000352:	0252      	lsls	r2, r2, #9
 8000354:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000356:	4b13      	ldr	r3, [pc, #76]	@ (80003a4 <MX_USART2_UART_Init+0x60>)
 8000358:	2200      	movs	r2, #0
 800035a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800035c:	4b11      	ldr	r3, [pc, #68]	@ (80003a4 <MX_USART2_UART_Init+0x60>)
 800035e:	2200      	movs	r2, #0
 8000360:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000362:	4b10      	ldr	r3, [pc, #64]	@ (80003a4 <MX_USART2_UART_Init+0x60>)
 8000364:	2200      	movs	r2, #0
 8000366:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000368:	4b0e      	ldr	r3, [pc, #56]	@ (80003a4 <MX_USART2_UART_Init+0x60>)
 800036a:	220c      	movs	r2, #12
 800036c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800036e:	4b0d      	ldr	r3, [pc, #52]	@ (80003a4 <MX_USART2_UART_Init+0x60>)
 8000370:	2200      	movs	r2, #0
 8000372:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000374:	4b0b      	ldr	r3, [pc, #44]	@ (80003a4 <MX_USART2_UART_Init+0x60>)
 8000376:	2200      	movs	r2, #0
 8000378:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800037a:	4b0a      	ldr	r3, [pc, #40]	@ (80003a4 <MX_USART2_UART_Init+0x60>)
 800037c:	2200      	movs	r2, #0
 800037e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000380:	4b08      	ldr	r3, [pc, #32]	@ (80003a4 <MX_USART2_UART_Init+0x60>)
 8000382:	2200      	movs	r2, #0
 8000384:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000386:	4b07      	ldr	r3, [pc, #28]	@ (80003a4 <MX_USART2_UART_Init+0x60>)
 8000388:	2200      	movs	r2, #0
 800038a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800038c:	4b05      	ldr	r3, [pc, #20]	@ (80003a4 <MX_USART2_UART_Init+0x60>)
 800038e:	0018      	movs	r0, r3
 8000390:	f001 fa0a 	bl	80017a8 <HAL_UART_Init>
 8000394:	1e03      	subs	r3, r0, #0
 8000396:	d001      	beq.n	800039c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000398:	f000 f83e 	bl	8000418 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800039c:	46c0      	nop			@ (mov r8, r8)
 800039e:	46bd      	mov	sp, r7
 80003a0:	bd80      	pop	{r7, pc}
 80003a2:	46c0      	nop			@ (mov r8, r8)
 80003a4:	20000028 	.word	0x20000028
 80003a8:	40004400 	.word	0x40004400

080003ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003ac:	b580      	push	{r7, lr}
 80003ae:	b086      	sub	sp, #24
 80003b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003b2:	1d3b      	adds	r3, r7, #4
 80003b4:	0018      	movs	r0, r3
 80003b6:	2314      	movs	r3, #20
 80003b8:	001a      	movs	r2, r3
 80003ba:	2100      	movs	r1, #0
 80003bc:	f002 fa29 	bl	8002812 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003c0:	4b14      	ldr	r3, [pc, #80]	@ (8000414 <MX_GPIO_Init+0x68>)
 80003c2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80003c4:	4b13      	ldr	r3, [pc, #76]	@ (8000414 <MX_GPIO_Init+0x68>)
 80003c6:	2101      	movs	r1, #1
 80003c8:	430a      	orrs	r2, r1
 80003ca:	635a      	str	r2, [r3, #52]	@ 0x34
 80003cc:	4b11      	ldr	r3, [pc, #68]	@ (8000414 <MX_GPIO_Init+0x68>)
 80003ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80003d0:	2201      	movs	r2, #1
 80003d2:	4013      	ands	r3, r2
 80003d4:	603b      	str	r3, [r7, #0]
 80003d6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80003d8:	23a0      	movs	r3, #160	@ 0xa0
 80003da:	05db      	lsls	r3, r3, #23
 80003dc:	2200      	movs	r2, #0
 80003de:	2120      	movs	r1, #32
 80003e0:	0018      	movs	r0, r3
 80003e2:	f000 fca3 	bl	8000d2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80003e6:	1d3b      	adds	r3, r7, #4
 80003e8:	2220      	movs	r2, #32
 80003ea:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003ec:	1d3b      	adds	r3, r7, #4
 80003ee:	2201      	movs	r2, #1
 80003f0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003f2:	1d3b      	adds	r3, r7, #4
 80003f4:	2200      	movs	r2, #0
 80003f6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003f8:	1d3b      	adds	r3, r7, #4
 80003fa:	2200      	movs	r2, #0
 80003fc:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003fe:	1d3a      	adds	r2, r7, #4
 8000400:	23a0      	movs	r3, #160	@ 0xa0
 8000402:	05db      	lsls	r3, r3, #23
 8000404:	0011      	movs	r1, r2
 8000406:	0018      	movs	r0, r3
 8000408:	f000 fb2c 	bl	8000a64 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800040c:	46c0      	nop			@ (mov r8, r8)
 800040e:	46bd      	mov	sp, r7
 8000410:	b006      	add	sp, #24
 8000412:	bd80      	pop	{r7, pc}
 8000414:	40021000 	.word	0x40021000

08000418 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800041c:	b672      	cpsid	i
}
 800041e:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000420:	46c0      	nop			@ (mov r8, r8)
 8000422:	e7fd      	b.n	8000420 <Error_Handler+0x8>

08000424 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	b082      	sub	sp, #8
 8000428:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800042a:	4b0f      	ldr	r3, [pc, #60]	@ (8000468 <HAL_MspInit+0x44>)
 800042c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800042e:	4b0e      	ldr	r3, [pc, #56]	@ (8000468 <HAL_MspInit+0x44>)
 8000430:	2101      	movs	r1, #1
 8000432:	430a      	orrs	r2, r1
 8000434:	641a      	str	r2, [r3, #64]	@ 0x40
 8000436:	4b0c      	ldr	r3, [pc, #48]	@ (8000468 <HAL_MspInit+0x44>)
 8000438:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800043a:	2201      	movs	r2, #1
 800043c:	4013      	ands	r3, r2
 800043e:	607b      	str	r3, [r7, #4]
 8000440:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000442:	4b09      	ldr	r3, [pc, #36]	@ (8000468 <HAL_MspInit+0x44>)
 8000444:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000446:	4b08      	ldr	r3, [pc, #32]	@ (8000468 <HAL_MspInit+0x44>)
 8000448:	2180      	movs	r1, #128	@ 0x80
 800044a:	0549      	lsls	r1, r1, #21
 800044c:	430a      	orrs	r2, r1
 800044e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000450:	4b05      	ldr	r3, [pc, #20]	@ (8000468 <HAL_MspInit+0x44>)
 8000452:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000454:	2380      	movs	r3, #128	@ 0x80
 8000456:	055b      	lsls	r3, r3, #21
 8000458:	4013      	ands	r3, r2
 800045a:	603b      	str	r3, [r7, #0]
 800045c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800045e:	46c0      	nop			@ (mov r8, r8)
 8000460:	46bd      	mov	sp, r7
 8000462:	b002      	add	sp, #8
 8000464:	bd80      	pop	{r7, pc}
 8000466:	46c0      	nop			@ (mov r8, r8)
 8000468:	40021000 	.word	0x40021000

0800046c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800046c:	b590      	push	{r4, r7, lr}
 800046e:	b08b      	sub	sp, #44	@ 0x2c
 8000470:	af00      	add	r7, sp, #0
 8000472:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000474:	2414      	movs	r4, #20
 8000476:	193b      	adds	r3, r7, r4
 8000478:	0018      	movs	r0, r3
 800047a:	2314      	movs	r3, #20
 800047c:	001a      	movs	r2, r3
 800047e:	2100      	movs	r1, #0
 8000480:	f002 f9c7 	bl	8002812 <memset>
  if(huart->Instance==USART2)
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	4a1f      	ldr	r2, [pc, #124]	@ (8000508 <HAL_UART_MspInit+0x9c>)
 800048a:	4293      	cmp	r3, r2
 800048c:	d138      	bne.n	8000500 <HAL_UART_MspInit+0x94>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800048e:	4b1f      	ldr	r3, [pc, #124]	@ (800050c <HAL_UART_MspInit+0xa0>)
 8000490:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000492:	4b1e      	ldr	r3, [pc, #120]	@ (800050c <HAL_UART_MspInit+0xa0>)
 8000494:	2180      	movs	r1, #128	@ 0x80
 8000496:	0289      	lsls	r1, r1, #10
 8000498:	430a      	orrs	r2, r1
 800049a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800049c:	4b1b      	ldr	r3, [pc, #108]	@ (800050c <HAL_UART_MspInit+0xa0>)
 800049e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80004a0:	2380      	movs	r3, #128	@ 0x80
 80004a2:	029b      	lsls	r3, r3, #10
 80004a4:	4013      	ands	r3, r2
 80004a6:	613b      	str	r3, [r7, #16]
 80004a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004aa:	4b18      	ldr	r3, [pc, #96]	@ (800050c <HAL_UART_MspInit+0xa0>)
 80004ac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80004ae:	4b17      	ldr	r3, [pc, #92]	@ (800050c <HAL_UART_MspInit+0xa0>)
 80004b0:	2101      	movs	r1, #1
 80004b2:	430a      	orrs	r2, r1
 80004b4:	635a      	str	r2, [r3, #52]	@ 0x34
 80004b6:	4b15      	ldr	r3, [pc, #84]	@ (800050c <HAL_UART_MspInit+0xa0>)
 80004b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80004ba:	2201      	movs	r2, #1
 80004bc:	4013      	ands	r3, r2
 80004be:	60fb      	str	r3, [r7, #12]
 80004c0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80004c2:	0021      	movs	r1, r4
 80004c4:	187b      	adds	r3, r7, r1
 80004c6:	220c      	movs	r2, #12
 80004c8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004ca:	187b      	adds	r3, r7, r1
 80004cc:	2202      	movs	r2, #2
 80004ce:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004d0:	187b      	adds	r3, r7, r1
 80004d2:	2200      	movs	r2, #0
 80004d4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004d6:	187b      	adds	r3, r7, r1
 80004d8:	2200      	movs	r2, #0
 80004da:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80004dc:	187b      	adds	r3, r7, r1
 80004de:	2201      	movs	r2, #1
 80004e0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004e2:	187a      	adds	r2, r7, r1
 80004e4:	23a0      	movs	r3, #160	@ 0xa0
 80004e6:	05db      	lsls	r3, r3, #23
 80004e8:	0011      	movs	r1, r2
 80004ea:	0018      	movs	r0, r3
 80004ec:	f000 faba 	bl	8000a64 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80004f0:	2200      	movs	r2, #0
 80004f2:	2100      	movs	r1, #0
 80004f4:	201c      	movs	r0, #28
 80004f6:	f000 f9b7 	bl	8000868 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80004fa:	201c      	movs	r0, #28
 80004fc:	f000 f9c9 	bl	8000892 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000500:	46c0      	nop			@ (mov r8, r8)
 8000502:	46bd      	mov	sp, r7
 8000504:	b00b      	add	sp, #44	@ 0x2c
 8000506:	bd90      	pop	{r4, r7, pc}
 8000508:	40004400 	.word	0x40004400
 800050c:	40021000 	.word	0x40021000

08000510 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000514:	46c0      	nop			@ (mov r8, r8)
 8000516:	e7fd      	b.n	8000514 <NMI_Handler+0x4>

08000518 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800051c:	46c0      	nop			@ (mov r8, r8)
 800051e:	e7fd      	b.n	800051c <HardFault_Handler+0x4>

08000520 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000524:	46c0      	nop			@ (mov r8, r8)
 8000526:	46bd      	mov	sp, r7
 8000528:	bd80      	pop	{r7, pc}

0800052a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800052a:	b580      	push	{r7, lr}
 800052c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800052e:	46c0      	nop			@ (mov r8, r8)
 8000530:	46bd      	mov	sp, r7
 8000532:	bd80      	pop	{r7, pc}

08000534 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000538:	f000 f8aa 	bl	8000690 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800053c:	46c0      	nop			@ (mov r8, r8)
 800053e:	46bd      	mov	sp, r7
 8000540:	bd80      	pop	{r7, pc}
	...

08000544 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000548:	4b03      	ldr	r3, [pc, #12]	@ (8000558 <USART2_IRQHandler+0x14>)
 800054a:	0018      	movs	r0, r3
 800054c:	f001 fa26 	bl	800199c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000550:	46c0      	nop			@ (mov r8, r8)
 8000552:	46bd      	mov	sp, r7
 8000554:	bd80      	pop	{r7, pc}
 8000556:	46c0      	nop			@ (mov r8, r8)
 8000558:	20000028 	.word	0x20000028

0800055c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000560:	46c0      	nop			@ (mov r8, r8)
 8000562:	46bd      	mov	sp, r7
 8000564:	bd80      	pop	{r7, pc}
	...

08000568 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000568:	480d      	ldr	r0, [pc, #52]	@ (80005a0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800056a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800056c:	f7ff fff6 	bl	800055c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000570:	480c      	ldr	r0, [pc, #48]	@ (80005a4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000572:	490d      	ldr	r1, [pc, #52]	@ (80005a8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000574:	4a0d      	ldr	r2, [pc, #52]	@ (80005ac <LoopForever+0xe>)
  movs r3, #0
 8000576:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000578:	e002      	b.n	8000580 <LoopCopyDataInit>

0800057a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800057a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800057c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800057e:	3304      	adds	r3, #4

08000580 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000580:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000582:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000584:	d3f9      	bcc.n	800057a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000586:	4a0a      	ldr	r2, [pc, #40]	@ (80005b0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000588:	4c0a      	ldr	r4, [pc, #40]	@ (80005b4 <LoopForever+0x16>)
  movs r3, #0
 800058a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800058c:	e001      	b.n	8000592 <LoopFillZerobss>

0800058e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800058e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000590:	3204      	adds	r2, #4

08000592 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000592:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000594:	d3fb      	bcc.n	800058e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000596:	f002 f945 	bl	8002824 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800059a:	f7ff fe45 	bl	8000228 <main>

0800059e <LoopForever>:

LoopForever:
  b LoopForever
 800059e:	e7fe      	b.n	800059e <LoopForever>
  ldr   r0, =_estack
 80005a0:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80005a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005a8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80005ac:	0800292c 	.word	0x0800292c
  ldr r2, =_sbss
 80005b0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80005b4:	200000c0 	.word	0x200000c0

080005b8 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005b8:	e7fe      	b.n	80005b8 <ADC1_IRQHandler>
	...

080005bc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b082      	sub	sp, #8
 80005c0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80005c2:	1dfb      	adds	r3, r7, #7
 80005c4:	2200      	movs	r2, #0
 80005c6:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005c8:	4b0b      	ldr	r3, [pc, #44]	@ (80005f8 <HAL_Init+0x3c>)
 80005ca:	681a      	ldr	r2, [r3, #0]
 80005cc:	4b0a      	ldr	r3, [pc, #40]	@ (80005f8 <HAL_Init+0x3c>)
 80005ce:	2180      	movs	r1, #128	@ 0x80
 80005d0:	0049      	lsls	r1, r1, #1
 80005d2:	430a      	orrs	r2, r1
 80005d4:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80005d6:	2003      	movs	r0, #3
 80005d8:	f000 f810 	bl	80005fc <HAL_InitTick>
 80005dc:	1e03      	subs	r3, r0, #0
 80005de:	d003      	beq.n	80005e8 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80005e0:	1dfb      	adds	r3, r7, #7
 80005e2:	2201      	movs	r2, #1
 80005e4:	701a      	strb	r2, [r3, #0]
 80005e6:	e001      	b.n	80005ec <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80005e8:	f7ff ff1c 	bl	8000424 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80005ec:	1dfb      	adds	r3, r7, #7
 80005ee:	781b      	ldrb	r3, [r3, #0]
}
 80005f0:	0018      	movs	r0, r3
 80005f2:	46bd      	mov	sp, r7
 80005f4:	b002      	add	sp, #8
 80005f6:	bd80      	pop	{r7, pc}
 80005f8:	40022000 	.word	0x40022000

080005fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005fc:	b590      	push	{r4, r7, lr}
 80005fe:	b085      	sub	sp, #20
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000604:	230f      	movs	r3, #15
 8000606:	18fb      	adds	r3, r7, r3
 8000608:	2200      	movs	r2, #0
 800060a:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 800060c:	4b1d      	ldr	r3, [pc, #116]	@ (8000684 <HAL_InitTick+0x88>)
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	2b00      	cmp	r3, #0
 8000612:	d02b      	beq.n	800066c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000614:	4b1c      	ldr	r3, [pc, #112]	@ (8000688 <HAL_InitTick+0x8c>)
 8000616:	681c      	ldr	r4, [r3, #0]
 8000618:	4b1a      	ldr	r3, [pc, #104]	@ (8000684 <HAL_InitTick+0x88>)
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	0019      	movs	r1, r3
 800061e:	23fa      	movs	r3, #250	@ 0xfa
 8000620:	0098      	lsls	r0, r3, #2
 8000622:	f7ff fd75 	bl	8000110 <__udivsi3>
 8000626:	0003      	movs	r3, r0
 8000628:	0019      	movs	r1, r3
 800062a:	0020      	movs	r0, r4
 800062c:	f7ff fd70 	bl	8000110 <__udivsi3>
 8000630:	0003      	movs	r3, r0
 8000632:	0018      	movs	r0, r3
 8000634:	f000 f93d 	bl	80008b2 <HAL_SYSTICK_Config>
 8000638:	1e03      	subs	r3, r0, #0
 800063a:	d112      	bne.n	8000662 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	2b03      	cmp	r3, #3
 8000640:	d80a      	bhi.n	8000658 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000642:	6879      	ldr	r1, [r7, #4]
 8000644:	2301      	movs	r3, #1
 8000646:	425b      	negs	r3, r3
 8000648:	2200      	movs	r2, #0
 800064a:	0018      	movs	r0, r3
 800064c:	f000 f90c 	bl	8000868 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000650:	4b0e      	ldr	r3, [pc, #56]	@ (800068c <HAL_InitTick+0x90>)
 8000652:	687a      	ldr	r2, [r7, #4]
 8000654:	601a      	str	r2, [r3, #0]
 8000656:	e00d      	b.n	8000674 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000658:	230f      	movs	r3, #15
 800065a:	18fb      	adds	r3, r7, r3
 800065c:	2201      	movs	r2, #1
 800065e:	701a      	strb	r2, [r3, #0]
 8000660:	e008      	b.n	8000674 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000662:	230f      	movs	r3, #15
 8000664:	18fb      	adds	r3, r7, r3
 8000666:	2201      	movs	r2, #1
 8000668:	701a      	strb	r2, [r3, #0]
 800066a:	e003      	b.n	8000674 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 800066c:	230f      	movs	r3, #15
 800066e:	18fb      	adds	r3, r7, r3
 8000670:	2201      	movs	r2, #1
 8000672:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000674:	230f      	movs	r3, #15
 8000676:	18fb      	adds	r3, r7, r3
 8000678:	781b      	ldrb	r3, [r3, #0]
}
 800067a:	0018      	movs	r0, r3
 800067c:	46bd      	mov	sp, r7
 800067e:	b005      	add	sp, #20
 8000680:	bd90      	pop	{r4, r7, pc}
 8000682:	46c0      	nop			@ (mov r8, r8)
 8000684:	20000008 	.word	0x20000008
 8000688:	20000000 	.word	0x20000000
 800068c:	20000004 	.word	0x20000004

08000690 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000694:	4b05      	ldr	r3, [pc, #20]	@ (80006ac <HAL_IncTick+0x1c>)
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	001a      	movs	r2, r3
 800069a:	4b05      	ldr	r3, [pc, #20]	@ (80006b0 <HAL_IncTick+0x20>)
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	18d2      	adds	r2, r2, r3
 80006a0:	4b03      	ldr	r3, [pc, #12]	@ (80006b0 <HAL_IncTick+0x20>)
 80006a2:	601a      	str	r2, [r3, #0]
}
 80006a4:	46c0      	nop			@ (mov r8, r8)
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	46c0      	nop			@ (mov r8, r8)
 80006ac:	20000008 	.word	0x20000008
 80006b0:	200000bc 	.word	0x200000bc

080006b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
  return uwTick;
 80006b8:	4b02      	ldr	r3, [pc, #8]	@ (80006c4 <HAL_GetTick+0x10>)
 80006ba:	681b      	ldr	r3, [r3, #0]
}
 80006bc:	0018      	movs	r0, r3
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	46c0      	nop			@ (mov r8, r8)
 80006c4:	200000bc 	.word	0x200000bc

080006c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b084      	sub	sp, #16
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80006d0:	f7ff fff0 	bl	80006b4 <HAL_GetTick>
 80006d4:	0003      	movs	r3, r0
 80006d6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80006dc:	68fb      	ldr	r3, [r7, #12]
 80006de:	3301      	adds	r3, #1
 80006e0:	d005      	beq.n	80006ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80006e2:	4b0a      	ldr	r3, [pc, #40]	@ (800070c <HAL_Delay+0x44>)
 80006e4:	781b      	ldrb	r3, [r3, #0]
 80006e6:	001a      	movs	r2, r3
 80006e8:	68fb      	ldr	r3, [r7, #12]
 80006ea:	189b      	adds	r3, r3, r2
 80006ec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80006ee:	46c0      	nop			@ (mov r8, r8)
 80006f0:	f7ff ffe0 	bl	80006b4 <HAL_GetTick>
 80006f4:	0002      	movs	r2, r0
 80006f6:	68bb      	ldr	r3, [r7, #8]
 80006f8:	1ad3      	subs	r3, r2, r3
 80006fa:	68fa      	ldr	r2, [r7, #12]
 80006fc:	429a      	cmp	r2, r3
 80006fe:	d8f7      	bhi.n	80006f0 <HAL_Delay+0x28>
  {
  }
}
 8000700:	46c0      	nop			@ (mov r8, r8)
 8000702:	46c0      	nop			@ (mov r8, r8)
 8000704:	46bd      	mov	sp, r7
 8000706:	b004      	add	sp, #16
 8000708:	bd80      	pop	{r7, pc}
 800070a:	46c0      	nop			@ (mov r8, r8)
 800070c:	20000008 	.word	0x20000008

08000710 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0
 8000716:	0002      	movs	r2, r0
 8000718:	1dfb      	adds	r3, r7, #7
 800071a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800071c:	1dfb      	adds	r3, r7, #7
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	2b7f      	cmp	r3, #127	@ 0x7f
 8000722:	d809      	bhi.n	8000738 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000724:	1dfb      	adds	r3, r7, #7
 8000726:	781b      	ldrb	r3, [r3, #0]
 8000728:	001a      	movs	r2, r3
 800072a:	231f      	movs	r3, #31
 800072c:	401a      	ands	r2, r3
 800072e:	4b04      	ldr	r3, [pc, #16]	@ (8000740 <__NVIC_EnableIRQ+0x30>)
 8000730:	2101      	movs	r1, #1
 8000732:	4091      	lsls	r1, r2
 8000734:	000a      	movs	r2, r1
 8000736:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000738:	46c0      	nop			@ (mov r8, r8)
 800073a:	46bd      	mov	sp, r7
 800073c:	b002      	add	sp, #8
 800073e:	bd80      	pop	{r7, pc}
 8000740:	e000e100 	.word	0xe000e100

08000744 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000744:	b590      	push	{r4, r7, lr}
 8000746:	b083      	sub	sp, #12
 8000748:	af00      	add	r7, sp, #0
 800074a:	0002      	movs	r2, r0
 800074c:	6039      	str	r1, [r7, #0]
 800074e:	1dfb      	adds	r3, r7, #7
 8000750:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000752:	1dfb      	adds	r3, r7, #7
 8000754:	781b      	ldrb	r3, [r3, #0]
 8000756:	2b7f      	cmp	r3, #127	@ 0x7f
 8000758:	d828      	bhi.n	80007ac <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800075a:	4a2f      	ldr	r2, [pc, #188]	@ (8000818 <__NVIC_SetPriority+0xd4>)
 800075c:	1dfb      	adds	r3, r7, #7
 800075e:	781b      	ldrb	r3, [r3, #0]
 8000760:	b25b      	sxtb	r3, r3
 8000762:	089b      	lsrs	r3, r3, #2
 8000764:	33c0      	adds	r3, #192	@ 0xc0
 8000766:	009b      	lsls	r3, r3, #2
 8000768:	589b      	ldr	r3, [r3, r2]
 800076a:	1dfa      	adds	r2, r7, #7
 800076c:	7812      	ldrb	r2, [r2, #0]
 800076e:	0011      	movs	r1, r2
 8000770:	2203      	movs	r2, #3
 8000772:	400a      	ands	r2, r1
 8000774:	00d2      	lsls	r2, r2, #3
 8000776:	21ff      	movs	r1, #255	@ 0xff
 8000778:	4091      	lsls	r1, r2
 800077a:	000a      	movs	r2, r1
 800077c:	43d2      	mvns	r2, r2
 800077e:	401a      	ands	r2, r3
 8000780:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000782:	683b      	ldr	r3, [r7, #0]
 8000784:	019b      	lsls	r3, r3, #6
 8000786:	22ff      	movs	r2, #255	@ 0xff
 8000788:	401a      	ands	r2, r3
 800078a:	1dfb      	adds	r3, r7, #7
 800078c:	781b      	ldrb	r3, [r3, #0]
 800078e:	0018      	movs	r0, r3
 8000790:	2303      	movs	r3, #3
 8000792:	4003      	ands	r3, r0
 8000794:	00db      	lsls	r3, r3, #3
 8000796:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000798:	481f      	ldr	r0, [pc, #124]	@ (8000818 <__NVIC_SetPriority+0xd4>)
 800079a:	1dfb      	adds	r3, r7, #7
 800079c:	781b      	ldrb	r3, [r3, #0]
 800079e:	b25b      	sxtb	r3, r3
 80007a0:	089b      	lsrs	r3, r3, #2
 80007a2:	430a      	orrs	r2, r1
 80007a4:	33c0      	adds	r3, #192	@ 0xc0
 80007a6:	009b      	lsls	r3, r3, #2
 80007a8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80007aa:	e031      	b.n	8000810 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007ac:	4a1b      	ldr	r2, [pc, #108]	@ (800081c <__NVIC_SetPriority+0xd8>)
 80007ae:	1dfb      	adds	r3, r7, #7
 80007b0:	781b      	ldrb	r3, [r3, #0]
 80007b2:	0019      	movs	r1, r3
 80007b4:	230f      	movs	r3, #15
 80007b6:	400b      	ands	r3, r1
 80007b8:	3b08      	subs	r3, #8
 80007ba:	089b      	lsrs	r3, r3, #2
 80007bc:	3306      	adds	r3, #6
 80007be:	009b      	lsls	r3, r3, #2
 80007c0:	18d3      	adds	r3, r2, r3
 80007c2:	3304      	adds	r3, #4
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	1dfa      	adds	r2, r7, #7
 80007c8:	7812      	ldrb	r2, [r2, #0]
 80007ca:	0011      	movs	r1, r2
 80007cc:	2203      	movs	r2, #3
 80007ce:	400a      	ands	r2, r1
 80007d0:	00d2      	lsls	r2, r2, #3
 80007d2:	21ff      	movs	r1, #255	@ 0xff
 80007d4:	4091      	lsls	r1, r2
 80007d6:	000a      	movs	r2, r1
 80007d8:	43d2      	mvns	r2, r2
 80007da:	401a      	ands	r2, r3
 80007dc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80007de:	683b      	ldr	r3, [r7, #0]
 80007e0:	019b      	lsls	r3, r3, #6
 80007e2:	22ff      	movs	r2, #255	@ 0xff
 80007e4:	401a      	ands	r2, r3
 80007e6:	1dfb      	adds	r3, r7, #7
 80007e8:	781b      	ldrb	r3, [r3, #0]
 80007ea:	0018      	movs	r0, r3
 80007ec:	2303      	movs	r3, #3
 80007ee:	4003      	ands	r3, r0
 80007f0:	00db      	lsls	r3, r3, #3
 80007f2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007f4:	4809      	ldr	r0, [pc, #36]	@ (800081c <__NVIC_SetPriority+0xd8>)
 80007f6:	1dfb      	adds	r3, r7, #7
 80007f8:	781b      	ldrb	r3, [r3, #0]
 80007fa:	001c      	movs	r4, r3
 80007fc:	230f      	movs	r3, #15
 80007fe:	4023      	ands	r3, r4
 8000800:	3b08      	subs	r3, #8
 8000802:	089b      	lsrs	r3, r3, #2
 8000804:	430a      	orrs	r2, r1
 8000806:	3306      	adds	r3, #6
 8000808:	009b      	lsls	r3, r3, #2
 800080a:	18c3      	adds	r3, r0, r3
 800080c:	3304      	adds	r3, #4
 800080e:	601a      	str	r2, [r3, #0]
}
 8000810:	46c0      	nop			@ (mov r8, r8)
 8000812:	46bd      	mov	sp, r7
 8000814:	b003      	add	sp, #12
 8000816:	bd90      	pop	{r4, r7, pc}
 8000818:	e000e100 	.word	0xe000e100
 800081c:	e000ed00 	.word	0xe000ed00

08000820 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b082      	sub	sp, #8
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	1e5a      	subs	r2, r3, #1
 800082c:	2380      	movs	r3, #128	@ 0x80
 800082e:	045b      	lsls	r3, r3, #17
 8000830:	429a      	cmp	r2, r3
 8000832:	d301      	bcc.n	8000838 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000834:	2301      	movs	r3, #1
 8000836:	e010      	b.n	800085a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000838:	4b0a      	ldr	r3, [pc, #40]	@ (8000864 <SysTick_Config+0x44>)
 800083a:	687a      	ldr	r2, [r7, #4]
 800083c:	3a01      	subs	r2, #1
 800083e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000840:	2301      	movs	r3, #1
 8000842:	425b      	negs	r3, r3
 8000844:	2103      	movs	r1, #3
 8000846:	0018      	movs	r0, r3
 8000848:	f7ff ff7c 	bl	8000744 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800084c:	4b05      	ldr	r3, [pc, #20]	@ (8000864 <SysTick_Config+0x44>)
 800084e:	2200      	movs	r2, #0
 8000850:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000852:	4b04      	ldr	r3, [pc, #16]	@ (8000864 <SysTick_Config+0x44>)
 8000854:	2207      	movs	r2, #7
 8000856:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000858:	2300      	movs	r3, #0
}
 800085a:	0018      	movs	r0, r3
 800085c:	46bd      	mov	sp, r7
 800085e:	b002      	add	sp, #8
 8000860:	bd80      	pop	{r7, pc}
 8000862:	46c0      	nop			@ (mov r8, r8)
 8000864:	e000e010 	.word	0xe000e010

08000868 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b084      	sub	sp, #16
 800086c:	af00      	add	r7, sp, #0
 800086e:	60b9      	str	r1, [r7, #8]
 8000870:	607a      	str	r2, [r7, #4]
 8000872:	210f      	movs	r1, #15
 8000874:	187b      	adds	r3, r7, r1
 8000876:	1c02      	adds	r2, r0, #0
 8000878:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800087a:	68ba      	ldr	r2, [r7, #8]
 800087c:	187b      	adds	r3, r7, r1
 800087e:	781b      	ldrb	r3, [r3, #0]
 8000880:	b25b      	sxtb	r3, r3
 8000882:	0011      	movs	r1, r2
 8000884:	0018      	movs	r0, r3
 8000886:	f7ff ff5d 	bl	8000744 <__NVIC_SetPriority>
}
 800088a:	46c0      	nop			@ (mov r8, r8)
 800088c:	46bd      	mov	sp, r7
 800088e:	b004      	add	sp, #16
 8000890:	bd80      	pop	{r7, pc}

08000892 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000892:	b580      	push	{r7, lr}
 8000894:	b082      	sub	sp, #8
 8000896:	af00      	add	r7, sp, #0
 8000898:	0002      	movs	r2, r0
 800089a:	1dfb      	adds	r3, r7, #7
 800089c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800089e:	1dfb      	adds	r3, r7, #7
 80008a0:	781b      	ldrb	r3, [r3, #0]
 80008a2:	b25b      	sxtb	r3, r3
 80008a4:	0018      	movs	r0, r3
 80008a6:	f7ff ff33 	bl	8000710 <__NVIC_EnableIRQ>
}
 80008aa:	46c0      	nop			@ (mov r8, r8)
 80008ac:	46bd      	mov	sp, r7
 80008ae:	b002      	add	sp, #8
 80008b0:	bd80      	pop	{r7, pc}

080008b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008b2:	b580      	push	{r7, lr}
 80008b4:	b082      	sub	sp, #8
 80008b6:	af00      	add	r7, sp, #0
 80008b8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	0018      	movs	r0, r3
 80008be:	f7ff ffaf 	bl	8000820 <SysTick_Config>
 80008c2:	0003      	movs	r3, r0
}
 80008c4:	0018      	movs	r0, r3
 80008c6:	46bd      	mov	sp, r7
 80008c8:	b002      	add	sp, #8
 80008ca:	bd80      	pop	{r7, pc}

080008cc <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d101      	bne.n	80008de <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80008da:	2301      	movs	r3, #1
 80008dc:	e050      	b.n	8000980 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	2225      	movs	r2, #37	@ 0x25
 80008e2:	5c9b      	ldrb	r3, [r3, r2]
 80008e4:	b2db      	uxtb	r3, r3
 80008e6:	2b02      	cmp	r3, #2
 80008e8:	d008      	beq.n	80008fc <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	2204      	movs	r2, #4
 80008ee:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	2224      	movs	r2, #36	@ 0x24
 80008f4:	2100      	movs	r1, #0
 80008f6:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80008f8:	2301      	movs	r3, #1
 80008fa:	e041      	b.n	8000980 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	681a      	ldr	r2, [r3, #0]
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	210e      	movs	r1, #14
 8000908:	438a      	bics	r2, r1
 800090a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000910:	681a      	ldr	r2, [r3, #0]
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000916:	491c      	ldr	r1, [pc, #112]	@ (8000988 <HAL_DMA_Abort+0xbc>)
 8000918:	400a      	ands	r2, r1
 800091a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	681a      	ldr	r2, [r3, #0]
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	2101      	movs	r1, #1
 8000928:	438a      	bics	r2, r1
 800092a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 800092c:	4b17      	ldr	r3, [pc, #92]	@ (800098c <HAL_DMA_Abort+0xc0>)
 800092e:	6859      	ldr	r1, [r3, #4]
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000934:	221c      	movs	r2, #28
 8000936:	4013      	ands	r3, r2
 8000938:	2201      	movs	r2, #1
 800093a:	409a      	lsls	r2, r3
 800093c:	4b13      	ldr	r3, [pc, #76]	@ (800098c <HAL_DMA_Abort+0xc0>)
 800093e:	430a      	orrs	r2, r1
 8000940:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000946:	687a      	ldr	r2, [r7, #4]
 8000948:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800094a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000950:	2b00      	cmp	r3, #0
 8000952:	d00c      	beq.n	800096e <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000958:	681a      	ldr	r2, [r3, #0]
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800095e:	490a      	ldr	r1, [pc, #40]	@ (8000988 <HAL_DMA_Abort+0xbc>)
 8000960:	400a      	ands	r2, r1
 8000962:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000968:	687a      	ldr	r2, [r7, #4]
 800096a:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 800096c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	2225      	movs	r2, #37	@ 0x25
 8000972:	2101      	movs	r1, #1
 8000974:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	2224      	movs	r2, #36	@ 0x24
 800097a:	2100      	movs	r1, #0
 800097c:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 800097e:	2300      	movs	r3, #0
}
 8000980:	0018      	movs	r0, r3
 8000982:	46bd      	mov	sp, r7
 8000984:	b002      	add	sp, #8
 8000986:	bd80      	pop	{r7, pc}
 8000988:	fffffeff 	.word	0xfffffeff
 800098c:	40020000 	.word	0x40020000

08000990 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b084      	sub	sp, #16
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000998:	210f      	movs	r1, #15
 800099a:	187b      	adds	r3, r7, r1
 800099c:	2200      	movs	r2, #0
 800099e:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	2225      	movs	r2, #37	@ 0x25
 80009a4:	5c9b      	ldrb	r3, [r3, r2]
 80009a6:	b2db      	uxtb	r3, r3
 80009a8:	2b02      	cmp	r3, #2
 80009aa:	d006      	beq.n	80009ba <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	2204      	movs	r2, #4
 80009b0:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80009b2:	187b      	adds	r3, r7, r1
 80009b4:	2201      	movs	r2, #1
 80009b6:	701a      	strb	r2, [r3, #0]
 80009b8:	e049      	b.n	8000a4e <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	681a      	ldr	r2, [r3, #0]
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	210e      	movs	r1, #14
 80009c6:	438a      	bics	r2, r1
 80009c8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	681a      	ldr	r2, [r3, #0]
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	2101      	movs	r1, #1
 80009d6:	438a      	bics	r2, r1
 80009d8:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009de:	681a      	ldr	r2, [r3, #0]
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009e4:	491d      	ldr	r1, [pc, #116]	@ (8000a5c <HAL_DMA_Abort_IT+0xcc>)
 80009e6:	400a      	ands	r2, r1
 80009e8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 80009ea:	4b1d      	ldr	r3, [pc, #116]	@ (8000a60 <HAL_DMA_Abort_IT+0xd0>)
 80009ec:	6859      	ldr	r1, [r3, #4]
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009f2:	221c      	movs	r2, #28
 80009f4:	4013      	ands	r3, r2
 80009f6:	2201      	movs	r2, #1
 80009f8:	409a      	lsls	r2, r3
 80009fa:	4b19      	ldr	r3, [pc, #100]	@ (8000a60 <HAL_DMA_Abort_IT+0xd0>)
 80009fc:	430a      	orrs	r2, r1
 80009fe:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000a04:	687a      	ldr	r2, [r7, #4]
 8000a06:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8000a08:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d00c      	beq.n	8000a2c <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000a16:	681a      	ldr	r2, [r3, #0]
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000a1c:	490f      	ldr	r1, [pc, #60]	@ (8000a5c <HAL_DMA_Abort_IT+0xcc>)
 8000a1e:	400a      	ands	r2, r1
 8000a20:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000a26:	687a      	ldr	r2, [r7, #4]
 8000a28:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8000a2a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	2225      	movs	r2, #37	@ 0x25
 8000a30:	2101      	movs	r1, #1
 8000a32:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	2224      	movs	r2, #36	@ 0x24
 8000a38:	2100      	movs	r1, #0
 8000a3a:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d004      	beq.n	8000a4e <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000a48:	687a      	ldr	r2, [r7, #4]
 8000a4a:	0010      	movs	r0, r2
 8000a4c:	4798      	blx	r3
    }
  }
  return status;
 8000a4e:	230f      	movs	r3, #15
 8000a50:	18fb      	adds	r3, r7, r3
 8000a52:	781b      	ldrb	r3, [r3, #0]
}
 8000a54:	0018      	movs	r0, r3
 8000a56:	46bd      	mov	sp, r7
 8000a58:	b004      	add	sp, #16
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	fffffeff 	.word	0xfffffeff
 8000a60:	40020000 	.word	0x40020000

08000a64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b086      	sub	sp, #24
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
 8000a6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a72:	e147      	b.n	8000d04 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000a74:	683b      	ldr	r3, [r7, #0]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	2101      	movs	r1, #1
 8000a7a:	697a      	ldr	r2, [r7, #20]
 8000a7c:	4091      	lsls	r1, r2
 8000a7e:	000a      	movs	r2, r1
 8000a80:	4013      	ands	r3, r2
 8000a82:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d100      	bne.n	8000a8c <HAL_GPIO_Init+0x28>
 8000a8a:	e138      	b.n	8000cfe <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000a8c:	683b      	ldr	r3, [r7, #0]
 8000a8e:	685b      	ldr	r3, [r3, #4]
 8000a90:	2203      	movs	r2, #3
 8000a92:	4013      	ands	r3, r2
 8000a94:	2b01      	cmp	r3, #1
 8000a96:	d005      	beq.n	8000aa4 <HAL_GPIO_Init+0x40>
 8000a98:	683b      	ldr	r3, [r7, #0]
 8000a9a:	685b      	ldr	r3, [r3, #4]
 8000a9c:	2203      	movs	r2, #3
 8000a9e:	4013      	ands	r3, r2
 8000aa0:	2b02      	cmp	r3, #2
 8000aa2:	d130      	bne.n	8000b06 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	689b      	ldr	r3, [r3, #8]
 8000aa8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000aaa:	697b      	ldr	r3, [r7, #20]
 8000aac:	005b      	lsls	r3, r3, #1
 8000aae:	2203      	movs	r2, #3
 8000ab0:	409a      	lsls	r2, r3
 8000ab2:	0013      	movs	r3, r2
 8000ab4:	43da      	mvns	r2, r3
 8000ab6:	693b      	ldr	r3, [r7, #16]
 8000ab8:	4013      	ands	r3, r2
 8000aba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000abc:	683b      	ldr	r3, [r7, #0]
 8000abe:	68da      	ldr	r2, [r3, #12]
 8000ac0:	697b      	ldr	r3, [r7, #20]
 8000ac2:	005b      	lsls	r3, r3, #1
 8000ac4:	409a      	lsls	r2, r3
 8000ac6:	0013      	movs	r3, r2
 8000ac8:	693a      	ldr	r2, [r7, #16]
 8000aca:	4313      	orrs	r3, r2
 8000acc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	693a      	ldr	r2, [r7, #16]
 8000ad2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	685b      	ldr	r3, [r3, #4]
 8000ad8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000ada:	2201      	movs	r2, #1
 8000adc:	697b      	ldr	r3, [r7, #20]
 8000ade:	409a      	lsls	r2, r3
 8000ae0:	0013      	movs	r3, r2
 8000ae2:	43da      	mvns	r2, r3
 8000ae4:	693b      	ldr	r3, [r7, #16]
 8000ae6:	4013      	ands	r3, r2
 8000ae8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000aea:	683b      	ldr	r3, [r7, #0]
 8000aec:	685b      	ldr	r3, [r3, #4]
 8000aee:	091b      	lsrs	r3, r3, #4
 8000af0:	2201      	movs	r2, #1
 8000af2:	401a      	ands	r2, r3
 8000af4:	697b      	ldr	r3, [r7, #20]
 8000af6:	409a      	lsls	r2, r3
 8000af8:	0013      	movs	r3, r2
 8000afa:	693a      	ldr	r2, [r7, #16]
 8000afc:	4313      	orrs	r3, r2
 8000afe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	693a      	ldr	r2, [r7, #16]
 8000b04:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b06:	683b      	ldr	r3, [r7, #0]
 8000b08:	685b      	ldr	r3, [r3, #4]
 8000b0a:	2203      	movs	r2, #3
 8000b0c:	4013      	ands	r3, r2
 8000b0e:	2b03      	cmp	r3, #3
 8000b10:	d017      	beq.n	8000b42 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	68db      	ldr	r3, [r3, #12]
 8000b16:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000b18:	697b      	ldr	r3, [r7, #20]
 8000b1a:	005b      	lsls	r3, r3, #1
 8000b1c:	2203      	movs	r2, #3
 8000b1e:	409a      	lsls	r2, r3
 8000b20:	0013      	movs	r3, r2
 8000b22:	43da      	mvns	r2, r3
 8000b24:	693b      	ldr	r3, [r7, #16]
 8000b26:	4013      	ands	r3, r2
 8000b28:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000b2a:	683b      	ldr	r3, [r7, #0]
 8000b2c:	689a      	ldr	r2, [r3, #8]
 8000b2e:	697b      	ldr	r3, [r7, #20]
 8000b30:	005b      	lsls	r3, r3, #1
 8000b32:	409a      	lsls	r2, r3
 8000b34:	0013      	movs	r3, r2
 8000b36:	693a      	ldr	r2, [r7, #16]
 8000b38:	4313      	orrs	r3, r2
 8000b3a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	693a      	ldr	r2, [r7, #16]
 8000b40:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b42:	683b      	ldr	r3, [r7, #0]
 8000b44:	685b      	ldr	r3, [r3, #4]
 8000b46:	2203      	movs	r2, #3
 8000b48:	4013      	ands	r3, r2
 8000b4a:	2b02      	cmp	r3, #2
 8000b4c:	d123      	bne.n	8000b96 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000b4e:	697b      	ldr	r3, [r7, #20]
 8000b50:	08da      	lsrs	r2, r3, #3
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	3208      	adds	r2, #8
 8000b56:	0092      	lsls	r2, r2, #2
 8000b58:	58d3      	ldr	r3, [r2, r3]
 8000b5a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000b5c:	697b      	ldr	r3, [r7, #20]
 8000b5e:	2207      	movs	r2, #7
 8000b60:	4013      	ands	r3, r2
 8000b62:	009b      	lsls	r3, r3, #2
 8000b64:	220f      	movs	r2, #15
 8000b66:	409a      	lsls	r2, r3
 8000b68:	0013      	movs	r3, r2
 8000b6a:	43da      	mvns	r2, r3
 8000b6c:	693b      	ldr	r3, [r7, #16]
 8000b6e:	4013      	ands	r3, r2
 8000b70:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000b72:	683b      	ldr	r3, [r7, #0]
 8000b74:	691a      	ldr	r2, [r3, #16]
 8000b76:	697b      	ldr	r3, [r7, #20]
 8000b78:	2107      	movs	r1, #7
 8000b7a:	400b      	ands	r3, r1
 8000b7c:	009b      	lsls	r3, r3, #2
 8000b7e:	409a      	lsls	r2, r3
 8000b80:	0013      	movs	r3, r2
 8000b82:	693a      	ldr	r2, [r7, #16]
 8000b84:	4313      	orrs	r3, r2
 8000b86:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000b88:	697b      	ldr	r3, [r7, #20]
 8000b8a:	08da      	lsrs	r2, r3, #3
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	3208      	adds	r2, #8
 8000b90:	0092      	lsls	r2, r2, #2
 8000b92:	6939      	ldr	r1, [r7, #16]
 8000b94:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000b9c:	697b      	ldr	r3, [r7, #20]
 8000b9e:	005b      	lsls	r3, r3, #1
 8000ba0:	2203      	movs	r2, #3
 8000ba2:	409a      	lsls	r2, r3
 8000ba4:	0013      	movs	r3, r2
 8000ba6:	43da      	mvns	r2, r3
 8000ba8:	693b      	ldr	r3, [r7, #16]
 8000baa:	4013      	ands	r3, r2
 8000bac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	685b      	ldr	r3, [r3, #4]
 8000bb2:	2203      	movs	r2, #3
 8000bb4:	401a      	ands	r2, r3
 8000bb6:	697b      	ldr	r3, [r7, #20]
 8000bb8:	005b      	lsls	r3, r3, #1
 8000bba:	409a      	lsls	r2, r3
 8000bbc:	0013      	movs	r3, r2
 8000bbe:	693a      	ldr	r2, [r7, #16]
 8000bc0:	4313      	orrs	r3, r2
 8000bc2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	693a      	ldr	r2, [r7, #16]
 8000bc8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	685a      	ldr	r2, [r3, #4]
 8000bce:	23c0      	movs	r3, #192	@ 0xc0
 8000bd0:	029b      	lsls	r3, r3, #10
 8000bd2:	4013      	ands	r3, r2
 8000bd4:	d100      	bne.n	8000bd8 <HAL_GPIO_Init+0x174>
 8000bd6:	e092      	b.n	8000cfe <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8000bd8:	4a50      	ldr	r2, [pc, #320]	@ (8000d1c <HAL_GPIO_Init+0x2b8>)
 8000bda:	697b      	ldr	r3, [r7, #20]
 8000bdc:	089b      	lsrs	r3, r3, #2
 8000bde:	3318      	adds	r3, #24
 8000be0:	009b      	lsls	r3, r3, #2
 8000be2:	589b      	ldr	r3, [r3, r2]
 8000be4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8000be6:	697b      	ldr	r3, [r7, #20]
 8000be8:	2203      	movs	r2, #3
 8000bea:	4013      	ands	r3, r2
 8000bec:	00db      	lsls	r3, r3, #3
 8000bee:	220f      	movs	r2, #15
 8000bf0:	409a      	lsls	r2, r3
 8000bf2:	0013      	movs	r3, r2
 8000bf4:	43da      	mvns	r2, r3
 8000bf6:	693b      	ldr	r3, [r7, #16]
 8000bf8:	4013      	ands	r3, r2
 8000bfa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000bfc:	687a      	ldr	r2, [r7, #4]
 8000bfe:	23a0      	movs	r3, #160	@ 0xa0
 8000c00:	05db      	lsls	r3, r3, #23
 8000c02:	429a      	cmp	r2, r3
 8000c04:	d013      	beq.n	8000c2e <HAL_GPIO_Init+0x1ca>
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	4a45      	ldr	r2, [pc, #276]	@ (8000d20 <HAL_GPIO_Init+0x2bc>)
 8000c0a:	4293      	cmp	r3, r2
 8000c0c:	d00d      	beq.n	8000c2a <HAL_GPIO_Init+0x1c6>
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	4a44      	ldr	r2, [pc, #272]	@ (8000d24 <HAL_GPIO_Init+0x2c0>)
 8000c12:	4293      	cmp	r3, r2
 8000c14:	d007      	beq.n	8000c26 <HAL_GPIO_Init+0x1c2>
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	4a43      	ldr	r2, [pc, #268]	@ (8000d28 <HAL_GPIO_Init+0x2c4>)
 8000c1a:	4293      	cmp	r3, r2
 8000c1c:	d101      	bne.n	8000c22 <HAL_GPIO_Init+0x1be>
 8000c1e:	2303      	movs	r3, #3
 8000c20:	e006      	b.n	8000c30 <HAL_GPIO_Init+0x1cc>
 8000c22:	2305      	movs	r3, #5
 8000c24:	e004      	b.n	8000c30 <HAL_GPIO_Init+0x1cc>
 8000c26:	2302      	movs	r3, #2
 8000c28:	e002      	b.n	8000c30 <HAL_GPIO_Init+0x1cc>
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	e000      	b.n	8000c30 <HAL_GPIO_Init+0x1cc>
 8000c2e:	2300      	movs	r3, #0
 8000c30:	697a      	ldr	r2, [r7, #20]
 8000c32:	2103      	movs	r1, #3
 8000c34:	400a      	ands	r2, r1
 8000c36:	00d2      	lsls	r2, r2, #3
 8000c38:	4093      	lsls	r3, r2
 8000c3a:	693a      	ldr	r2, [r7, #16]
 8000c3c:	4313      	orrs	r3, r2
 8000c3e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8000c40:	4936      	ldr	r1, [pc, #216]	@ (8000d1c <HAL_GPIO_Init+0x2b8>)
 8000c42:	697b      	ldr	r3, [r7, #20]
 8000c44:	089b      	lsrs	r3, r3, #2
 8000c46:	3318      	adds	r3, #24
 8000c48:	009b      	lsls	r3, r3, #2
 8000c4a:	693a      	ldr	r2, [r7, #16]
 8000c4c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000c4e:	4b33      	ldr	r3, [pc, #204]	@ (8000d1c <HAL_GPIO_Init+0x2b8>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	43da      	mvns	r2, r3
 8000c58:	693b      	ldr	r3, [r7, #16]
 8000c5a:	4013      	ands	r3, r2
 8000c5c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000c5e:	683b      	ldr	r3, [r7, #0]
 8000c60:	685a      	ldr	r2, [r3, #4]
 8000c62:	2380      	movs	r3, #128	@ 0x80
 8000c64:	035b      	lsls	r3, r3, #13
 8000c66:	4013      	ands	r3, r2
 8000c68:	d003      	beq.n	8000c72 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8000c6a:	693a      	ldr	r2, [r7, #16]
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	4313      	orrs	r3, r2
 8000c70:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000c72:	4b2a      	ldr	r3, [pc, #168]	@ (8000d1c <HAL_GPIO_Init+0x2b8>)
 8000c74:	693a      	ldr	r2, [r7, #16]
 8000c76:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8000c78:	4b28      	ldr	r3, [pc, #160]	@ (8000d1c <HAL_GPIO_Init+0x2b8>)
 8000c7a:	685b      	ldr	r3, [r3, #4]
 8000c7c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	43da      	mvns	r2, r3
 8000c82:	693b      	ldr	r3, [r7, #16]
 8000c84:	4013      	ands	r3, r2
 8000c86:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	685a      	ldr	r2, [r3, #4]
 8000c8c:	2380      	movs	r3, #128	@ 0x80
 8000c8e:	039b      	lsls	r3, r3, #14
 8000c90:	4013      	ands	r3, r2
 8000c92:	d003      	beq.n	8000c9c <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8000c94:	693a      	ldr	r2, [r7, #16]
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	4313      	orrs	r3, r2
 8000c9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000c9c:	4b1f      	ldr	r3, [pc, #124]	@ (8000d1c <HAL_GPIO_Init+0x2b8>)
 8000c9e:	693a      	ldr	r2, [r7, #16]
 8000ca0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000ca2:	4a1e      	ldr	r2, [pc, #120]	@ (8000d1c <HAL_GPIO_Init+0x2b8>)
 8000ca4:	2384      	movs	r3, #132	@ 0x84
 8000ca6:	58d3      	ldr	r3, [r2, r3]
 8000ca8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	43da      	mvns	r2, r3
 8000cae:	693b      	ldr	r3, [r7, #16]
 8000cb0:	4013      	ands	r3, r2
 8000cb2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	685a      	ldr	r2, [r3, #4]
 8000cb8:	2380      	movs	r3, #128	@ 0x80
 8000cba:	029b      	lsls	r3, r3, #10
 8000cbc:	4013      	ands	r3, r2
 8000cbe:	d003      	beq.n	8000cc8 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8000cc0:	693a      	ldr	r2, [r7, #16]
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	4313      	orrs	r3, r2
 8000cc6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000cc8:	4914      	ldr	r1, [pc, #80]	@ (8000d1c <HAL_GPIO_Init+0x2b8>)
 8000cca:	2284      	movs	r2, #132	@ 0x84
 8000ccc:	693b      	ldr	r3, [r7, #16]
 8000cce:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8000cd0:	4a12      	ldr	r2, [pc, #72]	@ (8000d1c <HAL_GPIO_Init+0x2b8>)
 8000cd2:	2380      	movs	r3, #128	@ 0x80
 8000cd4:	58d3      	ldr	r3, [r2, r3]
 8000cd6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	43da      	mvns	r2, r3
 8000cdc:	693b      	ldr	r3, [r7, #16]
 8000cde:	4013      	ands	r3, r2
 8000ce0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	685a      	ldr	r2, [r3, #4]
 8000ce6:	2380      	movs	r3, #128	@ 0x80
 8000ce8:	025b      	lsls	r3, r3, #9
 8000cea:	4013      	ands	r3, r2
 8000cec:	d003      	beq.n	8000cf6 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8000cee:	693a      	ldr	r2, [r7, #16]
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	4313      	orrs	r3, r2
 8000cf4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000cf6:	4909      	ldr	r1, [pc, #36]	@ (8000d1c <HAL_GPIO_Init+0x2b8>)
 8000cf8:	2280      	movs	r2, #128	@ 0x80
 8000cfa:	693b      	ldr	r3, [r7, #16]
 8000cfc:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8000cfe:	697b      	ldr	r3, [r7, #20]
 8000d00:	3301      	adds	r3, #1
 8000d02:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	681a      	ldr	r2, [r3, #0]
 8000d08:	697b      	ldr	r3, [r7, #20]
 8000d0a:	40da      	lsrs	r2, r3
 8000d0c:	1e13      	subs	r3, r2, #0
 8000d0e:	d000      	beq.n	8000d12 <HAL_GPIO_Init+0x2ae>
 8000d10:	e6b0      	b.n	8000a74 <HAL_GPIO_Init+0x10>
  }
}
 8000d12:	46c0      	nop			@ (mov r8, r8)
 8000d14:	46c0      	nop			@ (mov r8, r8)
 8000d16:	46bd      	mov	sp, r7
 8000d18:	b006      	add	sp, #24
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	40021800 	.word	0x40021800
 8000d20:	50000400 	.word	0x50000400
 8000d24:	50000800 	.word	0x50000800
 8000d28:	50000c00 	.word	0x50000c00

08000d2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b082      	sub	sp, #8
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
 8000d34:	0008      	movs	r0, r1
 8000d36:	0011      	movs	r1, r2
 8000d38:	1cbb      	adds	r3, r7, #2
 8000d3a:	1c02      	adds	r2, r0, #0
 8000d3c:	801a      	strh	r2, [r3, #0]
 8000d3e:	1c7b      	adds	r3, r7, #1
 8000d40:	1c0a      	adds	r2, r1, #0
 8000d42:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000d44:	1c7b      	adds	r3, r7, #1
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d004      	beq.n	8000d56 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000d4c:	1cbb      	adds	r3, r7, #2
 8000d4e:	881a      	ldrh	r2, [r3, #0]
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000d54:	e003      	b.n	8000d5e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000d56:	1cbb      	adds	r3, r7, #2
 8000d58:	881a      	ldrh	r2, [r3, #0]
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000d5e:	46c0      	nop			@ (mov r8, r8)
 8000d60:	46bd      	mov	sp, r7
 8000d62:	b002      	add	sp, #8
 8000d64:	bd80      	pop	{r7, pc}

08000d66 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000d66:	b580      	push	{r7, lr}
 8000d68:	b084      	sub	sp, #16
 8000d6a:	af00      	add	r7, sp, #0
 8000d6c:	6078      	str	r0, [r7, #4]
 8000d6e:	000a      	movs	r2, r1
 8000d70:	1cbb      	adds	r3, r7, #2
 8000d72:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	695b      	ldr	r3, [r3, #20]
 8000d78:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000d7a:	1cbb      	adds	r3, r7, #2
 8000d7c:	881b      	ldrh	r3, [r3, #0]
 8000d7e:	68fa      	ldr	r2, [r7, #12]
 8000d80:	4013      	ands	r3, r2
 8000d82:	041a      	lsls	r2, r3, #16
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	43db      	mvns	r3, r3
 8000d88:	1cb9      	adds	r1, r7, #2
 8000d8a:	8809      	ldrh	r1, [r1, #0]
 8000d8c:	400b      	ands	r3, r1
 8000d8e:	431a      	orrs	r2, r3
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	619a      	str	r2, [r3, #24]
}
 8000d94:	46c0      	nop			@ (mov r8, r8)
 8000d96:	46bd      	mov	sp, r7
 8000d98:	b004      	add	sp, #16
 8000d9a:	bd80      	pop	{r7, pc}

08000d9c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b084      	sub	sp, #16
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8000da4:	4b19      	ldr	r3, [pc, #100]	@ (8000e0c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	4a19      	ldr	r2, [pc, #100]	@ (8000e10 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8000daa:	4013      	ands	r3, r2
 8000dac:	0019      	movs	r1, r3
 8000dae:	4b17      	ldr	r3, [pc, #92]	@ (8000e0c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000db0:	687a      	ldr	r2, [r7, #4]
 8000db2:	430a      	orrs	r2, r1
 8000db4:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000db6:	687a      	ldr	r2, [r7, #4]
 8000db8:	2380      	movs	r3, #128	@ 0x80
 8000dba:	009b      	lsls	r3, r3, #2
 8000dbc:	429a      	cmp	r2, r3
 8000dbe:	d11f      	bne.n	8000e00 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8000dc0:	4b14      	ldr	r3, [pc, #80]	@ (8000e14 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8000dc2:	681a      	ldr	r2, [r3, #0]
 8000dc4:	0013      	movs	r3, r2
 8000dc6:	005b      	lsls	r3, r3, #1
 8000dc8:	189b      	adds	r3, r3, r2
 8000dca:	005b      	lsls	r3, r3, #1
 8000dcc:	4912      	ldr	r1, [pc, #72]	@ (8000e18 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8000dce:	0018      	movs	r0, r3
 8000dd0:	f7ff f99e 	bl	8000110 <__udivsi3>
 8000dd4:	0003      	movs	r3, r0
 8000dd6:	3301      	adds	r3, #1
 8000dd8:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000dda:	e008      	b.n	8000dee <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d003      	beq.n	8000dea <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	3b01      	subs	r3, #1
 8000de6:	60fb      	str	r3, [r7, #12]
 8000de8:	e001      	b.n	8000dee <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8000dea:	2303      	movs	r3, #3
 8000dec:	e009      	b.n	8000e02 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000dee:	4b07      	ldr	r3, [pc, #28]	@ (8000e0c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000df0:	695a      	ldr	r2, [r3, #20]
 8000df2:	2380      	movs	r3, #128	@ 0x80
 8000df4:	00db      	lsls	r3, r3, #3
 8000df6:	401a      	ands	r2, r3
 8000df8:	2380      	movs	r3, #128	@ 0x80
 8000dfa:	00db      	lsls	r3, r3, #3
 8000dfc:	429a      	cmp	r2, r3
 8000dfe:	d0ed      	beq.n	8000ddc <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8000e00:	2300      	movs	r3, #0
}
 8000e02:	0018      	movs	r0, r3
 8000e04:	46bd      	mov	sp, r7
 8000e06:	b004      	add	sp, #16
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	46c0      	nop			@ (mov r8, r8)
 8000e0c:	40007000 	.word	0x40007000
 8000e10:	fffff9ff 	.word	0xfffff9ff
 8000e14:	20000000 	.word	0x20000000
 8000e18:	000f4240 	.word	0x000f4240

08000e1c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8000e20:	4b03      	ldr	r3, [pc, #12]	@ (8000e30 <LL_RCC_GetAPB1Prescaler+0x14>)
 8000e22:	689a      	ldr	r2, [r3, #8]
 8000e24:	23e0      	movs	r3, #224	@ 0xe0
 8000e26:	01db      	lsls	r3, r3, #7
 8000e28:	4013      	ands	r3, r2
}
 8000e2a:	0018      	movs	r0, r3
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	40021000 	.word	0x40021000

08000e34 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b088      	sub	sp, #32
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d101      	bne.n	8000e46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000e42:	2301      	movs	r3, #1
 8000e44:	e2f3      	b.n	800142e <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	4013      	ands	r3, r2
 8000e4e:	d100      	bne.n	8000e52 <HAL_RCC_OscConfig+0x1e>
 8000e50:	e07c      	b.n	8000f4c <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000e52:	4bc3      	ldr	r3, [pc, #780]	@ (8001160 <HAL_RCC_OscConfig+0x32c>)
 8000e54:	689b      	ldr	r3, [r3, #8]
 8000e56:	2238      	movs	r2, #56	@ 0x38
 8000e58:	4013      	ands	r3, r2
 8000e5a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000e5c:	4bc0      	ldr	r3, [pc, #768]	@ (8001160 <HAL_RCC_OscConfig+0x32c>)
 8000e5e:	68db      	ldr	r3, [r3, #12]
 8000e60:	2203      	movs	r2, #3
 8000e62:	4013      	ands	r3, r2
 8000e64:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8000e66:	69bb      	ldr	r3, [r7, #24]
 8000e68:	2b10      	cmp	r3, #16
 8000e6a:	d102      	bne.n	8000e72 <HAL_RCC_OscConfig+0x3e>
 8000e6c:	697b      	ldr	r3, [r7, #20]
 8000e6e:	2b03      	cmp	r3, #3
 8000e70:	d002      	beq.n	8000e78 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8000e72:	69bb      	ldr	r3, [r7, #24]
 8000e74:	2b08      	cmp	r3, #8
 8000e76:	d10b      	bne.n	8000e90 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e78:	4bb9      	ldr	r3, [pc, #740]	@ (8001160 <HAL_RCC_OscConfig+0x32c>)
 8000e7a:	681a      	ldr	r2, [r3, #0]
 8000e7c:	2380      	movs	r3, #128	@ 0x80
 8000e7e:	029b      	lsls	r3, r3, #10
 8000e80:	4013      	ands	r3, r2
 8000e82:	d062      	beq.n	8000f4a <HAL_RCC_OscConfig+0x116>
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	685b      	ldr	r3, [r3, #4]
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d15e      	bne.n	8000f4a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8000e8c:	2301      	movs	r3, #1
 8000e8e:	e2ce      	b.n	800142e <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	685a      	ldr	r2, [r3, #4]
 8000e94:	2380      	movs	r3, #128	@ 0x80
 8000e96:	025b      	lsls	r3, r3, #9
 8000e98:	429a      	cmp	r2, r3
 8000e9a:	d107      	bne.n	8000eac <HAL_RCC_OscConfig+0x78>
 8000e9c:	4bb0      	ldr	r3, [pc, #704]	@ (8001160 <HAL_RCC_OscConfig+0x32c>)
 8000e9e:	681a      	ldr	r2, [r3, #0]
 8000ea0:	4baf      	ldr	r3, [pc, #700]	@ (8001160 <HAL_RCC_OscConfig+0x32c>)
 8000ea2:	2180      	movs	r1, #128	@ 0x80
 8000ea4:	0249      	lsls	r1, r1, #9
 8000ea6:	430a      	orrs	r2, r1
 8000ea8:	601a      	str	r2, [r3, #0]
 8000eaa:	e020      	b.n	8000eee <HAL_RCC_OscConfig+0xba>
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	685a      	ldr	r2, [r3, #4]
 8000eb0:	23a0      	movs	r3, #160	@ 0xa0
 8000eb2:	02db      	lsls	r3, r3, #11
 8000eb4:	429a      	cmp	r2, r3
 8000eb6:	d10e      	bne.n	8000ed6 <HAL_RCC_OscConfig+0xa2>
 8000eb8:	4ba9      	ldr	r3, [pc, #676]	@ (8001160 <HAL_RCC_OscConfig+0x32c>)
 8000eba:	681a      	ldr	r2, [r3, #0]
 8000ebc:	4ba8      	ldr	r3, [pc, #672]	@ (8001160 <HAL_RCC_OscConfig+0x32c>)
 8000ebe:	2180      	movs	r1, #128	@ 0x80
 8000ec0:	02c9      	lsls	r1, r1, #11
 8000ec2:	430a      	orrs	r2, r1
 8000ec4:	601a      	str	r2, [r3, #0]
 8000ec6:	4ba6      	ldr	r3, [pc, #664]	@ (8001160 <HAL_RCC_OscConfig+0x32c>)
 8000ec8:	681a      	ldr	r2, [r3, #0]
 8000eca:	4ba5      	ldr	r3, [pc, #660]	@ (8001160 <HAL_RCC_OscConfig+0x32c>)
 8000ecc:	2180      	movs	r1, #128	@ 0x80
 8000ece:	0249      	lsls	r1, r1, #9
 8000ed0:	430a      	orrs	r2, r1
 8000ed2:	601a      	str	r2, [r3, #0]
 8000ed4:	e00b      	b.n	8000eee <HAL_RCC_OscConfig+0xba>
 8000ed6:	4ba2      	ldr	r3, [pc, #648]	@ (8001160 <HAL_RCC_OscConfig+0x32c>)
 8000ed8:	681a      	ldr	r2, [r3, #0]
 8000eda:	4ba1      	ldr	r3, [pc, #644]	@ (8001160 <HAL_RCC_OscConfig+0x32c>)
 8000edc:	49a1      	ldr	r1, [pc, #644]	@ (8001164 <HAL_RCC_OscConfig+0x330>)
 8000ede:	400a      	ands	r2, r1
 8000ee0:	601a      	str	r2, [r3, #0]
 8000ee2:	4b9f      	ldr	r3, [pc, #636]	@ (8001160 <HAL_RCC_OscConfig+0x32c>)
 8000ee4:	681a      	ldr	r2, [r3, #0]
 8000ee6:	4b9e      	ldr	r3, [pc, #632]	@ (8001160 <HAL_RCC_OscConfig+0x32c>)
 8000ee8:	499f      	ldr	r1, [pc, #636]	@ (8001168 <HAL_RCC_OscConfig+0x334>)
 8000eea:	400a      	ands	r2, r1
 8000eec:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	685b      	ldr	r3, [r3, #4]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d014      	beq.n	8000f20 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ef6:	f7ff fbdd 	bl	80006b4 <HAL_GetTick>
 8000efa:	0003      	movs	r3, r0
 8000efc:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000efe:	e008      	b.n	8000f12 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f00:	f7ff fbd8 	bl	80006b4 <HAL_GetTick>
 8000f04:	0002      	movs	r2, r0
 8000f06:	693b      	ldr	r3, [r7, #16]
 8000f08:	1ad3      	subs	r3, r2, r3
 8000f0a:	2b64      	cmp	r3, #100	@ 0x64
 8000f0c:	d901      	bls.n	8000f12 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8000f0e:	2303      	movs	r3, #3
 8000f10:	e28d      	b.n	800142e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000f12:	4b93      	ldr	r3, [pc, #588]	@ (8001160 <HAL_RCC_OscConfig+0x32c>)
 8000f14:	681a      	ldr	r2, [r3, #0]
 8000f16:	2380      	movs	r3, #128	@ 0x80
 8000f18:	029b      	lsls	r3, r3, #10
 8000f1a:	4013      	ands	r3, r2
 8000f1c:	d0f0      	beq.n	8000f00 <HAL_RCC_OscConfig+0xcc>
 8000f1e:	e015      	b.n	8000f4c <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f20:	f7ff fbc8 	bl	80006b4 <HAL_GetTick>
 8000f24:	0003      	movs	r3, r0
 8000f26:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000f28:	e008      	b.n	8000f3c <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f2a:	f7ff fbc3 	bl	80006b4 <HAL_GetTick>
 8000f2e:	0002      	movs	r2, r0
 8000f30:	693b      	ldr	r3, [r7, #16]
 8000f32:	1ad3      	subs	r3, r2, r3
 8000f34:	2b64      	cmp	r3, #100	@ 0x64
 8000f36:	d901      	bls.n	8000f3c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8000f38:	2303      	movs	r3, #3
 8000f3a:	e278      	b.n	800142e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000f3c:	4b88      	ldr	r3, [pc, #544]	@ (8001160 <HAL_RCC_OscConfig+0x32c>)
 8000f3e:	681a      	ldr	r2, [r3, #0]
 8000f40:	2380      	movs	r3, #128	@ 0x80
 8000f42:	029b      	lsls	r3, r3, #10
 8000f44:	4013      	ands	r3, r2
 8000f46:	d1f0      	bne.n	8000f2a <HAL_RCC_OscConfig+0xf6>
 8000f48:	e000      	b.n	8000f4c <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f4a:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	2202      	movs	r2, #2
 8000f52:	4013      	ands	r3, r2
 8000f54:	d100      	bne.n	8000f58 <HAL_RCC_OscConfig+0x124>
 8000f56:	e099      	b.n	800108c <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000f58:	4b81      	ldr	r3, [pc, #516]	@ (8001160 <HAL_RCC_OscConfig+0x32c>)
 8000f5a:	689b      	ldr	r3, [r3, #8]
 8000f5c:	2238      	movs	r2, #56	@ 0x38
 8000f5e:	4013      	ands	r3, r2
 8000f60:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000f62:	4b7f      	ldr	r3, [pc, #508]	@ (8001160 <HAL_RCC_OscConfig+0x32c>)
 8000f64:	68db      	ldr	r3, [r3, #12]
 8000f66:	2203      	movs	r2, #3
 8000f68:	4013      	ands	r3, r2
 8000f6a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8000f6c:	69bb      	ldr	r3, [r7, #24]
 8000f6e:	2b10      	cmp	r3, #16
 8000f70:	d102      	bne.n	8000f78 <HAL_RCC_OscConfig+0x144>
 8000f72:	697b      	ldr	r3, [r7, #20]
 8000f74:	2b02      	cmp	r3, #2
 8000f76:	d002      	beq.n	8000f7e <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8000f78:	69bb      	ldr	r3, [r7, #24]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d135      	bne.n	8000fea <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000f7e:	4b78      	ldr	r3, [pc, #480]	@ (8001160 <HAL_RCC_OscConfig+0x32c>)
 8000f80:	681a      	ldr	r2, [r3, #0]
 8000f82:	2380      	movs	r3, #128	@ 0x80
 8000f84:	00db      	lsls	r3, r3, #3
 8000f86:	4013      	ands	r3, r2
 8000f88:	d005      	beq.n	8000f96 <HAL_RCC_OscConfig+0x162>
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	68db      	ldr	r3, [r3, #12]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d101      	bne.n	8000f96 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8000f92:	2301      	movs	r3, #1
 8000f94:	e24b      	b.n	800142e <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f96:	4b72      	ldr	r3, [pc, #456]	@ (8001160 <HAL_RCC_OscConfig+0x32c>)
 8000f98:	685b      	ldr	r3, [r3, #4]
 8000f9a:	4a74      	ldr	r2, [pc, #464]	@ (800116c <HAL_RCC_OscConfig+0x338>)
 8000f9c:	4013      	ands	r3, r2
 8000f9e:	0019      	movs	r1, r3
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	695b      	ldr	r3, [r3, #20]
 8000fa4:	021a      	lsls	r2, r3, #8
 8000fa6:	4b6e      	ldr	r3, [pc, #440]	@ (8001160 <HAL_RCC_OscConfig+0x32c>)
 8000fa8:	430a      	orrs	r2, r1
 8000faa:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000fac:	69bb      	ldr	r3, [r7, #24]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d112      	bne.n	8000fd8 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8000fb2:	4b6b      	ldr	r3, [pc, #428]	@ (8001160 <HAL_RCC_OscConfig+0x32c>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	4a6e      	ldr	r2, [pc, #440]	@ (8001170 <HAL_RCC_OscConfig+0x33c>)
 8000fb8:	4013      	ands	r3, r2
 8000fba:	0019      	movs	r1, r3
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	691a      	ldr	r2, [r3, #16]
 8000fc0:	4b67      	ldr	r3, [pc, #412]	@ (8001160 <HAL_RCC_OscConfig+0x32c>)
 8000fc2:	430a      	orrs	r2, r1
 8000fc4:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8000fc6:	4b66      	ldr	r3, [pc, #408]	@ (8001160 <HAL_RCC_OscConfig+0x32c>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	0adb      	lsrs	r3, r3, #11
 8000fcc:	2207      	movs	r2, #7
 8000fce:	4013      	ands	r3, r2
 8000fd0:	4a68      	ldr	r2, [pc, #416]	@ (8001174 <HAL_RCC_OscConfig+0x340>)
 8000fd2:	40da      	lsrs	r2, r3
 8000fd4:	4b68      	ldr	r3, [pc, #416]	@ (8001178 <HAL_RCC_OscConfig+0x344>)
 8000fd6:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8000fd8:	4b68      	ldr	r3, [pc, #416]	@ (800117c <HAL_RCC_OscConfig+0x348>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	0018      	movs	r0, r3
 8000fde:	f7ff fb0d 	bl	80005fc <HAL_InitTick>
 8000fe2:	1e03      	subs	r3, r0, #0
 8000fe4:	d051      	beq.n	800108a <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	e221      	b.n	800142e <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	68db      	ldr	r3, [r3, #12]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d030      	beq.n	8001054 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8000ff2:	4b5b      	ldr	r3, [pc, #364]	@ (8001160 <HAL_RCC_OscConfig+0x32c>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	4a5e      	ldr	r2, [pc, #376]	@ (8001170 <HAL_RCC_OscConfig+0x33c>)
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	0019      	movs	r1, r3
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	691a      	ldr	r2, [r3, #16]
 8001000:	4b57      	ldr	r3, [pc, #348]	@ (8001160 <HAL_RCC_OscConfig+0x32c>)
 8001002:	430a      	orrs	r2, r1
 8001004:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001006:	4b56      	ldr	r3, [pc, #344]	@ (8001160 <HAL_RCC_OscConfig+0x32c>)
 8001008:	681a      	ldr	r2, [r3, #0]
 800100a:	4b55      	ldr	r3, [pc, #340]	@ (8001160 <HAL_RCC_OscConfig+0x32c>)
 800100c:	2180      	movs	r1, #128	@ 0x80
 800100e:	0049      	lsls	r1, r1, #1
 8001010:	430a      	orrs	r2, r1
 8001012:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001014:	f7ff fb4e 	bl	80006b4 <HAL_GetTick>
 8001018:	0003      	movs	r3, r0
 800101a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800101c:	e008      	b.n	8001030 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800101e:	f7ff fb49 	bl	80006b4 <HAL_GetTick>
 8001022:	0002      	movs	r2, r0
 8001024:	693b      	ldr	r3, [r7, #16]
 8001026:	1ad3      	subs	r3, r2, r3
 8001028:	2b02      	cmp	r3, #2
 800102a:	d901      	bls.n	8001030 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800102c:	2303      	movs	r3, #3
 800102e:	e1fe      	b.n	800142e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001030:	4b4b      	ldr	r3, [pc, #300]	@ (8001160 <HAL_RCC_OscConfig+0x32c>)
 8001032:	681a      	ldr	r2, [r3, #0]
 8001034:	2380      	movs	r3, #128	@ 0x80
 8001036:	00db      	lsls	r3, r3, #3
 8001038:	4013      	ands	r3, r2
 800103a:	d0f0      	beq.n	800101e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800103c:	4b48      	ldr	r3, [pc, #288]	@ (8001160 <HAL_RCC_OscConfig+0x32c>)
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	4a4a      	ldr	r2, [pc, #296]	@ (800116c <HAL_RCC_OscConfig+0x338>)
 8001042:	4013      	ands	r3, r2
 8001044:	0019      	movs	r1, r3
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	695b      	ldr	r3, [r3, #20]
 800104a:	021a      	lsls	r2, r3, #8
 800104c:	4b44      	ldr	r3, [pc, #272]	@ (8001160 <HAL_RCC_OscConfig+0x32c>)
 800104e:	430a      	orrs	r2, r1
 8001050:	605a      	str	r2, [r3, #4]
 8001052:	e01b      	b.n	800108c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001054:	4b42      	ldr	r3, [pc, #264]	@ (8001160 <HAL_RCC_OscConfig+0x32c>)
 8001056:	681a      	ldr	r2, [r3, #0]
 8001058:	4b41      	ldr	r3, [pc, #260]	@ (8001160 <HAL_RCC_OscConfig+0x32c>)
 800105a:	4949      	ldr	r1, [pc, #292]	@ (8001180 <HAL_RCC_OscConfig+0x34c>)
 800105c:	400a      	ands	r2, r1
 800105e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001060:	f7ff fb28 	bl	80006b4 <HAL_GetTick>
 8001064:	0003      	movs	r3, r0
 8001066:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001068:	e008      	b.n	800107c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800106a:	f7ff fb23 	bl	80006b4 <HAL_GetTick>
 800106e:	0002      	movs	r2, r0
 8001070:	693b      	ldr	r3, [r7, #16]
 8001072:	1ad3      	subs	r3, r2, r3
 8001074:	2b02      	cmp	r3, #2
 8001076:	d901      	bls.n	800107c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001078:	2303      	movs	r3, #3
 800107a:	e1d8      	b.n	800142e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800107c:	4b38      	ldr	r3, [pc, #224]	@ (8001160 <HAL_RCC_OscConfig+0x32c>)
 800107e:	681a      	ldr	r2, [r3, #0]
 8001080:	2380      	movs	r3, #128	@ 0x80
 8001082:	00db      	lsls	r3, r3, #3
 8001084:	4013      	ands	r3, r2
 8001086:	d1f0      	bne.n	800106a <HAL_RCC_OscConfig+0x236>
 8001088:	e000      	b.n	800108c <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800108a:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	2208      	movs	r2, #8
 8001092:	4013      	ands	r3, r2
 8001094:	d047      	beq.n	8001126 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001096:	4b32      	ldr	r3, [pc, #200]	@ (8001160 <HAL_RCC_OscConfig+0x32c>)
 8001098:	689b      	ldr	r3, [r3, #8]
 800109a:	2238      	movs	r2, #56	@ 0x38
 800109c:	4013      	ands	r3, r2
 800109e:	2b18      	cmp	r3, #24
 80010a0:	d10a      	bne.n	80010b8 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80010a2:	4b2f      	ldr	r3, [pc, #188]	@ (8001160 <HAL_RCC_OscConfig+0x32c>)
 80010a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010a6:	2202      	movs	r2, #2
 80010a8:	4013      	ands	r3, r2
 80010aa:	d03c      	beq.n	8001126 <HAL_RCC_OscConfig+0x2f2>
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	699b      	ldr	r3, [r3, #24]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d138      	bne.n	8001126 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80010b4:	2301      	movs	r3, #1
 80010b6:	e1ba      	b.n	800142e <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	699b      	ldr	r3, [r3, #24]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d019      	beq.n	80010f4 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80010c0:	4b27      	ldr	r3, [pc, #156]	@ (8001160 <HAL_RCC_OscConfig+0x32c>)
 80010c2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80010c4:	4b26      	ldr	r3, [pc, #152]	@ (8001160 <HAL_RCC_OscConfig+0x32c>)
 80010c6:	2101      	movs	r1, #1
 80010c8:	430a      	orrs	r2, r1
 80010ca:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010cc:	f7ff faf2 	bl	80006b4 <HAL_GetTick>
 80010d0:	0003      	movs	r3, r0
 80010d2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80010d4:	e008      	b.n	80010e8 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010d6:	f7ff faed 	bl	80006b4 <HAL_GetTick>
 80010da:	0002      	movs	r2, r0
 80010dc:	693b      	ldr	r3, [r7, #16]
 80010de:	1ad3      	subs	r3, r2, r3
 80010e0:	2b02      	cmp	r3, #2
 80010e2:	d901      	bls.n	80010e8 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80010e4:	2303      	movs	r3, #3
 80010e6:	e1a2      	b.n	800142e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80010e8:	4b1d      	ldr	r3, [pc, #116]	@ (8001160 <HAL_RCC_OscConfig+0x32c>)
 80010ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010ec:	2202      	movs	r2, #2
 80010ee:	4013      	ands	r3, r2
 80010f0:	d0f1      	beq.n	80010d6 <HAL_RCC_OscConfig+0x2a2>
 80010f2:	e018      	b.n	8001126 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80010f4:	4b1a      	ldr	r3, [pc, #104]	@ (8001160 <HAL_RCC_OscConfig+0x32c>)
 80010f6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80010f8:	4b19      	ldr	r3, [pc, #100]	@ (8001160 <HAL_RCC_OscConfig+0x32c>)
 80010fa:	2101      	movs	r1, #1
 80010fc:	438a      	bics	r2, r1
 80010fe:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001100:	f7ff fad8 	bl	80006b4 <HAL_GetTick>
 8001104:	0003      	movs	r3, r0
 8001106:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001108:	e008      	b.n	800111c <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800110a:	f7ff fad3 	bl	80006b4 <HAL_GetTick>
 800110e:	0002      	movs	r2, r0
 8001110:	693b      	ldr	r3, [r7, #16]
 8001112:	1ad3      	subs	r3, r2, r3
 8001114:	2b02      	cmp	r3, #2
 8001116:	d901      	bls.n	800111c <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001118:	2303      	movs	r3, #3
 800111a:	e188      	b.n	800142e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800111c:	4b10      	ldr	r3, [pc, #64]	@ (8001160 <HAL_RCC_OscConfig+0x32c>)
 800111e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001120:	2202      	movs	r2, #2
 8001122:	4013      	ands	r3, r2
 8001124:	d1f1      	bne.n	800110a <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	2204      	movs	r2, #4
 800112c:	4013      	ands	r3, r2
 800112e:	d100      	bne.n	8001132 <HAL_RCC_OscConfig+0x2fe>
 8001130:	e0c6      	b.n	80012c0 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001132:	231f      	movs	r3, #31
 8001134:	18fb      	adds	r3, r7, r3
 8001136:	2200      	movs	r2, #0
 8001138:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800113a:	4b09      	ldr	r3, [pc, #36]	@ (8001160 <HAL_RCC_OscConfig+0x32c>)
 800113c:	689b      	ldr	r3, [r3, #8]
 800113e:	2238      	movs	r2, #56	@ 0x38
 8001140:	4013      	ands	r3, r2
 8001142:	2b20      	cmp	r3, #32
 8001144:	d11e      	bne.n	8001184 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001146:	4b06      	ldr	r3, [pc, #24]	@ (8001160 <HAL_RCC_OscConfig+0x32c>)
 8001148:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800114a:	2202      	movs	r2, #2
 800114c:	4013      	ands	r3, r2
 800114e:	d100      	bne.n	8001152 <HAL_RCC_OscConfig+0x31e>
 8001150:	e0b6      	b.n	80012c0 <HAL_RCC_OscConfig+0x48c>
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	689b      	ldr	r3, [r3, #8]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d000      	beq.n	800115c <HAL_RCC_OscConfig+0x328>
 800115a:	e0b1      	b.n	80012c0 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 800115c:	2301      	movs	r3, #1
 800115e:	e166      	b.n	800142e <HAL_RCC_OscConfig+0x5fa>
 8001160:	40021000 	.word	0x40021000
 8001164:	fffeffff 	.word	0xfffeffff
 8001168:	fffbffff 	.word	0xfffbffff
 800116c:	ffff80ff 	.word	0xffff80ff
 8001170:	ffffc7ff 	.word	0xffffc7ff
 8001174:	00f42400 	.word	0x00f42400
 8001178:	20000000 	.word	0x20000000
 800117c:	20000004 	.word	0x20000004
 8001180:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001184:	4bac      	ldr	r3, [pc, #688]	@ (8001438 <HAL_RCC_OscConfig+0x604>)
 8001186:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001188:	2380      	movs	r3, #128	@ 0x80
 800118a:	055b      	lsls	r3, r3, #21
 800118c:	4013      	ands	r3, r2
 800118e:	d101      	bne.n	8001194 <HAL_RCC_OscConfig+0x360>
 8001190:	2301      	movs	r3, #1
 8001192:	e000      	b.n	8001196 <HAL_RCC_OscConfig+0x362>
 8001194:	2300      	movs	r3, #0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d011      	beq.n	80011be <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800119a:	4ba7      	ldr	r3, [pc, #668]	@ (8001438 <HAL_RCC_OscConfig+0x604>)
 800119c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800119e:	4ba6      	ldr	r3, [pc, #664]	@ (8001438 <HAL_RCC_OscConfig+0x604>)
 80011a0:	2180      	movs	r1, #128	@ 0x80
 80011a2:	0549      	lsls	r1, r1, #21
 80011a4:	430a      	orrs	r2, r1
 80011a6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80011a8:	4ba3      	ldr	r3, [pc, #652]	@ (8001438 <HAL_RCC_OscConfig+0x604>)
 80011aa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80011ac:	2380      	movs	r3, #128	@ 0x80
 80011ae:	055b      	lsls	r3, r3, #21
 80011b0:	4013      	ands	r3, r2
 80011b2:	60fb      	str	r3, [r7, #12]
 80011b4:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80011b6:	231f      	movs	r3, #31
 80011b8:	18fb      	adds	r3, r7, r3
 80011ba:	2201      	movs	r2, #1
 80011bc:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80011be:	4b9f      	ldr	r3, [pc, #636]	@ (800143c <HAL_RCC_OscConfig+0x608>)
 80011c0:	681a      	ldr	r2, [r3, #0]
 80011c2:	2380      	movs	r3, #128	@ 0x80
 80011c4:	005b      	lsls	r3, r3, #1
 80011c6:	4013      	ands	r3, r2
 80011c8:	d11a      	bne.n	8001200 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80011ca:	4b9c      	ldr	r3, [pc, #624]	@ (800143c <HAL_RCC_OscConfig+0x608>)
 80011cc:	681a      	ldr	r2, [r3, #0]
 80011ce:	4b9b      	ldr	r3, [pc, #620]	@ (800143c <HAL_RCC_OscConfig+0x608>)
 80011d0:	2180      	movs	r1, #128	@ 0x80
 80011d2:	0049      	lsls	r1, r1, #1
 80011d4:	430a      	orrs	r2, r1
 80011d6:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80011d8:	f7ff fa6c 	bl	80006b4 <HAL_GetTick>
 80011dc:	0003      	movs	r3, r0
 80011de:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80011e0:	e008      	b.n	80011f4 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011e2:	f7ff fa67 	bl	80006b4 <HAL_GetTick>
 80011e6:	0002      	movs	r2, r0
 80011e8:	693b      	ldr	r3, [r7, #16]
 80011ea:	1ad3      	subs	r3, r2, r3
 80011ec:	2b02      	cmp	r3, #2
 80011ee:	d901      	bls.n	80011f4 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80011f0:	2303      	movs	r3, #3
 80011f2:	e11c      	b.n	800142e <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80011f4:	4b91      	ldr	r3, [pc, #580]	@ (800143c <HAL_RCC_OscConfig+0x608>)
 80011f6:	681a      	ldr	r2, [r3, #0]
 80011f8:	2380      	movs	r3, #128	@ 0x80
 80011fa:	005b      	lsls	r3, r3, #1
 80011fc:	4013      	ands	r3, r2
 80011fe:	d0f0      	beq.n	80011e2 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	689b      	ldr	r3, [r3, #8]
 8001204:	2b01      	cmp	r3, #1
 8001206:	d106      	bne.n	8001216 <HAL_RCC_OscConfig+0x3e2>
 8001208:	4b8b      	ldr	r3, [pc, #556]	@ (8001438 <HAL_RCC_OscConfig+0x604>)
 800120a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800120c:	4b8a      	ldr	r3, [pc, #552]	@ (8001438 <HAL_RCC_OscConfig+0x604>)
 800120e:	2101      	movs	r1, #1
 8001210:	430a      	orrs	r2, r1
 8001212:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001214:	e01c      	b.n	8001250 <HAL_RCC_OscConfig+0x41c>
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	689b      	ldr	r3, [r3, #8]
 800121a:	2b05      	cmp	r3, #5
 800121c:	d10c      	bne.n	8001238 <HAL_RCC_OscConfig+0x404>
 800121e:	4b86      	ldr	r3, [pc, #536]	@ (8001438 <HAL_RCC_OscConfig+0x604>)
 8001220:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001222:	4b85      	ldr	r3, [pc, #532]	@ (8001438 <HAL_RCC_OscConfig+0x604>)
 8001224:	2104      	movs	r1, #4
 8001226:	430a      	orrs	r2, r1
 8001228:	65da      	str	r2, [r3, #92]	@ 0x5c
 800122a:	4b83      	ldr	r3, [pc, #524]	@ (8001438 <HAL_RCC_OscConfig+0x604>)
 800122c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800122e:	4b82      	ldr	r3, [pc, #520]	@ (8001438 <HAL_RCC_OscConfig+0x604>)
 8001230:	2101      	movs	r1, #1
 8001232:	430a      	orrs	r2, r1
 8001234:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001236:	e00b      	b.n	8001250 <HAL_RCC_OscConfig+0x41c>
 8001238:	4b7f      	ldr	r3, [pc, #508]	@ (8001438 <HAL_RCC_OscConfig+0x604>)
 800123a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800123c:	4b7e      	ldr	r3, [pc, #504]	@ (8001438 <HAL_RCC_OscConfig+0x604>)
 800123e:	2101      	movs	r1, #1
 8001240:	438a      	bics	r2, r1
 8001242:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001244:	4b7c      	ldr	r3, [pc, #496]	@ (8001438 <HAL_RCC_OscConfig+0x604>)
 8001246:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001248:	4b7b      	ldr	r3, [pc, #492]	@ (8001438 <HAL_RCC_OscConfig+0x604>)
 800124a:	2104      	movs	r1, #4
 800124c:	438a      	bics	r2, r1
 800124e:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	689b      	ldr	r3, [r3, #8]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d014      	beq.n	8001282 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001258:	f7ff fa2c 	bl	80006b4 <HAL_GetTick>
 800125c:	0003      	movs	r3, r0
 800125e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001260:	e009      	b.n	8001276 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001262:	f7ff fa27 	bl	80006b4 <HAL_GetTick>
 8001266:	0002      	movs	r2, r0
 8001268:	693b      	ldr	r3, [r7, #16]
 800126a:	1ad3      	subs	r3, r2, r3
 800126c:	4a74      	ldr	r2, [pc, #464]	@ (8001440 <HAL_RCC_OscConfig+0x60c>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d901      	bls.n	8001276 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8001272:	2303      	movs	r3, #3
 8001274:	e0db      	b.n	800142e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001276:	4b70      	ldr	r3, [pc, #448]	@ (8001438 <HAL_RCC_OscConfig+0x604>)
 8001278:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800127a:	2202      	movs	r2, #2
 800127c:	4013      	ands	r3, r2
 800127e:	d0f0      	beq.n	8001262 <HAL_RCC_OscConfig+0x42e>
 8001280:	e013      	b.n	80012aa <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001282:	f7ff fa17 	bl	80006b4 <HAL_GetTick>
 8001286:	0003      	movs	r3, r0
 8001288:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800128a:	e009      	b.n	80012a0 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800128c:	f7ff fa12 	bl	80006b4 <HAL_GetTick>
 8001290:	0002      	movs	r2, r0
 8001292:	693b      	ldr	r3, [r7, #16]
 8001294:	1ad3      	subs	r3, r2, r3
 8001296:	4a6a      	ldr	r2, [pc, #424]	@ (8001440 <HAL_RCC_OscConfig+0x60c>)
 8001298:	4293      	cmp	r3, r2
 800129a:	d901      	bls.n	80012a0 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 800129c:	2303      	movs	r3, #3
 800129e:	e0c6      	b.n	800142e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80012a0:	4b65      	ldr	r3, [pc, #404]	@ (8001438 <HAL_RCC_OscConfig+0x604>)
 80012a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80012a4:	2202      	movs	r2, #2
 80012a6:	4013      	ands	r3, r2
 80012a8:	d1f0      	bne.n	800128c <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80012aa:	231f      	movs	r3, #31
 80012ac:	18fb      	adds	r3, r7, r3
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	2b01      	cmp	r3, #1
 80012b2:	d105      	bne.n	80012c0 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80012b4:	4b60      	ldr	r3, [pc, #384]	@ (8001438 <HAL_RCC_OscConfig+0x604>)
 80012b6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80012b8:	4b5f      	ldr	r3, [pc, #380]	@ (8001438 <HAL_RCC_OscConfig+0x604>)
 80012ba:	4962      	ldr	r1, [pc, #392]	@ (8001444 <HAL_RCC_OscConfig+0x610>)
 80012bc:	400a      	ands	r2, r1
 80012be:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	69db      	ldr	r3, [r3, #28]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d100      	bne.n	80012ca <HAL_RCC_OscConfig+0x496>
 80012c8:	e0b0      	b.n	800142c <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80012ca:	4b5b      	ldr	r3, [pc, #364]	@ (8001438 <HAL_RCC_OscConfig+0x604>)
 80012cc:	689b      	ldr	r3, [r3, #8]
 80012ce:	2238      	movs	r2, #56	@ 0x38
 80012d0:	4013      	ands	r3, r2
 80012d2:	2b10      	cmp	r3, #16
 80012d4:	d100      	bne.n	80012d8 <HAL_RCC_OscConfig+0x4a4>
 80012d6:	e078      	b.n	80013ca <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	69db      	ldr	r3, [r3, #28]
 80012dc:	2b02      	cmp	r3, #2
 80012de:	d153      	bne.n	8001388 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012e0:	4b55      	ldr	r3, [pc, #340]	@ (8001438 <HAL_RCC_OscConfig+0x604>)
 80012e2:	681a      	ldr	r2, [r3, #0]
 80012e4:	4b54      	ldr	r3, [pc, #336]	@ (8001438 <HAL_RCC_OscConfig+0x604>)
 80012e6:	4958      	ldr	r1, [pc, #352]	@ (8001448 <HAL_RCC_OscConfig+0x614>)
 80012e8:	400a      	ands	r2, r1
 80012ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012ec:	f7ff f9e2 	bl	80006b4 <HAL_GetTick>
 80012f0:	0003      	movs	r3, r0
 80012f2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80012f4:	e008      	b.n	8001308 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012f6:	f7ff f9dd 	bl	80006b4 <HAL_GetTick>
 80012fa:	0002      	movs	r2, r0
 80012fc:	693b      	ldr	r3, [r7, #16]
 80012fe:	1ad3      	subs	r3, r2, r3
 8001300:	2b02      	cmp	r3, #2
 8001302:	d901      	bls.n	8001308 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001304:	2303      	movs	r3, #3
 8001306:	e092      	b.n	800142e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001308:	4b4b      	ldr	r3, [pc, #300]	@ (8001438 <HAL_RCC_OscConfig+0x604>)
 800130a:	681a      	ldr	r2, [r3, #0]
 800130c:	2380      	movs	r3, #128	@ 0x80
 800130e:	049b      	lsls	r3, r3, #18
 8001310:	4013      	ands	r3, r2
 8001312:	d1f0      	bne.n	80012f6 <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001314:	4b48      	ldr	r3, [pc, #288]	@ (8001438 <HAL_RCC_OscConfig+0x604>)
 8001316:	68db      	ldr	r3, [r3, #12]
 8001318:	4a4c      	ldr	r2, [pc, #304]	@ (800144c <HAL_RCC_OscConfig+0x618>)
 800131a:	4013      	ands	r3, r2
 800131c:	0019      	movs	r1, r3
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6a1a      	ldr	r2, [r3, #32]
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001326:	431a      	orrs	r2, r3
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800132c:	021b      	lsls	r3, r3, #8
 800132e:	431a      	orrs	r2, r3
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001334:	431a      	orrs	r2, r3
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800133a:	431a      	orrs	r2, r3
 800133c:	4b3e      	ldr	r3, [pc, #248]	@ (8001438 <HAL_RCC_OscConfig+0x604>)
 800133e:	430a      	orrs	r2, r1
 8001340:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001342:	4b3d      	ldr	r3, [pc, #244]	@ (8001438 <HAL_RCC_OscConfig+0x604>)
 8001344:	681a      	ldr	r2, [r3, #0]
 8001346:	4b3c      	ldr	r3, [pc, #240]	@ (8001438 <HAL_RCC_OscConfig+0x604>)
 8001348:	2180      	movs	r1, #128	@ 0x80
 800134a:	0449      	lsls	r1, r1, #17
 800134c:	430a      	orrs	r2, r1
 800134e:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001350:	4b39      	ldr	r3, [pc, #228]	@ (8001438 <HAL_RCC_OscConfig+0x604>)
 8001352:	68da      	ldr	r2, [r3, #12]
 8001354:	4b38      	ldr	r3, [pc, #224]	@ (8001438 <HAL_RCC_OscConfig+0x604>)
 8001356:	2180      	movs	r1, #128	@ 0x80
 8001358:	0549      	lsls	r1, r1, #21
 800135a:	430a      	orrs	r2, r1
 800135c:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800135e:	f7ff f9a9 	bl	80006b4 <HAL_GetTick>
 8001362:	0003      	movs	r3, r0
 8001364:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001366:	e008      	b.n	800137a <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001368:	f7ff f9a4 	bl	80006b4 <HAL_GetTick>
 800136c:	0002      	movs	r2, r0
 800136e:	693b      	ldr	r3, [r7, #16]
 8001370:	1ad3      	subs	r3, r2, r3
 8001372:	2b02      	cmp	r3, #2
 8001374:	d901      	bls.n	800137a <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8001376:	2303      	movs	r3, #3
 8001378:	e059      	b.n	800142e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800137a:	4b2f      	ldr	r3, [pc, #188]	@ (8001438 <HAL_RCC_OscConfig+0x604>)
 800137c:	681a      	ldr	r2, [r3, #0]
 800137e:	2380      	movs	r3, #128	@ 0x80
 8001380:	049b      	lsls	r3, r3, #18
 8001382:	4013      	ands	r3, r2
 8001384:	d0f0      	beq.n	8001368 <HAL_RCC_OscConfig+0x534>
 8001386:	e051      	b.n	800142c <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001388:	4b2b      	ldr	r3, [pc, #172]	@ (8001438 <HAL_RCC_OscConfig+0x604>)
 800138a:	681a      	ldr	r2, [r3, #0]
 800138c:	4b2a      	ldr	r3, [pc, #168]	@ (8001438 <HAL_RCC_OscConfig+0x604>)
 800138e:	492e      	ldr	r1, [pc, #184]	@ (8001448 <HAL_RCC_OscConfig+0x614>)
 8001390:	400a      	ands	r2, r1
 8001392:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001394:	f7ff f98e 	bl	80006b4 <HAL_GetTick>
 8001398:	0003      	movs	r3, r0
 800139a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800139c:	e008      	b.n	80013b0 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800139e:	f7ff f989 	bl	80006b4 <HAL_GetTick>
 80013a2:	0002      	movs	r2, r0
 80013a4:	693b      	ldr	r3, [r7, #16]
 80013a6:	1ad3      	subs	r3, r2, r3
 80013a8:	2b02      	cmp	r3, #2
 80013aa:	d901      	bls.n	80013b0 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 80013ac:	2303      	movs	r3, #3
 80013ae:	e03e      	b.n	800142e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80013b0:	4b21      	ldr	r3, [pc, #132]	@ (8001438 <HAL_RCC_OscConfig+0x604>)
 80013b2:	681a      	ldr	r2, [r3, #0]
 80013b4:	2380      	movs	r3, #128	@ 0x80
 80013b6:	049b      	lsls	r3, r3, #18
 80013b8:	4013      	ands	r3, r2
 80013ba:	d1f0      	bne.n	800139e <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 80013bc:	4b1e      	ldr	r3, [pc, #120]	@ (8001438 <HAL_RCC_OscConfig+0x604>)
 80013be:	68da      	ldr	r2, [r3, #12]
 80013c0:	4b1d      	ldr	r3, [pc, #116]	@ (8001438 <HAL_RCC_OscConfig+0x604>)
 80013c2:	4923      	ldr	r1, [pc, #140]	@ (8001450 <HAL_RCC_OscConfig+0x61c>)
 80013c4:	400a      	ands	r2, r1
 80013c6:	60da      	str	r2, [r3, #12]
 80013c8:	e030      	b.n	800142c <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	69db      	ldr	r3, [r3, #28]
 80013ce:	2b01      	cmp	r3, #1
 80013d0:	d101      	bne.n	80013d6 <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 80013d2:	2301      	movs	r3, #1
 80013d4:	e02b      	b.n	800142e <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80013d6:	4b18      	ldr	r3, [pc, #96]	@ (8001438 <HAL_RCC_OscConfig+0x604>)
 80013d8:	68db      	ldr	r3, [r3, #12]
 80013da:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	2203      	movs	r2, #3
 80013e0:	401a      	ands	r2, r3
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6a1b      	ldr	r3, [r3, #32]
 80013e6:	429a      	cmp	r2, r3
 80013e8:	d11e      	bne.n	8001428 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80013ea:	697b      	ldr	r3, [r7, #20]
 80013ec:	2270      	movs	r2, #112	@ 0x70
 80013ee:	401a      	ands	r2, r3
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013f4:	429a      	cmp	r2, r3
 80013f6:	d117      	bne.n	8001428 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80013f8:	697a      	ldr	r2, [r7, #20]
 80013fa:	23fe      	movs	r3, #254	@ 0xfe
 80013fc:	01db      	lsls	r3, r3, #7
 80013fe:	401a      	ands	r2, r3
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001404:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001406:	429a      	cmp	r2, r3
 8001408:	d10e      	bne.n	8001428 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800140a:	697a      	ldr	r2, [r7, #20]
 800140c:	23f8      	movs	r3, #248	@ 0xf8
 800140e:	039b      	lsls	r3, r3, #14
 8001410:	401a      	ands	r2, r3
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001416:	429a      	cmp	r2, r3
 8001418:	d106      	bne.n	8001428 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800141a:	697b      	ldr	r3, [r7, #20]
 800141c:	0f5b      	lsrs	r3, r3, #29
 800141e:	075a      	lsls	r2, r3, #29
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001424:	429a      	cmp	r2, r3
 8001426:	d001      	beq.n	800142c <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8001428:	2301      	movs	r3, #1
 800142a:	e000      	b.n	800142e <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 800142c:	2300      	movs	r3, #0
}
 800142e:	0018      	movs	r0, r3
 8001430:	46bd      	mov	sp, r7
 8001432:	b008      	add	sp, #32
 8001434:	bd80      	pop	{r7, pc}
 8001436:	46c0      	nop			@ (mov r8, r8)
 8001438:	40021000 	.word	0x40021000
 800143c:	40007000 	.word	0x40007000
 8001440:	00001388 	.word	0x00001388
 8001444:	efffffff 	.word	0xefffffff
 8001448:	feffffff 	.word	0xfeffffff
 800144c:	1fc1808c 	.word	0x1fc1808c
 8001450:	effefffc 	.word	0xeffefffc

08001454 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b084      	sub	sp, #16
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
 800145c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d101      	bne.n	8001468 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001464:	2301      	movs	r3, #1
 8001466:	e0e9      	b.n	800163c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001468:	4b76      	ldr	r3, [pc, #472]	@ (8001644 <HAL_RCC_ClockConfig+0x1f0>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	2207      	movs	r2, #7
 800146e:	4013      	ands	r3, r2
 8001470:	683a      	ldr	r2, [r7, #0]
 8001472:	429a      	cmp	r2, r3
 8001474:	d91e      	bls.n	80014b4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001476:	4b73      	ldr	r3, [pc, #460]	@ (8001644 <HAL_RCC_ClockConfig+0x1f0>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	2207      	movs	r2, #7
 800147c:	4393      	bics	r3, r2
 800147e:	0019      	movs	r1, r3
 8001480:	4b70      	ldr	r3, [pc, #448]	@ (8001644 <HAL_RCC_ClockConfig+0x1f0>)
 8001482:	683a      	ldr	r2, [r7, #0]
 8001484:	430a      	orrs	r2, r1
 8001486:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001488:	f7ff f914 	bl	80006b4 <HAL_GetTick>
 800148c:	0003      	movs	r3, r0
 800148e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001490:	e009      	b.n	80014a6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001492:	f7ff f90f 	bl	80006b4 <HAL_GetTick>
 8001496:	0002      	movs	r2, r0
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	1ad3      	subs	r3, r2, r3
 800149c:	4a6a      	ldr	r2, [pc, #424]	@ (8001648 <HAL_RCC_ClockConfig+0x1f4>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d901      	bls.n	80014a6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80014a2:	2303      	movs	r3, #3
 80014a4:	e0ca      	b.n	800163c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80014a6:	4b67      	ldr	r3, [pc, #412]	@ (8001644 <HAL_RCC_ClockConfig+0x1f0>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	2207      	movs	r2, #7
 80014ac:	4013      	ands	r3, r2
 80014ae:	683a      	ldr	r2, [r7, #0]
 80014b0:	429a      	cmp	r2, r3
 80014b2:	d1ee      	bne.n	8001492 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	2202      	movs	r2, #2
 80014ba:	4013      	ands	r3, r2
 80014bc:	d015      	beq.n	80014ea <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	2204      	movs	r2, #4
 80014c4:	4013      	ands	r3, r2
 80014c6:	d006      	beq.n	80014d6 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80014c8:	4b60      	ldr	r3, [pc, #384]	@ (800164c <HAL_RCC_ClockConfig+0x1f8>)
 80014ca:	689a      	ldr	r2, [r3, #8]
 80014cc:	4b5f      	ldr	r3, [pc, #380]	@ (800164c <HAL_RCC_ClockConfig+0x1f8>)
 80014ce:	21e0      	movs	r1, #224	@ 0xe0
 80014d0:	01c9      	lsls	r1, r1, #7
 80014d2:	430a      	orrs	r2, r1
 80014d4:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014d6:	4b5d      	ldr	r3, [pc, #372]	@ (800164c <HAL_RCC_ClockConfig+0x1f8>)
 80014d8:	689b      	ldr	r3, [r3, #8]
 80014da:	4a5d      	ldr	r2, [pc, #372]	@ (8001650 <HAL_RCC_ClockConfig+0x1fc>)
 80014dc:	4013      	ands	r3, r2
 80014de:	0019      	movs	r1, r3
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	689a      	ldr	r2, [r3, #8]
 80014e4:	4b59      	ldr	r3, [pc, #356]	@ (800164c <HAL_RCC_ClockConfig+0x1f8>)
 80014e6:	430a      	orrs	r2, r1
 80014e8:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	2201      	movs	r2, #1
 80014f0:	4013      	ands	r3, r2
 80014f2:	d057      	beq.n	80015a4 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	2b01      	cmp	r3, #1
 80014fa:	d107      	bne.n	800150c <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014fc:	4b53      	ldr	r3, [pc, #332]	@ (800164c <HAL_RCC_ClockConfig+0x1f8>)
 80014fe:	681a      	ldr	r2, [r3, #0]
 8001500:	2380      	movs	r3, #128	@ 0x80
 8001502:	029b      	lsls	r3, r3, #10
 8001504:	4013      	ands	r3, r2
 8001506:	d12b      	bne.n	8001560 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001508:	2301      	movs	r3, #1
 800150a:	e097      	b.n	800163c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	2b02      	cmp	r3, #2
 8001512:	d107      	bne.n	8001524 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001514:	4b4d      	ldr	r3, [pc, #308]	@ (800164c <HAL_RCC_ClockConfig+0x1f8>)
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	2380      	movs	r3, #128	@ 0x80
 800151a:	049b      	lsls	r3, r3, #18
 800151c:	4013      	ands	r3, r2
 800151e:	d11f      	bne.n	8001560 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001520:	2301      	movs	r3, #1
 8001522:	e08b      	b.n	800163c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d107      	bne.n	800153c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800152c:	4b47      	ldr	r3, [pc, #284]	@ (800164c <HAL_RCC_ClockConfig+0x1f8>)
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	2380      	movs	r3, #128	@ 0x80
 8001532:	00db      	lsls	r3, r3, #3
 8001534:	4013      	ands	r3, r2
 8001536:	d113      	bne.n	8001560 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001538:	2301      	movs	r3, #1
 800153a:	e07f      	b.n	800163c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	2b03      	cmp	r3, #3
 8001542:	d106      	bne.n	8001552 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001544:	4b41      	ldr	r3, [pc, #260]	@ (800164c <HAL_RCC_ClockConfig+0x1f8>)
 8001546:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001548:	2202      	movs	r2, #2
 800154a:	4013      	ands	r3, r2
 800154c:	d108      	bne.n	8001560 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800154e:	2301      	movs	r3, #1
 8001550:	e074      	b.n	800163c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001552:	4b3e      	ldr	r3, [pc, #248]	@ (800164c <HAL_RCC_ClockConfig+0x1f8>)
 8001554:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001556:	2202      	movs	r2, #2
 8001558:	4013      	ands	r3, r2
 800155a:	d101      	bne.n	8001560 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800155c:	2301      	movs	r3, #1
 800155e:	e06d      	b.n	800163c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001560:	4b3a      	ldr	r3, [pc, #232]	@ (800164c <HAL_RCC_ClockConfig+0x1f8>)
 8001562:	689b      	ldr	r3, [r3, #8]
 8001564:	2207      	movs	r2, #7
 8001566:	4393      	bics	r3, r2
 8001568:	0019      	movs	r1, r3
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	685a      	ldr	r2, [r3, #4]
 800156e:	4b37      	ldr	r3, [pc, #220]	@ (800164c <HAL_RCC_ClockConfig+0x1f8>)
 8001570:	430a      	orrs	r2, r1
 8001572:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001574:	f7ff f89e 	bl	80006b4 <HAL_GetTick>
 8001578:	0003      	movs	r3, r0
 800157a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800157c:	e009      	b.n	8001592 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800157e:	f7ff f899 	bl	80006b4 <HAL_GetTick>
 8001582:	0002      	movs	r2, r0
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	1ad3      	subs	r3, r2, r3
 8001588:	4a2f      	ldr	r2, [pc, #188]	@ (8001648 <HAL_RCC_ClockConfig+0x1f4>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d901      	bls.n	8001592 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800158e:	2303      	movs	r3, #3
 8001590:	e054      	b.n	800163c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001592:	4b2e      	ldr	r3, [pc, #184]	@ (800164c <HAL_RCC_ClockConfig+0x1f8>)
 8001594:	689b      	ldr	r3, [r3, #8]
 8001596:	2238      	movs	r2, #56	@ 0x38
 8001598:	401a      	ands	r2, r3
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	00db      	lsls	r3, r3, #3
 80015a0:	429a      	cmp	r2, r3
 80015a2:	d1ec      	bne.n	800157e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80015a4:	4b27      	ldr	r3, [pc, #156]	@ (8001644 <HAL_RCC_ClockConfig+0x1f0>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	2207      	movs	r2, #7
 80015aa:	4013      	ands	r3, r2
 80015ac:	683a      	ldr	r2, [r7, #0]
 80015ae:	429a      	cmp	r2, r3
 80015b0:	d21e      	bcs.n	80015f0 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015b2:	4b24      	ldr	r3, [pc, #144]	@ (8001644 <HAL_RCC_ClockConfig+0x1f0>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	2207      	movs	r2, #7
 80015b8:	4393      	bics	r3, r2
 80015ba:	0019      	movs	r1, r3
 80015bc:	4b21      	ldr	r3, [pc, #132]	@ (8001644 <HAL_RCC_ClockConfig+0x1f0>)
 80015be:	683a      	ldr	r2, [r7, #0]
 80015c0:	430a      	orrs	r2, r1
 80015c2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80015c4:	f7ff f876 	bl	80006b4 <HAL_GetTick>
 80015c8:	0003      	movs	r3, r0
 80015ca:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80015cc:	e009      	b.n	80015e2 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015ce:	f7ff f871 	bl	80006b4 <HAL_GetTick>
 80015d2:	0002      	movs	r2, r0
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	1ad3      	subs	r3, r2, r3
 80015d8:	4a1b      	ldr	r2, [pc, #108]	@ (8001648 <HAL_RCC_ClockConfig+0x1f4>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d901      	bls.n	80015e2 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80015de:	2303      	movs	r3, #3
 80015e0:	e02c      	b.n	800163c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80015e2:	4b18      	ldr	r3, [pc, #96]	@ (8001644 <HAL_RCC_ClockConfig+0x1f0>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	2207      	movs	r2, #7
 80015e8:	4013      	ands	r3, r2
 80015ea:	683a      	ldr	r2, [r7, #0]
 80015ec:	429a      	cmp	r2, r3
 80015ee:	d1ee      	bne.n	80015ce <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	2204      	movs	r2, #4
 80015f6:	4013      	ands	r3, r2
 80015f8:	d009      	beq.n	800160e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80015fa:	4b14      	ldr	r3, [pc, #80]	@ (800164c <HAL_RCC_ClockConfig+0x1f8>)
 80015fc:	689b      	ldr	r3, [r3, #8]
 80015fe:	4a15      	ldr	r2, [pc, #84]	@ (8001654 <HAL_RCC_ClockConfig+0x200>)
 8001600:	4013      	ands	r3, r2
 8001602:	0019      	movs	r1, r3
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	68da      	ldr	r2, [r3, #12]
 8001608:	4b10      	ldr	r3, [pc, #64]	@ (800164c <HAL_RCC_ClockConfig+0x1f8>)
 800160a:	430a      	orrs	r2, r1
 800160c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800160e:	f000 f829 	bl	8001664 <HAL_RCC_GetSysClockFreq>
 8001612:	0001      	movs	r1, r0
 8001614:	4b0d      	ldr	r3, [pc, #52]	@ (800164c <HAL_RCC_ClockConfig+0x1f8>)
 8001616:	689b      	ldr	r3, [r3, #8]
 8001618:	0a1b      	lsrs	r3, r3, #8
 800161a:	220f      	movs	r2, #15
 800161c:	401a      	ands	r2, r3
 800161e:	4b0e      	ldr	r3, [pc, #56]	@ (8001658 <HAL_RCC_ClockConfig+0x204>)
 8001620:	0092      	lsls	r2, r2, #2
 8001622:	58d3      	ldr	r3, [r2, r3]
 8001624:	221f      	movs	r2, #31
 8001626:	4013      	ands	r3, r2
 8001628:	000a      	movs	r2, r1
 800162a:	40da      	lsrs	r2, r3
 800162c:	4b0b      	ldr	r3, [pc, #44]	@ (800165c <HAL_RCC_ClockConfig+0x208>)
 800162e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001630:	4b0b      	ldr	r3, [pc, #44]	@ (8001660 <HAL_RCC_ClockConfig+0x20c>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	0018      	movs	r0, r3
 8001636:	f7fe ffe1 	bl	80005fc <HAL_InitTick>
 800163a:	0003      	movs	r3, r0
}
 800163c:	0018      	movs	r0, r3
 800163e:	46bd      	mov	sp, r7
 8001640:	b004      	add	sp, #16
 8001642:	bd80      	pop	{r7, pc}
 8001644:	40022000 	.word	0x40022000
 8001648:	00001388 	.word	0x00001388
 800164c:	40021000 	.word	0x40021000
 8001650:	fffff0ff 	.word	0xfffff0ff
 8001654:	ffff8fff 	.word	0xffff8fff
 8001658:	080028ac 	.word	0x080028ac
 800165c:	20000000 	.word	0x20000000
 8001660:	20000004 	.word	0x20000004

08001664 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b086      	sub	sp, #24
 8001668:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800166a:	4b3c      	ldr	r3, [pc, #240]	@ (800175c <HAL_RCC_GetSysClockFreq+0xf8>)
 800166c:	689b      	ldr	r3, [r3, #8]
 800166e:	2238      	movs	r2, #56	@ 0x38
 8001670:	4013      	ands	r3, r2
 8001672:	d10f      	bne.n	8001694 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001674:	4b39      	ldr	r3, [pc, #228]	@ (800175c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	0adb      	lsrs	r3, r3, #11
 800167a:	2207      	movs	r2, #7
 800167c:	4013      	ands	r3, r2
 800167e:	2201      	movs	r2, #1
 8001680:	409a      	lsls	r2, r3
 8001682:	0013      	movs	r3, r2
 8001684:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001686:	6839      	ldr	r1, [r7, #0]
 8001688:	4835      	ldr	r0, [pc, #212]	@ (8001760 <HAL_RCC_GetSysClockFreq+0xfc>)
 800168a:	f7fe fd41 	bl	8000110 <__udivsi3>
 800168e:	0003      	movs	r3, r0
 8001690:	613b      	str	r3, [r7, #16]
 8001692:	e05d      	b.n	8001750 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001694:	4b31      	ldr	r3, [pc, #196]	@ (800175c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001696:	689b      	ldr	r3, [r3, #8]
 8001698:	2238      	movs	r2, #56	@ 0x38
 800169a:	4013      	ands	r3, r2
 800169c:	2b08      	cmp	r3, #8
 800169e:	d102      	bne.n	80016a6 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80016a0:	4b30      	ldr	r3, [pc, #192]	@ (8001764 <HAL_RCC_GetSysClockFreq+0x100>)
 80016a2:	613b      	str	r3, [r7, #16]
 80016a4:	e054      	b.n	8001750 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016a6:	4b2d      	ldr	r3, [pc, #180]	@ (800175c <HAL_RCC_GetSysClockFreq+0xf8>)
 80016a8:	689b      	ldr	r3, [r3, #8]
 80016aa:	2238      	movs	r2, #56	@ 0x38
 80016ac:	4013      	ands	r3, r2
 80016ae:	2b10      	cmp	r3, #16
 80016b0:	d138      	bne.n	8001724 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80016b2:	4b2a      	ldr	r3, [pc, #168]	@ (800175c <HAL_RCC_GetSysClockFreq+0xf8>)
 80016b4:	68db      	ldr	r3, [r3, #12]
 80016b6:	2203      	movs	r2, #3
 80016b8:	4013      	ands	r3, r2
 80016ba:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80016bc:	4b27      	ldr	r3, [pc, #156]	@ (800175c <HAL_RCC_GetSysClockFreq+0xf8>)
 80016be:	68db      	ldr	r3, [r3, #12]
 80016c0:	091b      	lsrs	r3, r3, #4
 80016c2:	2207      	movs	r2, #7
 80016c4:	4013      	ands	r3, r2
 80016c6:	3301      	adds	r3, #1
 80016c8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	2b03      	cmp	r3, #3
 80016ce:	d10d      	bne.n	80016ec <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80016d0:	68b9      	ldr	r1, [r7, #8]
 80016d2:	4824      	ldr	r0, [pc, #144]	@ (8001764 <HAL_RCC_GetSysClockFreq+0x100>)
 80016d4:	f7fe fd1c 	bl	8000110 <__udivsi3>
 80016d8:	0003      	movs	r3, r0
 80016da:	0019      	movs	r1, r3
 80016dc:	4b1f      	ldr	r3, [pc, #124]	@ (800175c <HAL_RCC_GetSysClockFreq+0xf8>)
 80016de:	68db      	ldr	r3, [r3, #12]
 80016e0:	0a1b      	lsrs	r3, r3, #8
 80016e2:	227f      	movs	r2, #127	@ 0x7f
 80016e4:	4013      	ands	r3, r2
 80016e6:	434b      	muls	r3, r1
 80016e8:	617b      	str	r3, [r7, #20]
        break;
 80016ea:	e00d      	b.n	8001708 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80016ec:	68b9      	ldr	r1, [r7, #8]
 80016ee:	481c      	ldr	r0, [pc, #112]	@ (8001760 <HAL_RCC_GetSysClockFreq+0xfc>)
 80016f0:	f7fe fd0e 	bl	8000110 <__udivsi3>
 80016f4:	0003      	movs	r3, r0
 80016f6:	0019      	movs	r1, r3
 80016f8:	4b18      	ldr	r3, [pc, #96]	@ (800175c <HAL_RCC_GetSysClockFreq+0xf8>)
 80016fa:	68db      	ldr	r3, [r3, #12]
 80016fc:	0a1b      	lsrs	r3, r3, #8
 80016fe:	227f      	movs	r2, #127	@ 0x7f
 8001700:	4013      	ands	r3, r2
 8001702:	434b      	muls	r3, r1
 8001704:	617b      	str	r3, [r7, #20]
        break;
 8001706:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001708:	4b14      	ldr	r3, [pc, #80]	@ (800175c <HAL_RCC_GetSysClockFreq+0xf8>)
 800170a:	68db      	ldr	r3, [r3, #12]
 800170c:	0f5b      	lsrs	r3, r3, #29
 800170e:	2207      	movs	r2, #7
 8001710:	4013      	ands	r3, r2
 8001712:	3301      	adds	r3, #1
 8001714:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001716:	6879      	ldr	r1, [r7, #4]
 8001718:	6978      	ldr	r0, [r7, #20]
 800171a:	f7fe fcf9 	bl	8000110 <__udivsi3>
 800171e:	0003      	movs	r3, r0
 8001720:	613b      	str	r3, [r7, #16]
 8001722:	e015      	b.n	8001750 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001724:	4b0d      	ldr	r3, [pc, #52]	@ (800175c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001726:	689b      	ldr	r3, [r3, #8]
 8001728:	2238      	movs	r2, #56	@ 0x38
 800172a:	4013      	ands	r3, r2
 800172c:	2b20      	cmp	r3, #32
 800172e:	d103      	bne.n	8001738 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001730:	2380      	movs	r3, #128	@ 0x80
 8001732:	021b      	lsls	r3, r3, #8
 8001734:	613b      	str	r3, [r7, #16]
 8001736:	e00b      	b.n	8001750 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001738:	4b08      	ldr	r3, [pc, #32]	@ (800175c <HAL_RCC_GetSysClockFreq+0xf8>)
 800173a:	689b      	ldr	r3, [r3, #8]
 800173c:	2238      	movs	r2, #56	@ 0x38
 800173e:	4013      	ands	r3, r2
 8001740:	2b18      	cmp	r3, #24
 8001742:	d103      	bne.n	800174c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001744:	23fa      	movs	r3, #250	@ 0xfa
 8001746:	01db      	lsls	r3, r3, #7
 8001748:	613b      	str	r3, [r7, #16]
 800174a:	e001      	b.n	8001750 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 800174c:	2300      	movs	r3, #0
 800174e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001750:	693b      	ldr	r3, [r7, #16]
}
 8001752:	0018      	movs	r0, r3
 8001754:	46bd      	mov	sp, r7
 8001756:	b006      	add	sp, #24
 8001758:	bd80      	pop	{r7, pc}
 800175a:	46c0      	nop			@ (mov r8, r8)
 800175c:	40021000 	.word	0x40021000
 8001760:	00f42400 	.word	0x00f42400
 8001764:	007a1200 	.word	0x007a1200

08001768 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800176c:	4b02      	ldr	r3, [pc, #8]	@ (8001778 <HAL_RCC_GetHCLKFreq+0x10>)
 800176e:	681b      	ldr	r3, [r3, #0]
}
 8001770:	0018      	movs	r0, r3
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
 8001776:	46c0      	nop			@ (mov r8, r8)
 8001778:	20000000 	.word	0x20000000

0800177c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800177c:	b5b0      	push	{r4, r5, r7, lr}
 800177e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8001780:	f7ff fff2 	bl	8001768 <HAL_RCC_GetHCLKFreq>
 8001784:	0004      	movs	r4, r0
 8001786:	f7ff fb49 	bl	8000e1c <LL_RCC_GetAPB1Prescaler>
 800178a:	0003      	movs	r3, r0
 800178c:	0b1a      	lsrs	r2, r3, #12
 800178e:	4b05      	ldr	r3, [pc, #20]	@ (80017a4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001790:	0092      	lsls	r2, r2, #2
 8001792:	58d3      	ldr	r3, [r2, r3]
 8001794:	221f      	movs	r2, #31
 8001796:	4013      	ands	r3, r2
 8001798:	40dc      	lsrs	r4, r3
 800179a:	0023      	movs	r3, r4
}
 800179c:	0018      	movs	r0, r3
 800179e:	46bd      	mov	sp, r7
 80017a0:	bdb0      	pop	{r4, r5, r7, pc}
 80017a2:	46c0      	nop			@ (mov r8, r8)
 80017a4:	080028ec 	.word	0x080028ec

080017a8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b082      	sub	sp, #8
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d101      	bne.n	80017ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80017b6:	2301      	movs	r3, #1
 80017b8:	e046      	b.n	8001848 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2288      	movs	r2, #136	@ 0x88
 80017be:	589b      	ldr	r3, [r3, r2]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d107      	bne.n	80017d4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2284      	movs	r2, #132	@ 0x84
 80017c8:	2100      	movs	r1, #0
 80017ca:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	0018      	movs	r0, r3
 80017d0:	f7fe fe4c 	bl	800046c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2288      	movs	r2, #136	@ 0x88
 80017d8:	2124      	movs	r1, #36	@ 0x24
 80017da:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	681a      	ldr	r2, [r3, #0]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	2101      	movs	r1, #1
 80017e8:	438a      	bics	r2, r1
 80017ea:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d003      	beq.n	80017fc <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	0018      	movs	r0, r3
 80017f8:	f000 fd7c 	bl	80022f4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	0018      	movs	r0, r3
 8001800:	f000 fc0e 	bl	8002020 <UART_SetConfig>
 8001804:	0003      	movs	r3, r0
 8001806:	2b01      	cmp	r3, #1
 8001808:	d101      	bne.n	800180e <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 800180a:	2301      	movs	r3, #1
 800180c:	e01c      	b.n	8001848 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	685a      	ldr	r2, [r3, #4]
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	490d      	ldr	r1, [pc, #52]	@ (8001850 <HAL_UART_Init+0xa8>)
 800181a:	400a      	ands	r2, r1
 800181c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	689a      	ldr	r2, [r3, #8]
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	212a      	movs	r1, #42	@ 0x2a
 800182a:	438a      	bics	r2, r1
 800182c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	681a      	ldr	r2, [r3, #0]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	2101      	movs	r1, #1
 800183a:	430a      	orrs	r2, r1
 800183c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	0018      	movs	r0, r3
 8001842:	f000 fe0b 	bl	800245c <UART_CheckIdleState>
 8001846:	0003      	movs	r3, r0
}
 8001848:	0018      	movs	r0, r3
 800184a:	46bd      	mov	sp, r7
 800184c:	b002      	add	sp, #8
 800184e:	bd80      	pop	{r7, pc}
 8001850:	ffffb7ff 	.word	0xffffb7ff

08001854 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b08a      	sub	sp, #40	@ 0x28
 8001858:	af02      	add	r7, sp, #8
 800185a:	60f8      	str	r0, [r7, #12]
 800185c:	60b9      	str	r1, [r7, #8]
 800185e:	603b      	str	r3, [r7, #0]
 8001860:	1dbb      	adds	r3, r7, #6
 8001862:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	2288      	movs	r2, #136	@ 0x88
 8001868:	589b      	ldr	r3, [r3, r2]
 800186a:	2b20      	cmp	r3, #32
 800186c:	d000      	beq.n	8001870 <HAL_UART_Transmit+0x1c>
 800186e:	e090      	b.n	8001992 <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8001870:	68bb      	ldr	r3, [r7, #8]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d003      	beq.n	800187e <HAL_UART_Transmit+0x2a>
 8001876:	1dbb      	adds	r3, r7, #6
 8001878:	881b      	ldrh	r3, [r3, #0]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d101      	bne.n	8001882 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 800187e:	2301      	movs	r3, #1
 8001880:	e088      	b.n	8001994 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	689a      	ldr	r2, [r3, #8]
 8001886:	2380      	movs	r3, #128	@ 0x80
 8001888:	015b      	lsls	r3, r3, #5
 800188a:	429a      	cmp	r2, r3
 800188c:	d109      	bne.n	80018a2 <HAL_UART_Transmit+0x4e>
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	691b      	ldr	r3, [r3, #16]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d105      	bne.n	80018a2 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001896:	68bb      	ldr	r3, [r7, #8]
 8001898:	2201      	movs	r2, #1
 800189a:	4013      	ands	r3, r2
 800189c:	d001      	beq.n	80018a2 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 800189e:	2301      	movs	r3, #1
 80018a0:	e078      	b.n	8001994 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	2290      	movs	r2, #144	@ 0x90
 80018a6:	2100      	movs	r1, #0
 80018a8:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	2288      	movs	r2, #136	@ 0x88
 80018ae:	2121      	movs	r1, #33	@ 0x21
 80018b0:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80018b2:	f7fe feff 	bl	80006b4 <HAL_GetTick>
 80018b6:	0003      	movs	r3, r0
 80018b8:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	1dba      	adds	r2, r7, #6
 80018be:	2154      	movs	r1, #84	@ 0x54
 80018c0:	8812      	ldrh	r2, [r2, #0]
 80018c2:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	1dba      	adds	r2, r7, #6
 80018c8:	2156      	movs	r1, #86	@ 0x56
 80018ca:	8812      	ldrh	r2, [r2, #0]
 80018cc:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	689a      	ldr	r2, [r3, #8]
 80018d2:	2380      	movs	r3, #128	@ 0x80
 80018d4:	015b      	lsls	r3, r3, #5
 80018d6:	429a      	cmp	r2, r3
 80018d8:	d108      	bne.n	80018ec <HAL_UART_Transmit+0x98>
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	691b      	ldr	r3, [r3, #16]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d104      	bne.n	80018ec <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 80018e2:	2300      	movs	r3, #0
 80018e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80018e6:	68bb      	ldr	r3, [r7, #8]
 80018e8:	61bb      	str	r3, [r7, #24]
 80018ea:	e003      	b.n	80018f4 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 80018ec:	68bb      	ldr	r3, [r7, #8]
 80018ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80018f0:	2300      	movs	r3, #0
 80018f2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80018f4:	e030      	b.n	8001958 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80018f6:	697a      	ldr	r2, [r7, #20]
 80018f8:	68f8      	ldr	r0, [r7, #12]
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	9300      	str	r3, [sp, #0]
 80018fe:	0013      	movs	r3, r2
 8001900:	2200      	movs	r2, #0
 8001902:	2180      	movs	r1, #128	@ 0x80
 8001904:	f000 fe54 	bl	80025b0 <UART_WaitOnFlagUntilTimeout>
 8001908:	1e03      	subs	r3, r0, #0
 800190a:	d005      	beq.n	8001918 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	2288      	movs	r2, #136	@ 0x88
 8001910:	2120      	movs	r1, #32
 8001912:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8001914:	2303      	movs	r3, #3
 8001916:	e03d      	b.n	8001994 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8001918:	69fb      	ldr	r3, [r7, #28]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d10b      	bne.n	8001936 <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800191e:	69bb      	ldr	r3, [r7, #24]
 8001920:	881b      	ldrh	r3, [r3, #0]
 8001922:	001a      	movs	r2, r3
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	05d2      	lsls	r2, r2, #23
 800192a:	0dd2      	lsrs	r2, r2, #23
 800192c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800192e:	69bb      	ldr	r3, [r7, #24]
 8001930:	3302      	adds	r3, #2
 8001932:	61bb      	str	r3, [r7, #24]
 8001934:	e007      	b.n	8001946 <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8001936:	69fb      	ldr	r3, [r7, #28]
 8001938:	781a      	ldrb	r2, [r3, #0]
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8001940:	69fb      	ldr	r3, [r7, #28]
 8001942:	3301      	adds	r3, #1
 8001944:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	2256      	movs	r2, #86	@ 0x56
 800194a:	5a9b      	ldrh	r3, [r3, r2]
 800194c:	b29b      	uxth	r3, r3
 800194e:	3b01      	subs	r3, #1
 8001950:	b299      	uxth	r1, r3
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	2256      	movs	r2, #86	@ 0x56
 8001956:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	2256      	movs	r2, #86	@ 0x56
 800195c:	5a9b      	ldrh	r3, [r3, r2]
 800195e:	b29b      	uxth	r3, r3
 8001960:	2b00      	cmp	r3, #0
 8001962:	d1c8      	bne.n	80018f6 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001964:	697a      	ldr	r2, [r7, #20]
 8001966:	68f8      	ldr	r0, [r7, #12]
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	9300      	str	r3, [sp, #0]
 800196c:	0013      	movs	r3, r2
 800196e:	2200      	movs	r2, #0
 8001970:	2140      	movs	r1, #64	@ 0x40
 8001972:	f000 fe1d 	bl	80025b0 <UART_WaitOnFlagUntilTimeout>
 8001976:	1e03      	subs	r3, r0, #0
 8001978:	d005      	beq.n	8001986 <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	2288      	movs	r2, #136	@ 0x88
 800197e:	2120      	movs	r1, #32
 8001980:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 8001982:	2303      	movs	r3, #3
 8001984:	e006      	b.n	8001994 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	2288      	movs	r2, #136	@ 0x88
 800198a:	2120      	movs	r1, #32
 800198c:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800198e:	2300      	movs	r3, #0
 8001990:	e000      	b.n	8001994 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 8001992:	2302      	movs	r3, #2
  }
}
 8001994:	0018      	movs	r0, r3
 8001996:	46bd      	mov	sp, r7
 8001998:	b008      	add	sp, #32
 800199a:	bd80      	pop	{r7, pc}

0800199c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800199c:	b5b0      	push	{r4, r5, r7, lr}
 800199e:	b0aa      	sub	sp, #168	@ 0xa8
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	69db      	ldr	r3, [r3, #28]
 80019aa:	22a4      	movs	r2, #164	@ 0xa4
 80019ac:	18b9      	adds	r1, r7, r2
 80019ae:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	20a0      	movs	r0, #160	@ 0xa0
 80019b8:	1839      	adds	r1, r7, r0
 80019ba:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	689b      	ldr	r3, [r3, #8]
 80019c2:	249c      	movs	r4, #156	@ 0x9c
 80019c4:	1939      	adds	r1, r7, r4
 80019c6:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80019c8:	0011      	movs	r1, r2
 80019ca:	18bb      	adds	r3, r7, r2
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4aa2      	ldr	r2, [pc, #648]	@ (8001c58 <HAL_UART_IRQHandler+0x2bc>)
 80019d0:	4013      	ands	r3, r2
 80019d2:	2298      	movs	r2, #152	@ 0x98
 80019d4:	18bd      	adds	r5, r7, r2
 80019d6:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 80019d8:	18bb      	adds	r3, r7, r2
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d11a      	bne.n	8001a16 <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80019e0:	187b      	adds	r3, r7, r1
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	2220      	movs	r2, #32
 80019e6:	4013      	ands	r3, r2
 80019e8:	d015      	beq.n	8001a16 <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80019ea:	183b      	adds	r3, r7, r0
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	2220      	movs	r2, #32
 80019f0:	4013      	ands	r3, r2
 80019f2:	d105      	bne.n	8001a00 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80019f4:	193b      	adds	r3, r7, r4
 80019f6:	681a      	ldr	r2, [r3, #0]
 80019f8:	2380      	movs	r3, #128	@ 0x80
 80019fa:	055b      	lsls	r3, r3, #21
 80019fc:	4013      	ands	r3, r2
 80019fe:	d00a      	beq.n	8001a16 <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d100      	bne.n	8001a0a <HAL_UART_IRQHandler+0x6e>
 8001a08:	e2dc      	b.n	8001fc4 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001a0e:	687a      	ldr	r2, [r7, #4]
 8001a10:	0010      	movs	r0, r2
 8001a12:	4798      	blx	r3
      }
      return;
 8001a14:	e2d6      	b.n	8001fc4 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8001a16:	2398      	movs	r3, #152	@ 0x98
 8001a18:	18fb      	adds	r3, r7, r3
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d100      	bne.n	8001a22 <HAL_UART_IRQHandler+0x86>
 8001a20:	e122      	b.n	8001c68 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8001a22:	239c      	movs	r3, #156	@ 0x9c
 8001a24:	18fb      	adds	r3, r7, r3
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a8c      	ldr	r2, [pc, #560]	@ (8001c5c <HAL_UART_IRQHandler+0x2c0>)
 8001a2a:	4013      	ands	r3, r2
 8001a2c:	d106      	bne.n	8001a3c <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8001a2e:	23a0      	movs	r3, #160	@ 0xa0
 8001a30:	18fb      	adds	r3, r7, r3
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a8a      	ldr	r2, [pc, #552]	@ (8001c60 <HAL_UART_IRQHandler+0x2c4>)
 8001a36:	4013      	ands	r3, r2
 8001a38:	d100      	bne.n	8001a3c <HAL_UART_IRQHandler+0xa0>
 8001a3a:	e115      	b.n	8001c68 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8001a3c:	23a4      	movs	r3, #164	@ 0xa4
 8001a3e:	18fb      	adds	r3, r7, r3
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	2201      	movs	r2, #1
 8001a44:	4013      	ands	r3, r2
 8001a46:	d012      	beq.n	8001a6e <HAL_UART_IRQHandler+0xd2>
 8001a48:	23a0      	movs	r3, #160	@ 0xa0
 8001a4a:	18fb      	adds	r3, r7, r3
 8001a4c:	681a      	ldr	r2, [r3, #0]
 8001a4e:	2380      	movs	r3, #128	@ 0x80
 8001a50:	005b      	lsls	r3, r3, #1
 8001a52:	4013      	ands	r3, r2
 8001a54:	d00b      	beq.n	8001a6e <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2290      	movs	r2, #144	@ 0x90
 8001a62:	589b      	ldr	r3, [r3, r2]
 8001a64:	2201      	movs	r2, #1
 8001a66:	431a      	orrs	r2, r3
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2190      	movs	r1, #144	@ 0x90
 8001a6c:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8001a6e:	23a4      	movs	r3, #164	@ 0xa4
 8001a70:	18fb      	adds	r3, r7, r3
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	2202      	movs	r2, #2
 8001a76:	4013      	ands	r3, r2
 8001a78:	d011      	beq.n	8001a9e <HAL_UART_IRQHandler+0x102>
 8001a7a:	239c      	movs	r3, #156	@ 0x9c
 8001a7c:	18fb      	adds	r3, r7, r3
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	2201      	movs	r2, #1
 8001a82:	4013      	ands	r3, r2
 8001a84:	d00b      	beq.n	8001a9e <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	2202      	movs	r2, #2
 8001a8c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2290      	movs	r2, #144	@ 0x90
 8001a92:	589b      	ldr	r3, [r3, r2]
 8001a94:	2204      	movs	r2, #4
 8001a96:	431a      	orrs	r2, r3
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2190      	movs	r1, #144	@ 0x90
 8001a9c:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8001a9e:	23a4      	movs	r3, #164	@ 0xa4
 8001aa0:	18fb      	adds	r3, r7, r3
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	2204      	movs	r2, #4
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	d011      	beq.n	8001ace <HAL_UART_IRQHandler+0x132>
 8001aaa:	239c      	movs	r3, #156	@ 0x9c
 8001aac:	18fb      	adds	r3, r7, r3
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	d00b      	beq.n	8001ace <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	2204      	movs	r2, #4
 8001abc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2290      	movs	r2, #144	@ 0x90
 8001ac2:	589b      	ldr	r3, [r3, r2]
 8001ac4:	2202      	movs	r2, #2
 8001ac6:	431a      	orrs	r2, r3
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2190      	movs	r1, #144	@ 0x90
 8001acc:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8001ace:	23a4      	movs	r3, #164	@ 0xa4
 8001ad0:	18fb      	adds	r3, r7, r3
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	2208      	movs	r2, #8
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	d017      	beq.n	8001b0a <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8001ada:	23a0      	movs	r3, #160	@ 0xa0
 8001adc:	18fb      	adds	r3, r7, r3
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	2220      	movs	r2, #32
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	d105      	bne.n	8001af2 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8001ae6:	239c      	movs	r3, #156	@ 0x9c
 8001ae8:	18fb      	adds	r3, r7, r3
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a5b      	ldr	r2, [pc, #364]	@ (8001c5c <HAL_UART_IRQHandler+0x2c0>)
 8001aee:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8001af0:	d00b      	beq.n	8001b0a <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	2208      	movs	r2, #8
 8001af8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2290      	movs	r2, #144	@ 0x90
 8001afe:	589b      	ldr	r3, [r3, r2]
 8001b00:	2208      	movs	r2, #8
 8001b02:	431a      	orrs	r2, r3
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2190      	movs	r1, #144	@ 0x90
 8001b08:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8001b0a:	23a4      	movs	r3, #164	@ 0xa4
 8001b0c:	18fb      	adds	r3, r7, r3
 8001b0e:	681a      	ldr	r2, [r3, #0]
 8001b10:	2380      	movs	r3, #128	@ 0x80
 8001b12:	011b      	lsls	r3, r3, #4
 8001b14:	4013      	ands	r3, r2
 8001b16:	d013      	beq.n	8001b40 <HAL_UART_IRQHandler+0x1a4>
 8001b18:	23a0      	movs	r3, #160	@ 0xa0
 8001b1a:	18fb      	adds	r3, r7, r3
 8001b1c:	681a      	ldr	r2, [r3, #0]
 8001b1e:	2380      	movs	r3, #128	@ 0x80
 8001b20:	04db      	lsls	r3, r3, #19
 8001b22:	4013      	ands	r3, r2
 8001b24:	d00c      	beq.n	8001b40 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	2280      	movs	r2, #128	@ 0x80
 8001b2c:	0112      	lsls	r2, r2, #4
 8001b2e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2290      	movs	r2, #144	@ 0x90
 8001b34:	589b      	ldr	r3, [r3, r2]
 8001b36:	2220      	movs	r2, #32
 8001b38:	431a      	orrs	r2, r3
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2190      	movs	r1, #144	@ 0x90
 8001b3e:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2290      	movs	r2, #144	@ 0x90
 8001b44:	589b      	ldr	r3, [r3, r2]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d100      	bne.n	8001b4c <HAL_UART_IRQHandler+0x1b0>
 8001b4a:	e23d      	b.n	8001fc8 <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8001b4c:	23a4      	movs	r3, #164	@ 0xa4
 8001b4e:	18fb      	adds	r3, r7, r3
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	2220      	movs	r2, #32
 8001b54:	4013      	ands	r3, r2
 8001b56:	d015      	beq.n	8001b84 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8001b58:	23a0      	movs	r3, #160	@ 0xa0
 8001b5a:	18fb      	adds	r3, r7, r3
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	2220      	movs	r2, #32
 8001b60:	4013      	ands	r3, r2
 8001b62:	d106      	bne.n	8001b72 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8001b64:	239c      	movs	r3, #156	@ 0x9c
 8001b66:	18fb      	adds	r3, r7, r3
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	2380      	movs	r3, #128	@ 0x80
 8001b6c:	055b      	lsls	r3, r3, #21
 8001b6e:	4013      	ands	r3, r2
 8001b70:	d008      	beq.n	8001b84 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d004      	beq.n	8001b84 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001b7e:	687a      	ldr	r2, [r7, #4]
 8001b80:	0010      	movs	r0, r2
 8001b82:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2290      	movs	r2, #144	@ 0x90
 8001b88:	589b      	ldr	r3, [r3, r2]
 8001b8a:	2194      	movs	r1, #148	@ 0x94
 8001b8c:	187a      	adds	r2, r7, r1
 8001b8e:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	689b      	ldr	r3, [r3, #8]
 8001b96:	2240      	movs	r2, #64	@ 0x40
 8001b98:	4013      	ands	r3, r2
 8001b9a:	2b40      	cmp	r3, #64	@ 0x40
 8001b9c:	d004      	beq.n	8001ba8 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8001b9e:	187b      	adds	r3, r7, r1
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	2228      	movs	r2, #40	@ 0x28
 8001ba4:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8001ba6:	d04c      	beq.n	8001c42 <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	0018      	movs	r0, r3
 8001bac:	f000 fd70 	bl	8002690 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	689b      	ldr	r3, [r3, #8]
 8001bb6:	2240      	movs	r2, #64	@ 0x40
 8001bb8:	4013      	ands	r3, r2
 8001bba:	2b40      	cmp	r3, #64	@ 0x40
 8001bbc:	d13c      	bne.n	8001c38 <HAL_UART_IRQHandler+0x29c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001bbe:	f3ef 8310 	mrs	r3, PRIMASK
 8001bc2:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8001bc4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001bc6:	2090      	movs	r0, #144	@ 0x90
 8001bc8:	183a      	adds	r2, r7, r0
 8001bca:	6013      	str	r3, [r2, #0]
 8001bcc:	2301      	movs	r3, #1
 8001bce:	667b      	str	r3, [r7, #100]	@ 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001bd0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001bd2:	f383 8810 	msr	PRIMASK, r3
}
 8001bd6:	46c0      	nop			@ (mov r8, r8)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	689a      	ldr	r2, [r3, #8]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	2140      	movs	r1, #64	@ 0x40
 8001be4:	438a      	bics	r2, r1
 8001be6:	609a      	str	r2, [r3, #8]
 8001be8:	183b      	adds	r3, r7, r0
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001bee:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001bf0:	f383 8810 	msr	PRIMASK, r3
}
 8001bf4:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2280      	movs	r2, #128	@ 0x80
 8001bfa:	589b      	ldr	r3, [r3, r2]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d016      	beq.n	8001c2e <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2280      	movs	r2, #128	@ 0x80
 8001c04:	589b      	ldr	r3, [r3, r2]
 8001c06:	4a17      	ldr	r2, [pc, #92]	@ (8001c64 <HAL_UART_IRQHandler+0x2c8>)
 8001c08:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2280      	movs	r2, #128	@ 0x80
 8001c0e:	589b      	ldr	r3, [r3, r2]
 8001c10:	0018      	movs	r0, r3
 8001c12:	f7fe febd 	bl	8000990 <HAL_DMA_Abort_IT>
 8001c16:	1e03      	subs	r3, r0, #0
 8001c18:	d01c      	beq.n	8001c54 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2280      	movs	r2, #128	@ 0x80
 8001c1e:	589b      	ldr	r3, [r3, r2]
 8001c20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c22:	687a      	ldr	r2, [r7, #4]
 8001c24:	2180      	movs	r1, #128	@ 0x80
 8001c26:	5852      	ldr	r2, [r2, r1]
 8001c28:	0010      	movs	r0, r2
 8001c2a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001c2c:	e012      	b.n	8001c54 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	0018      	movs	r0, r3
 8001c32:	f000 f9e1 	bl	8001ff8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001c36:	e00d      	b.n	8001c54 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	0018      	movs	r0, r3
 8001c3c:	f000 f9dc 	bl	8001ff8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001c40:	e008      	b.n	8001c54 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	0018      	movs	r0, r3
 8001c46:	f000 f9d7 	bl	8001ff8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2290      	movs	r2, #144	@ 0x90
 8001c4e:	2100      	movs	r1, #0
 8001c50:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8001c52:	e1b9      	b.n	8001fc8 <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001c54:	46c0      	nop			@ (mov r8, r8)
    return;
 8001c56:	e1b7      	b.n	8001fc8 <HAL_UART_IRQHandler+0x62c>
 8001c58:	0000080f 	.word	0x0000080f
 8001c5c:	10000001 	.word	0x10000001
 8001c60:	04000120 	.word	0x04000120
 8001c64:	0800275d 	.word	0x0800275d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001c6c:	2b01      	cmp	r3, #1
 8001c6e:	d000      	beq.n	8001c72 <HAL_UART_IRQHandler+0x2d6>
 8001c70:	e13e      	b.n	8001ef0 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8001c72:	23a4      	movs	r3, #164	@ 0xa4
 8001c74:	18fb      	adds	r3, r7, r3
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	2210      	movs	r2, #16
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	d100      	bne.n	8001c80 <HAL_UART_IRQHandler+0x2e4>
 8001c7e:	e137      	b.n	8001ef0 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8001c80:	23a0      	movs	r3, #160	@ 0xa0
 8001c82:	18fb      	adds	r3, r7, r3
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	2210      	movs	r2, #16
 8001c88:	4013      	ands	r3, r2
 8001c8a:	d100      	bne.n	8001c8e <HAL_UART_IRQHandler+0x2f2>
 8001c8c:	e130      	b.n	8001ef0 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	2210      	movs	r2, #16
 8001c94:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	2240      	movs	r2, #64	@ 0x40
 8001c9e:	4013      	ands	r3, r2
 8001ca0:	2b40      	cmp	r3, #64	@ 0x40
 8001ca2:	d000      	beq.n	8001ca6 <HAL_UART_IRQHandler+0x30a>
 8001ca4:	e0a4      	b.n	8001df0 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2280      	movs	r2, #128	@ 0x80
 8001caa:	589b      	ldr	r3, [r3, r2]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	685a      	ldr	r2, [r3, #4]
 8001cb0:	217e      	movs	r1, #126	@ 0x7e
 8001cb2:	187b      	adds	r3, r7, r1
 8001cb4:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8001cb6:	187b      	adds	r3, r7, r1
 8001cb8:	881b      	ldrh	r3, [r3, #0]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d100      	bne.n	8001cc0 <HAL_UART_IRQHandler+0x324>
 8001cbe:	e185      	b.n	8001fcc <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	225c      	movs	r2, #92	@ 0x5c
 8001cc4:	5a9b      	ldrh	r3, [r3, r2]
 8001cc6:	187a      	adds	r2, r7, r1
 8001cc8:	8812      	ldrh	r2, [r2, #0]
 8001cca:	429a      	cmp	r2, r3
 8001ccc:	d300      	bcc.n	8001cd0 <HAL_UART_IRQHandler+0x334>
 8001cce:	e17d      	b.n	8001fcc <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	187a      	adds	r2, r7, r1
 8001cd4:	215e      	movs	r1, #94	@ 0x5e
 8001cd6:	8812      	ldrh	r2, [r2, #0]
 8001cd8:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2280      	movs	r2, #128	@ 0x80
 8001cde:	589b      	ldr	r3, [r3, r2]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	2220      	movs	r2, #32
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	d170      	bne.n	8001dcc <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001cea:	f3ef 8310 	mrs	r3, PRIMASK
 8001cee:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8001cf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001cf2:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001cf8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001cfa:	f383 8810 	msr	PRIMASK, r3
}
 8001cfe:	46c0      	nop			@ (mov r8, r8)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	681a      	ldr	r2, [r3, #0]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	49b4      	ldr	r1, [pc, #720]	@ (8001fdc <HAL_UART_IRQHandler+0x640>)
 8001d0c:	400a      	ands	r2, r1
 8001d0e:	601a      	str	r2, [r3, #0]
 8001d10:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001d12:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001d14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d16:	f383 8810 	msr	PRIMASK, r3
}
 8001d1a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001d1c:	f3ef 8310 	mrs	r3, PRIMASK
 8001d20:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8001d22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001d24:	677b      	str	r3, [r7, #116]	@ 0x74
 8001d26:	2301      	movs	r3, #1
 8001d28:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001d2a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001d2c:	f383 8810 	msr	PRIMASK, r3
}
 8001d30:	46c0      	nop			@ (mov r8, r8)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	689a      	ldr	r2, [r3, #8]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	2101      	movs	r1, #1
 8001d3e:	438a      	bics	r2, r1
 8001d40:	609a      	str	r2, [r3, #8]
 8001d42:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001d44:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001d46:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001d48:	f383 8810 	msr	PRIMASK, r3
}
 8001d4c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001d4e:	f3ef 8310 	mrs	r3, PRIMASK
 8001d52:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8001d54:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001d56:	673b      	str	r3, [r7, #112]	@ 0x70
 8001d58:	2301      	movs	r3, #1
 8001d5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001d5c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001d5e:	f383 8810 	msr	PRIMASK, r3
}
 8001d62:	46c0      	nop			@ (mov r8, r8)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	689a      	ldr	r2, [r3, #8]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	2140      	movs	r1, #64	@ 0x40
 8001d70:	438a      	bics	r2, r1
 8001d72:	609a      	str	r2, [r3, #8]
 8001d74:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001d76:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001d78:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001d7a:	f383 8810 	msr	PRIMASK, r3
}
 8001d7e:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	228c      	movs	r2, #140	@ 0x8c
 8001d84:	2120      	movs	r1, #32
 8001d86:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001d8e:	f3ef 8310 	mrs	r3, PRIMASK
 8001d92:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8001d94:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001d96:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001d98:	2301      	movs	r3, #1
 8001d9a:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001d9c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001d9e:	f383 8810 	msr	PRIMASK, r3
}
 8001da2:	46c0      	nop			@ (mov r8, r8)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	681a      	ldr	r2, [r3, #0]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	2110      	movs	r1, #16
 8001db0:	438a      	bics	r2, r1
 8001db2:	601a      	str	r2, [r3, #0]
 8001db4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001db6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001db8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001dba:	f383 8810 	msr	PRIMASK, r3
}
 8001dbe:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2280      	movs	r2, #128	@ 0x80
 8001dc4:	589b      	ldr	r3, [r3, r2]
 8001dc6:	0018      	movs	r0, r3
 8001dc8:	f7fe fd80 	bl	80008cc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2202      	movs	r2, #2
 8001dd0:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	225c      	movs	r2, #92	@ 0x5c
 8001dd6:	5a9a      	ldrh	r2, [r3, r2]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	215e      	movs	r1, #94	@ 0x5e
 8001ddc:	5a5b      	ldrh	r3, [r3, r1]
 8001dde:	b29b      	uxth	r3, r3
 8001de0:	1ad3      	subs	r3, r2, r3
 8001de2:	b29a      	uxth	r2, r3
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	0011      	movs	r1, r2
 8001de8:	0018      	movs	r0, r3
 8001dea:	f000 f90d 	bl	8002008 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8001dee:	e0ed      	b.n	8001fcc <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	225c      	movs	r2, #92	@ 0x5c
 8001df4:	5a99      	ldrh	r1, [r3, r2]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	225e      	movs	r2, #94	@ 0x5e
 8001dfa:	5a9b      	ldrh	r3, [r3, r2]
 8001dfc:	b29a      	uxth	r2, r3
 8001dfe:	208e      	movs	r0, #142	@ 0x8e
 8001e00:	183b      	adds	r3, r7, r0
 8001e02:	1a8a      	subs	r2, r1, r2
 8001e04:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	225e      	movs	r2, #94	@ 0x5e
 8001e0a:	5a9b      	ldrh	r3, [r3, r2]
 8001e0c:	b29b      	uxth	r3, r3
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d100      	bne.n	8001e14 <HAL_UART_IRQHandler+0x478>
 8001e12:	e0dd      	b.n	8001fd0 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 8001e14:	183b      	adds	r3, r7, r0
 8001e16:	881b      	ldrh	r3, [r3, #0]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d100      	bne.n	8001e1e <HAL_UART_IRQHandler+0x482>
 8001e1c:	e0d8      	b.n	8001fd0 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001e1e:	f3ef 8310 	mrs	r3, PRIMASK
 8001e22:	60fb      	str	r3, [r7, #12]
  return(result);
 8001e24:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8001e26:	2488      	movs	r4, #136	@ 0x88
 8001e28:	193a      	adds	r2, r7, r4
 8001e2a:	6013      	str	r3, [r2, #0]
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	f383 8810 	msr	PRIMASK, r3
}
 8001e36:	46c0      	nop			@ (mov r8, r8)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	681a      	ldr	r2, [r3, #0]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4967      	ldr	r1, [pc, #412]	@ (8001fe0 <HAL_UART_IRQHandler+0x644>)
 8001e44:	400a      	ands	r2, r1
 8001e46:	601a      	str	r2, [r3, #0]
 8001e48:	193b      	adds	r3, r7, r4
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001e4e:	697b      	ldr	r3, [r7, #20]
 8001e50:	f383 8810 	msr	PRIMASK, r3
}
 8001e54:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001e56:	f3ef 8310 	mrs	r3, PRIMASK
 8001e5a:	61bb      	str	r3, [r7, #24]
  return(result);
 8001e5c:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8001e5e:	2484      	movs	r4, #132	@ 0x84
 8001e60:	193a      	adds	r2, r7, r4
 8001e62:	6013      	str	r3, [r2, #0]
 8001e64:	2301      	movs	r3, #1
 8001e66:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001e68:	69fb      	ldr	r3, [r7, #28]
 8001e6a:	f383 8810 	msr	PRIMASK, r3
}
 8001e6e:	46c0      	nop			@ (mov r8, r8)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	689a      	ldr	r2, [r3, #8]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	495a      	ldr	r1, [pc, #360]	@ (8001fe4 <HAL_UART_IRQHandler+0x648>)
 8001e7c:	400a      	ands	r2, r1
 8001e7e:	609a      	str	r2, [r3, #8]
 8001e80:	193b      	adds	r3, r7, r4
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001e86:	6a3b      	ldr	r3, [r7, #32]
 8001e88:	f383 8810 	msr	PRIMASK, r3
}
 8001e8c:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	228c      	movs	r2, #140	@ 0x8c
 8001e92:	2120      	movs	r1, #32
 8001e94:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2200      	movs	r2, #0
 8001e9a:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001ea2:	f3ef 8310 	mrs	r3, PRIMASK
 8001ea6:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8001ea8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001eaa:	2480      	movs	r4, #128	@ 0x80
 8001eac:	193a      	adds	r2, r7, r4
 8001eae:	6013      	str	r3, [r2, #0]
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001eb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001eb6:	f383 8810 	msr	PRIMASK, r3
}
 8001eba:	46c0      	nop			@ (mov r8, r8)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	2110      	movs	r1, #16
 8001ec8:	438a      	bics	r2, r1
 8001eca:	601a      	str	r2, [r3, #0]
 8001ecc:	193b      	adds	r3, r7, r4
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001ed2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ed4:	f383 8810 	msr	PRIMASK, r3
}
 8001ed8:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2202      	movs	r2, #2
 8001ede:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8001ee0:	183b      	adds	r3, r7, r0
 8001ee2:	881a      	ldrh	r2, [r3, #0]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	0011      	movs	r1, r2
 8001ee8:	0018      	movs	r0, r3
 8001eea:	f000 f88d 	bl	8002008 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8001eee:	e06f      	b.n	8001fd0 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8001ef0:	23a4      	movs	r3, #164	@ 0xa4
 8001ef2:	18fb      	adds	r3, r7, r3
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	2380      	movs	r3, #128	@ 0x80
 8001ef8:	035b      	lsls	r3, r3, #13
 8001efa:	4013      	ands	r3, r2
 8001efc:	d010      	beq.n	8001f20 <HAL_UART_IRQHandler+0x584>
 8001efe:	239c      	movs	r3, #156	@ 0x9c
 8001f00:	18fb      	adds	r3, r7, r3
 8001f02:	681a      	ldr	r2, [r3, #0]
 8001f04:	2380      	movs	r3, #128	@ 0x80
 8001f06:	03db      	lsls	r3, r3, #15
 8001f08:	4013      	ands	r3, r2
 8001f0a:	d009      	beq.n	8001f20 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	2280      	movs	r2, #128	@ 0x80
 8001f12:	0352      	lsls	r2, r2, #13
 8001f14:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	0018      	movs	r0, r3
 8001f1a:	f000 fc62 	bl	80027e2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8001f1e:	e05a      	b.n	8001fd6 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8001f20:	23a4      	movs	r3, #164	@ 0xa4
 8001f22:	18fb      	adds	r3, r7, r3
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	2280      	movs	r2, #128	@ 0x80
 8001f28:	4013      	ands	r3, r2
 8001f2a:	d016      	beq.n	8001f5a <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8001f2c:	23a0      	movs	r3, #160	@ 0xa0
 8001f2e:	18fb      	adds	r3, r7, r3
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	2280      	movs	r2, #128	@ 0x80
 8001f34:	4013      	ands	r3, r2
 8001f36:	d106      	bne.n	8001f46 <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8001f38:	239c      	movs	r3, #156	@ 0x9c
 8001f3a:	18fb      	adds	r3, r7, r3
 8001f3c:	681a      	ldr	r2, [r3, #0]
 8001f3e:	2380      	movs	r3, #128	@ 0x80
 8001f40:	041b      	lsls	r3, r3, #16
 8001f42:	4013      	ands	r3, r2
 8001f44:	d009      	beq.n	8001f5a <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d042      	beq.n	8001fd4 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001f52:	687a      	ldr	r2, [r7, #4]
 8001f54:	0010      	movs	r0, r2
 8001f56:	4798      	blx	r3
    }
    return;
 8001f58:	e03c      	b.n	8001fd4 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8001f5a:	23a4      	movs	r3, #164	@ 0xa4
 8001f5c:	18fb      	adds	r3, r7, r3
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	2240      	movs	r2, #64	@ 0x40
 8001f62:	4013      	ands	r3, r2
 8001f64:	d00a      	beq.n	8001f7c <HAL_UART_IRQHandler+0x5e0>
 8001f66:	23a0      	movs	r3, #160	@ 0xa0
 8001f68:	18fb      	adds	r3, r7, r3
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	2240      	movs	r2, #64	@ 0x40
 8001f6e:	4013      	ands	r3, r2
 8001f70:	d004      	beq.n	8001f7c <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	0018      	movs	r0, r3
 8001f76:	f000 fc08 	bl	800278a <UART_EndTransmit_IT>
    return;
 8001f7a:	e02c      	b.n	8001fd6 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8001f7c:	23a4      	movs	r3, #164	@ 0xa4
 8001f7e:	18fb      	adds	r3, r7, r3
 8001f80:	681a      	ldr	r2, [r3, #0]
 8001f82:	2380      	movs	r3, #128	@ 0x80
 8001f84:	041b      	lsls	r3, r3, #16
 8001f86:	4013      	ands	r3, r2
 8001f88:	d00b      	beq.n	8001fa2 <HAL_UART_IRQHandler+0x606>
 8001f8a:	23a0      	movs	r3, #160	@ 0xa0
 8001f8c:	18fb      	adds	r3, r7, r3
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	2380      	movs	r3, #128	@ 0x80
 8001f92:	05db      	lsls	r3, r3, #23
 8001f94:	4013      	ands	r3, r2
 8001f96:	d004      	beq.n	8001fa2 <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	0018      	movs	r0, r3
 8001f9c:	f000 fc31 	bl	8002802 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8001fa0:	e019      	b.n	8001fd6 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8001fa2:	23a4      	movs	r3, #164	@ 0xa4
 8001fa4:	18fb      	adds	r3, r7, r3
 8001fa6:	681a      	ldr	r2, [r3, #0]
 8001fa8:	2380      	movs	r3, #128	@ 0x80
 8001faa:	045b      	lsls	r3, r3, #17
 8001fac:	4013      	ands	r3, r2
 8001fae:	d012      	beq.n	8001fd6 <HAL_UART_IRQHandler+0x63a>
 8001fb0:	23a0      	movs	r3, #160	@ 0xa0
 8001fb2:	18fb      	adds	r3, r7, r3
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	da0d      	bge.n	8001fd6 <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	0018      	movs	r0, r3
 8001fbe:	f000 fc18 	bl	80027f2 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8001fc2:	e008      	b.n	8001fd6 <HAL_UART_IRQHandler+0x63a>
      return;
 8001fc4:	46c0      	nop			@ (mov r8, r8)
 8001fc6:	e006      	b.n	8001fd6 <HAL_UART_IRQHandler+0x63a>
    return;
 8001fc8:	46c0      	nop			@ (mov r8, r8)
 8001fca:	e004      	b.n	8001fd6 <HAL_UART_IRQHandler+0x63a>
      return;
 8001fcc:	46c0      	nop			@ (mov r8, r8)
 8001fce:	e002      	b.n	8001fd6 <HAL_UART_IRQHandler+0x63a>
      return;
 8001fd0:	46c0      	nop			@ (mov r8, r8)
 8001fd2:	e000      	b.n	8001fd6 <HAL_UART_IRQHandler+0x63a>
    return;
 8001fd4:	46c0      	nop			@ (mov r8, r8)
  }
}
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	b02a      	add	sp, #168	@ 0xa8
 8001fda:	bdb0      	pop	{r4, r5, r7, pc}
 8001fdc:	fffffeff 	.word	0xfffffeff
 8001fe0:	fffffedf 	.word	0xfffffedf
 8001fe4:	effffffe 	.word	0xeffffffe

08001fe8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b082      	sub	sp, #8
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8001ff0:	46c0      	nop			@ (mov r8, r8)
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	b002      	add	sp, #8
 8001ff6:	bd80      	pop	{r7, pc}

08001ff8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b082      	sub	sp, #8
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002000:	46c0      	nop			@ (mov r8, r8)
 8002002:	46bd      	mov	sp, r7
 8002004:	b002      	add	sp, #8
 8002006:	bd80      	pop	{r7, pc}

08002008 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b082      	sub	sp, #8
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
 8002010:	000a      	movs	r2, r1
 8002012:	1cbb      	adds	r3, r7, #2
 8002014:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002016:	46c0      	nop			@ (mov r8, r8)
 8002018:	46bd      	mov	sp, r7
 800201a:	b002      	add	sp, #8
 800201c:	bd80      	pop	{r7, pc}
	...

08002020 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b088      	sub	sp, #32
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002028:	231a      	movs	r3, #26
 800202a:	18fb      	adds	r3, r7, r3
 800202c:	2200      	movs	r2, #0
 800202e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	689a      	ldr	r2, [r3, #8]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	691b      	ldr	r3, [r3, #16]
 8002038:	431a      	orrs	r2, r3
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	695b      	ldr	r3, [r3, #20]
 800203e:	431a      	orrs	r2, r3
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	69db      	ldr	r3, [r3, #28]
 8002044:	4313      	orrs	r3, r2
 8002046:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4aa1      	ldr	r2, [pc, #644]	@ (80022d4 <UART_SetConfig+0x2b4>)
 8002050:	4013      	ands	r3, r2
 8002052:	0019      	movs	r1, r3
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	69fa      	ldr	r2, [r7, #28]
 800205a:	430a      	orrs	r2, r1
 800205c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	4a9c      	ldr	r2, [pc, #624]	@ (80022d8 <UART_SetConfig+0x2b8>)
 8002066:	4013      	ands	r3, r2
 8002068:	0019      	movs	r1, r3
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	68da      	ldr	r2, [r3, #12]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	430a      	orrs	r2, r1
 8002074:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	699b      	ldr	r3, [r3, #24]
 800207a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6a1b      	ldr	r3, [r3, #32]
 8002080:	69fa      	ldr	r2, [r7, #28]
 8002082:	4313      	orrs	r3, r2
 8002084:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	4a93      	ldr	r2, [pc, #588]	@ (80022dc <UART_SetConfig+0x2bc>)
 800208e:	4013      	ands	r3, r2
 8002090:	0019      	movs	r1, r3
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	69fa      	ldr	r2, [r7, #28]
 8002098:	430a      	orrs	r2, r1
 800209a:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020a2:	220f      	movs	r2, #15
 80020a4:	4393      	bics	r3, r2
 80020a6:	0019      	movs	r1, r3
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	430a      	orrs	r2, r1
 80020b2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a89      	ldr	r2, [pc, #548]	@ (80022e0 <UART_SetConfig+0x2c0>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d127      	bne.n	800210e <UART_SetConfig+0xee>
 80020be:	4b89      	ldr	r3, [pc, #548]	@ (80022e4 <UART_SetConfig+0x2c4>)
 80020c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020c2:	2203      	movs	r2, #3
 80020c4:	4013      	ands	r3, r2
 80020c6:	2b03      	cmp	r3, #3
 80020c8:	d017      	beq.n	80020fa <UART_SetConfig+0xda>
 80020ca:	d81b      	bhi.n	8002104 <UART_SetConfig+0xe4>
 80020cc:	2b02      	cmp	r3, #2
 80020ce:	d00a      	beq.n	80020e6 <UART_SetConfig+0xc6>
 80020d0:	d818      	bhi.n	8002104 <UART_SetConfig+0xe4>
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d002      	beq.n	80020dc <UART_SetConfig+0xbc>
 80020d6:	2b01      	cmp	r3, #1
 80020d8:	d00a      	beq.n	80020f0 <UART_SetConfig+0xd0>
 80020da:	e013      	b.n	8002104 <UART_SetConfig+0xe4>
 80020dc:	231b      	movs	r3, #27
 80020de:	18fb      	adds	r3, r7, r3
 80020e0:	2200      	movs	r2, #0
 80020e2:	701a      	strb	r2, [r3, #0]
 80020e4:	e021      	b.n	800212a <UART_SetConfig+0x10a>
 80020e6:	231b      	movs	r3, #27
 80020e8:	18fb      	adds	r3, r7, r3
 80020ea:	2202      	movs	r2, #2
 80020ec:	701a      	strb	r2, [r3, #0]
 80020ee:	e01c      	b.n	800212a <UART_SetConfig+0x10a>
 80020f0:	231b      	movs	r3, #27
 80020f2:	18fb      	adds	r3, r7, r3
 80020f4:	2204      	movs	r2, #4
 80020f6:	701a      	strb	r2, [r3, #0]
 80020f8:	e017      	b.n	800212a <UART_SetConfig+0x10a>
 80020fa:	231b      	movs	r3, #27
 80020fc:	18fb      	adds	r3, r7, r3
 80020fe:	2208      	movs	r2, #8
 8002100:	701a      	strb	r2, [r3, #0]
 8002102:	e012      	b.n	800212a <UART_SetConfig+0x10a>
 8002104:	231b      	movs	r3, #27
 8002106:	18fb      	adds	r3, r7, r3
 8002108:	2210      	movs	r2, #16
 800210a:	701a      	strb	r2, [r3, #0]
 800210c:	e00d      	b.n	800212a <UART_SetConfig+0x10a>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4a75      	ldr	r2, [pc, #468]	@ (80022e8 <UART_SetConfig+0x2c8>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d104      	bne.n	8002122 <UART_SetConfig+0x102>
 8002118:	231b      	movs	r3, #27
 800211a:	18fb      	adds	r3, r7, r3
 800211c:	2200      	movs	r2, #0
 800211e:	701a      	strb	r2, [r3, #0]
 8002120:	e003      	b.n	800212a <UART_SetConfig+0x10a>
 8002122:	231b      	movs	r3, #27
 8002124:	18fb      	adds	r3, r7, r3
 8002126:	2210      	movs	r2, #16
 8002128:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	69da      	ldr	r2, [r3, #28]
 800212e:	2380      	movs	r3, #128	@ 0x80
 8002130:	021b      	lsls	r3, r3, #8
 8002132:	429a      	cmp	r2, r3
 8002134:	d000      	beq.n	8002138 <UART_SetConfig+0x118>
 8002136:	e065      	b.n	8002204 <UART_SetConfig+0x1e4>
  {
    switch (clocksource)
 8002138:	231b      	movs	r3, #27
 800213a:	18fb      	adds	r3, r7, r3
 800213c:	781b      	ldrb	r3, [r3, #0]
 800213e:	2b08      	cmp	r3, #8
 8002140:	d015      	beq.n	800216e <UART_SetConfig+0x14e>
 8002142:	dc18      	bgt.n	8002176 <UART_SetConfig+0x156>
 8002144:	2b04      	cmp	r3, #4
 8002146:	d00d      	beq.n	8002164 <UART_SetConfig+0x144>
 8002148:	dc15      	bgt.n	8002176 <UART_SetConfig+0x156>
 800214a:	2b00      	cmp	r3, #0
 800214c:	d002      	beq.n	8002154 <UART_SetConfig+0x134>
 800214e:	2b02      	cmp	r3, #2
 8002150:	d005      	beq.n	800215e <UART_SetConfig+0x13e>
 8002152:	e010      	b.n	8002176 <UART_SetConfig+0x156>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002154:	f7ff fb12 	bl	800177c <HAL_RCC_GetPCLK1Freq>
 8002158:	0003      	movs	r3, r0
 800215a:	617b      	str	r3, [r7, #20]
        break;
 800215c:	e012      	b.n	8002184 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800215e:	4b63      	ldr	r3, [pc, #396]	@ (80022ec <UART_SetConfig+0x2cc>)
 8002160:	617b      	str	r3, [r7, #20]
        break;
 8002162:	e00f      	b.n	8002184 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002164:	f7ff fa7e 	bl	8001664 <HAL_RCC_GetSysClockFreq>
 8002168:	0003      	movs	r3, r0
 800216a:	617b      	str	r3, [r7, #20]
        break;
 800216c:	e00a      	b.n	8002184 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800216e:	2380      	movs	r3, #128	@ 0x80
 8002170:	021b      	lsls	r3, r3, #8
 8002172:	617b      	str	r3, [r7, #20]
        break;
 8002174:	e006      	b.n	8002184 <UART_SetConfig+0x164>
      default:
        pclk = 0U;
 8002176:	2300      	movs	r3, #0
 8002178:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800217a:	231a      	movs	r3, #26
 800217c:	18fb      	adds	r3, r7, r3
 800217e:	2201      	movs	r2, #1
 8002180:	701a      	strb	r2, [r3, #0]
        break;
 8002182:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d100      	bne.n	800218c <UART_SetConfig+0x16c>
 800218a:	e08d      	b.n	80022a8 <UART_SetConfig+0x288>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002190:	4b57      	ldr	r3, [pc, #348]	@ (80022f0 <UART_SetConfig+0x2d0>)
 8002192:	0052      	lsls	r2, r2, #1
 8002194:	5ad3      	ldrh	r3, [r2, r3]
 8002196:	0019      	movs	r1, r3
 8002198:	6978      	ldr	r0, [r7, #20]
 800219a:	f7fd ffb9 	bl	8000110 <__udivsi3>
 800219e:	0003      	movs	r3, r0
 80021a0:	005a      	lsls	r2, r3, #1
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	085b      	lsrs	r3, r3, #1
 80021a8:	18d2      	adds	r2, r2, r3
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	0019      	movs	r1, r3
 80021b0:	0010      	movs	r0, r2
 80021b2:	f7fd ffad 	bl	8000110 <__udivsi3>
 80021b6:	0003      	movs	r3, r0
 80021b8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	2b0f      	cmp	r3, #15
 80021be:	d91c      	bls.n	80021fa <UART_SetConfig+0x1da>
 80021c0:	693a      	ldr	r2, [r7, #16]
 80021c2:	2380      	movs	r3, #128	@ 0x80
 80021c4:	025b      	lsls	r3, r3, #9
 80021c6:	429a      	cmp	r2, r3
 80021c8:	d217      	bcs.n	80021fa <UART_SetConfig+0x1da>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	b29a      	uxth	r2, r3
 80021ce:	200e      	movs	r0, #14
 80021d0:	183b      	adds	r3, r7, r0
 80021d2:	210f      	movs	r1, #15
 80021d4:	438a      	bics	r2, r1
 80021d6:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	085b      	lsrs	r3, r3, #1
 80021dc:	b29b      	uxth	r3, r3
 80021de:	2207      	movs	r2, #7
 80021e0:	4013      	ands	r3, r2
 80021e2:	b299      	uxth	r1, r3
 80021e4:	183b      	adds	r3, r7, r0
 80021e6:	183a      	adds	r2, r7, r0
 80021e8:	8812      	ldrh	r2, [r2, #0]
 80021ea:	430a      	orrs	r2, r1
 80021ec:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	183a      	adds	r2, r7, r0
 80021f4:	8812      	ldrh	r2, [r2, #0]
 80021f6:	60da      	str	r2, [r3, #12]
 80021f8:	e056      	b.n	80022a8 <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 80021fa:	231a      	movs	r3, #26
 80021fc:	18fb      	adds	r3, r7, r3
 80021fe:	2201      	movs	r2, #1
 8002200:	701a      	strb	r2, [r3, #0]
 8002202:	e051      	b.n	80022a8 <UART_SetConfig+0x288>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002204:	231b      	movs	r3, #27
 8002206:	18fb      	adds	r3, r7, r3
 8002208:	781b      	ldrb	r3, [r3, #0]
 800220a:	2b08      	cmp	r3, #8
 800220c:	d015      	beq.n	800223a <UART_SetConfig+0x21a>
 800220e:	dc18      	bgt.n	8002242 <UART_SetConfig+0x222>
 8002210:	2b04      	cmp	r3, #4
 8002212:	d00d      	beq.n	8002230 <UART_SetConfig+0x210>
 8002214:	dc15      	bgt.n	8002242 <UART_SetConfig+0x222>
 8002216:	2b00      	cmp	r3, #0
 8002218:	d002      	beq.n	8002220 <UART_SetConfig+0x200>
 800221a:	2b02      	cmp	r3, #2
 800221c:	d005      	beq.n	800222a <UART_SetConfig+0x20a>
 800221e:	e010      	b.n	8002242 <UART_SetConfig+0x222>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002220:	f7ff faac 	bl	800177c <HAL_RCC_GetPCLK1Freq>
 8002224:	0003      	movs	r3, r0
 8002226:	617b      	str	r3, [r7, #20]
        break;
 8002228:	e012      	b.n	8002250 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800222a:	4b30      	ldr	r3, [pc, #192]	@ (80022ec <UART_SetConfig+0x2cc>)
 800222c:	617b      	str	r3, [r7, #20]
        break;
 800222e:	e00f      	b.n	8002250 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002230:	f7ff fa18 	bl	8001664 <HAL_RCC_GetSysClockFreq>
 8002234:	0003      	movs	r3, r0
 8002236:	617b      	str	r3, [r7, #20]
        break;
 8002238:	e00a      	b.n	8002250 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800223a:	2380      	movs	r3, #128	@ 0x80
 800223c:	021b      	lsls	r3, r3, #8
 800223e:	617b      	str	r3, [r7, #20]
        break;
 8002240:	e006      	b.n	8002250 <UART_SetConfig+0x230>
      default:
        pclk = 0U;
 8002242:	2300      	movs	r3, #0
 8002244:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002246:	231a      	movs	r3, #26
 8002248:	18fb      	adds	r3, r7, r3
 800224a:	2201      	movs	r2, #1
 800224c:	701a      	strb	r2, [r3, #0]
        break;
 800224e:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8002250:	697b      	ldr	r3, [r7, #20]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d028      	beq.n	80022a8 <UART_SetConfig+0x288>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800225a:	4b25      	ldr	r3, [pc, #148]	@ (80022f0 <UART_SetConfig+0x2d0>)
 800225c:	0052      	lsls	r2, r2, #1
 800225e:	5ad3      	ldrh	r3, [r2, r3]
 8002260:	0019      	movs	r1, r3
 8002262:	6978      	ldr	r0, [r7, #20]
 8002264:	f7fd ff54 	bl	8000110 <__udivsi3>
 8002268:	0003      	movs	r3, r0
 800226a:	001a      	movs	r2, r3
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	085b      	lsrs	r3, r3, #1
 8002272:	18d2      	adds	r2, r2, r3
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	0019      	movs	r1, r3
 800227a:	0010      	movs	r0, r2
 800227c:	f7fd ff48 	bl	8000110 <__udivsi3>
 8002280:	0003      	movs	r3, r0
 8002282:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	2b0f      	cmp	r3, #15
 8002288:	d90a      	bls.n	80022a0 <UART_SetConfig+0x280>
 800228a:	693a      	ldr	r2, [r7, #16]
 800228c:	2380      	movs	r3, #128	@ 0x80
 800228e:	025b      	lsls	r3, r3, #9
 8002290:	429a      	cmp	r2, r3
 8002292:	d205      	bcs.n	80022a0 <UART_SetConfig+0x280>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	b29a      	uxth	r2, r3
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	60da      	str	r2, [r3, #12]
 800229e:	e003      	b.n	80022a8 <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 80022a0:	231a      	movs	r3, #26
 80022a2:	18fb      	adds	r3, r7, r3
 80022a4:	2201      	movs	r2, #1
 80022a6:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	226a      	movs	r2, #106	@ 0x6a
 80022ac:	2101      	movs	r1, #1
 80022ae:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2268      	movs	r2, #104	@ 0x68
 80022b4:	2101      	movs	r1, #1
 80022b6:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2200      	movs	r2, #0
 80022bc:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2200      	movs	r2, #0
 80022c2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80022c4:	231a      	movs	r3, #26
 80022c6:	18fb      	adds	r3, r7, r3
 80022c8:	781b      	ldrb	r3, [r3, #0]
}
 80022ca:	0018      	movs	r0, r3
 80022cc:	46bd      	mov	sp, r7
 80022ce:	b008      	add	sp, #32
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	46c0      	nop			@ (mov r8, r8)
 80022d4:	cfff69f3 	.word	0xcfff69f3
 80022d8:	ffffcfff 	.word	0xffffcfff
 80022dc:	11fff4ff 	.word	0x11fff4ff
 80022e0:	40013800 	.word	0x40013800
 80022e4:	40021000 	.word	0x40021000
 80022e8:	40004400 	.word	0x40004400
 80022ec:	00f42400 	.word	0x00f42400
 80022f0:	0800290c 	.word	0x0800290c

080022f4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b082      	sub	sp, #8
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002300:	2208      	movs	r2, #8
 8002302:	4013      	ands	r3, r2
 8002304:	d00b      	beq.n	800231e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	4a4a      	ldr	r2, [pc, #296]	@ (8002438 <UART_AdvFeatureConfig+0x144>)
 800230e:	4013      	ands	r3, r2
 8002310:	0019      	movs	r1, r3
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	430a      	orrs	r2, r1
 800231c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002322:	2201      	movs	r2, #1
 8002324:	4013      	ands	r3, r2
 8002326:	d00b      	beq.n	8002340 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	4a43      	ldr	r2, [pc, #268]	@ (800243c <UART_AdvFeatureConfig+0x148>)
 8002330:	4013      	ands	r3, r2
 8002332:	0019      	movs	r1, r3
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	430a      	orrs	r2, r1
 800233e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002344:	2202      	movs	r2, #2
 8002346:	4013      	ands	r3, r2
 8002348:	d00b      	beq.n	8002362 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	4a3b      	ldr	r2, [pc, #236]	@ (8002440 <UART_AdvFeatureConfig+0x14c>)
 8002352:	4013      	ands	r3, r2
 8002354:	0019      	movs	r1, r3
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	430a      	orrs	r2, r1
 8002360:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002366:	2204      	movs	r2, #4
 8002368:	4013      	ands	r3, r2
 800236a:	d00b      	beq.n	8002384 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	4a34      	ldr	r2, [pc, #208]	@ (8002444 <UART_AdvFeatureConfig+0x150>)
 8002374:	4013      	ands	r3, r2
 8002376:	0019      	movs	r1, r3
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	430a      	orrs	r2, r1
 8002382:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002388:	2210      	movs	r2, #16
 800238a:	4013      	ands	r3, r2
 800238c:	d00b      	beq.n	80023a6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	4a2c      	ldr	r2, [pc, #176]	@ (8002448 <UART_AdvFeatureConfig+0x154>)
 8002396:	4013      	ands	r3, r2
 8002398:	0019      	movs	r1, r3
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	430a      	orrs	r2, r1
 80023a4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023aa:	2220      	movs	r2, #32
 80023ac:	4013      	ands	r3, r2
 80023ae:	d00b      	beq.n	80023c8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	689b      	ldr	r3, [r3, #8]
 80023b6:	4a25      	ldr	r2, [pc, #148]	@ (800244c <UART_AdvFeatureConfig+0x158>)
 80023b8:	4013      	ands	r3, r2
 80023ba:	0019      	movs	r1, r3
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	430a      	orrs	r2, r1
 80023c6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023cc:	2240      	movs	r2, #64	@ 0x40
 80023ce:	4013      	ands	r3, r2
 80023d0:	d01d      	beq.n	800240e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	4a1d      	ldr	r2, [pc, #116]	@ (8002450 <UART_AdvFeatureConfig+0x15c>)
 80023da:	4013      	ands	r3, r2
 80023dc:	0019      	movs	r1, r3
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	430a      	orrs	r2, r1
 80023e8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80023ee:	2380      	movs	r3, #128	@ 0x80
 80023f0:	035b      	lsls	r3, r3, #13
 80023f2:	429a      	cmp	r2, r3
 80023f4:	d10b      	bne.n	800240e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	4a15      	ldr	r2, [pc, #84]	@ (8002454 <UART_AdvFeatureConfig+0x160>)
 80023fe:	4013      	ands	r3, r2
 8002400:	0019      	movs	r1, r3
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	430a      	orrs	r2, r1
 800240c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002412:	2280      	movs	r2, #128	@ 0x80
 8002414:	4013      	ands	r3, r2
 8002416:	d00b      	beq.n	8002430 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	4a0e      	ldr	r2, [pc, #56]	@ (8002458 <UART_AdvFeatureConfig+0x164>)
 8002420:	4013      	ands	r3, r2
 8002422:	0019      	movs	r1, r3
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	430a      	orrs	r2, r1
 800242e:	605a      	str	r2, [r3, #4]
  }
}
 8002430:	46c0      	nop			@ (mov r8, r8)
 8002432:	46bd      	mov	sp, r7
 8002434:	b002      	add	sp, #8
 8002436:	bd80      	pop	{r7, pc}
 8002438:	ffff7fff 	.word	0xffff7fff
 800243c:	fffdffff 	.word	0xfffdffff
 8002440:	fffeffff 	.word	0xfffeffff
 8002444:	fffbffff 	.word	0xfffbffff
 8002448:	ffffefff 	.word	0xffffefff
 800244c:	ffffdfff 	.word	0xffffdfff
 8002450:	ffefffff 	.word	0xffefffff
 8002454:	ff9fffff 	.word	0xff9fffff
 8002458:	fff7ffff 	.word	0xfff7ffff

0800245c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b092      	sub	sp, #72	@ 0x48
 8002460:	af02      	add	r7, sp, #8
 8002462:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2290      	movs	r2, #144	@ 0x90
 8002468:	2100      	movs	r1, #0
 800246a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800246c:	f7fe f922 	bl	80006b4 <HAL_GetTick>
 8002470:	0003      	movs	r3, r0
 8002472:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	2208      	movs	r2, #8
 800247c:	4013      	ands	r3, r2
 800247e:	2b08      	cmp	r3, #8
 8002480:	d12d      	bne.n	80024de <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002482:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002484:	2280      	movs	r2, #128	@ 0x80
 8002486:	0391      	lsls	r1, r2, #14
 8002488:	6878      	ldr	r0, [r7, #4]
 800248a:	4a47      	ldr	r2, [pc, #284]	@ (80025a8 <UART_CheckIdleState+0x14c>)
 800248c:	9200      	str	r2, [sp, #0]
 800248e:	2200      	movs	r2, #0
 8002490:	f000 f88e 	bl	80025b0 <UART_WaitOnFlagUntilTimeout>
 8002494:	1e03      	subs	r3, r0, #0
 8002496:	d022      	beq.n	80024de <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002498:	f3ef 8310 	mrs	r3, PRIMASK
 800249c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800249e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80024a0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80024a2:	2301      	movs	r3, #1
 80024a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80024a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024a8:	f383 8810 	msr	PRIMASK, r3
}
 80024ac:	46c0      	nop			@ (mov r8, r8)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	681a      	ldr	r2, [r3, #0]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	2180      	movs	r1, #128	@ 0x80
 80024ba:	438a      	bics	r2, r1
 80024bc:	601a      	str	r2, [r3, #0]
 80024be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80024c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80024c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024c4:	f383 8810 	msr	PRIMASK, r3
}
 80024c8:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2288      	movs	r2, #136	@ 0x88
 80024ce:	2120      	movs	r1, #32
 80024d0:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2284      	movs	r2, #132	@ 0x84
 80024d6:	2100      	movs	r1, #0
 80024d8:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80024da:	2303      	movs	r3, #3
 80024dc:	e060      	b.n	80025a0 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	2204      	movs	r2, #4
 80024e6:	4013      	ands	r3, r2
 80024e8:	2b04      	cmp	r3, #4
 80024ea:	d146      	bne.n	800257a <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80024ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80024ee:	2280      	movs	r2, #128	@ 0x80
 80024f0:	03d1      	lsls	r1, r2, #15
 80024f2:	6878      	ldr	r0, [r7, #4]
 80024f4:	4a2c      	ldr	r2, [pc, #176]	@ (80025a8 <UART_CheckIdleState+0x14c>)
 80024f6:	9200      	str	r2, [sp, #0]
 80024f8:	2200      	movs	r2, #0
 80024fa:	f000 f859 	bl	80025b0 <UART_WaitOnFlagUntilTimeout>
 80024fe:	1e03      	subs	r3, r0, #0
 8002500:	d03b      	beq.n	800257a <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002502:	f3ef 8310 	mrs	r3, PRIMASK
 8002506:	60fb      	str	r3, [r7, #12]
  return(result);
 8002508:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800250a:	637b      	str	r3, [r7, #52]	@ 0x34
 800250c:	2301      	movs	r3, #1
 800250e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	f383 8810 	msr	PRIMASK, r3
}
 8002516:	46c0      	nop			@ (mov r8, r8)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	681a      	ldr	r2, [r3, #0]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4922      	ldr	r1, [pc, #136]	@ (80025ac <UART_CheckIdleState+0x150>)
 8002524:	400a      	ands	r2, r1
 8002526:	601a      	str	r2, [r3, #0]
 8002528:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800252a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800252c:	697b      	ldr	r3, [r7, #20]
 800252e:	f383 8810 	msr	PRIMASK, r3
}
 8002532:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002534:	f3ef 8310 	mrs	r3, PRIMASK
 8002538:	61bb      	str	r3, [r7, #24]
  return(result);
 800253a:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800253c:	633b      	str	r3, [r7, #48]	@ 0x30
 800253e:	2301      	movs	r3, #1
 8002540:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002542:	69fb      	ldr	r3, [r7, #28]
 8002544:	f383 8810 	msr	PRIMASK, r3
}
 8002548:	46c0      	nop			@ (mov r8, r8)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	689a      	ldr	r2, [r3, #8]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	2101      	movs	r1, #1
 8002556:	438a      	bics	r2, r1
 8002558:	609a      	str	r2, [r3, #8]
 800255a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800255c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800255e:	6a3b      	ldr	r3, [r7, #32]
 8002560:	f383 8810 	msr	PRIMASK, r3
}
 8002564:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	228c      	movs	r2, #140	@ 0x8c
 800256a:	2120      	movs	r1, #32
 800256c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2284      	movs	r2, #132	@ 0x84
 8002572:	2100      	movs	r1, #0
 8002574:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002576:	2303      	movs	r3, #3
 8002578:	e012      	b.n	80025a0 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2288      	movs	r2, #136	@ 0x88
 800257e:	2120      	movs	r1, #32
 8002580:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	228c      	movs	r2, #140	@ 0x8c
 8002586:	2120      	movs	r1, #32
 8002588:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2200      	movs	r2, #0
 800258e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2200      	movs	r2, #0
 8002594:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2284      	movs	r2, #132	@ 0x84
 800259a:	2100      	movs	r1, #0
 800259c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800259e:	2300      	movs	r3, #0
}
 80025a0:	0018      	movs	r0, r3
 80025a2:	46bd      	mov	sp, r7
 80025a4:	b010      	add	sp, #64	@ 0x40
 80025a6:	bd80      	pop	{r7, pc}
 80025a8:	01ffffff 	.word	0x01ffffff
 80025ac:	fffffedf 	.word	0xfffffedf

080025b0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b084      	sub	sp, #16
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	60f8      	str	r0, [r7, #12]
 80025b8:	60b9      	str	r1, [r7, #8]
 80025ba:	603b      	str	r3, [r7, #0]
 80025bc:	1dfb      	adds	r3, r7, #7
 80025be:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80025c0:	e051      	b.n	8002666 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025c2:	69bb      	ldr	r3, [r7, #24]
 80025c4:	3301      	adds	r3, #1
 80025c6:	d04e      	beq.n	8002666 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025c8:	f7fe f874 	bl	80006b4 <HAL_GetTick>
 80025cc:	0002      	movs	r2, r0
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	1ad3      	subs	r3, r2, r3
 80025d2:	69ba      	ldr	r2, [r7, #24]
 80025d4:	429a      	cmp	r2, r3
 80025d6:	d302      	bcc.n	80025de <UART_WaitOnFlagUntilTimeout+0x2e>
 80025d8:	69bb      	ldr	r3, [r7, #24]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d101      	bne.n	80025e2 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80025de:	2303      	movs	r3, #3
 80025e0:	e051      	b.n	8002686 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	2204      	movs	r2, #4
 80025ea:	4013      	ands	r3, r2
 80025ec:	d03b      	beq.n	8002666 <UART_WaitOnFlagUntilTimeout+0xb6>
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	2b80      	cmp	r3, #128	@ 0x80
 80025f2:	d038      	beq.n	8002666 <UART_WaitOnFlagUntilTimeout+0xb6>
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	2b40      	cmp	r3, #64	@ 0x40
 80025f8:	d035      	beq.n	8002666 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	69db      	ldr	r3, [r3, #28]
 8002600:	2208      	movs	r2, #8
 8002602:	4013      	ands	r3, r2
 8002604:	2b08      	cmp	r3, #8
 8002606:	d111      	bne.n	800262c <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	2208      	movs	r2, #8
 800260e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	0018      	movs	r0, r3
 8002614:	f000 f83c 	bl	8002690 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	2290      	movs	r2, #144	@ 0x90
 800261c:	2108      	movs	r1, #8
 800261e:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	2284      	movs	r2, #132	@ 0x84
 8002624:	2100      	movs	r1, #0
 8002626:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002628:	2301      	movs	r3, #1
 800262a:	e02c      	b.n	8002686 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	69da      	ldr	r2, [r3, #28]
 8002632:	2380      	movs	r3, #128	@ 0x80
 8002634:	011b      	lsls	r3, r3, #4
 8002636:	401a      	ands	r2, r3
 8002638:	2380      	movs	r3, #128	@ 0x80
 800263a:	011b      	lsls	r3, r3, #4
 800263c:	429a      	cmp	r2, r3
 800263e:	d112      	bne.n	8002666 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	2280      	movs	r2, #128	@ 0x80
 8002646:	0112      	lsls	r2, r2, #4
 8002648:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	0018      	movs	r0, r3
 800264e:	f000 f81f 	bl	8002690 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	2290      	movs	r2, #144	@ 0x90
 8002656:	2120      	movs	r1, #32
 8002658:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	2284      	movs	r2, #132	@ 0x84
 800265e:	2100      	movs	r1, #0
 8002660:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002662:	2303      	movs	r3, #3
 8002664:	e00f      	b.n	8002686 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	69db      	ldr	r3, [r3, #28]
 800266c:	68ba      	ldr	r2, [r7, #8]
 800266e:	4013      	ands	r3, r2
 8002670:	68ba      	ldr	r2, [r7, #8]
 8002672:	1ad3      	subs	r3, r2, r3
 8002674:	425a      	negs	r2, r3
 8002676:	4153      	adcs	r3, r2
 8002678:	b2db      	uxtb	r3, r3
 800267a:	001a      	movs	r2, r3
 800267c:	1dfb      	adds	r3, r7, #7
 800267e:	781b      	ldrb	r3, [r3, #0]
 8002680:	429a      	cmp	r2, r3
 8002682:	d09e      	beq.n	80025c2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002684:	2300      	movs	r3, #0
}
 8002686:	0018      	movs	r0, r3
 8002688:	46bd      	mov	sp, r7
 800268a:	b004      	add	sp, #16
 800268c:	bd80      	pop	{r7, pc}
	...

08002690 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b08e      	sub	sp, #56	@ 0x38
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002698:	f3ef 8310 	mrs	r3, PRIMASK
 800269c:	617b      	str	r3, [r7, #20]
  return(result);
 800269e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80026a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80026a2:	2301      	movs	r3, #1
 80026a4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026a6:	69bb      	ldr	r3, [r7, #24]
 80026a8:	f383 8810 	msr	PRIMASK, r3
}
 80026ac:	46c0      	nop			@ (mov r8, r8)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	681a      	ldr	r2, [r3, #0]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4926      	ldr	r1, [pc, #152]	@ (8002754 <UART_EndRxTransfer+0xc4>)
 80026ba:	400a      	ands	r2, r1
 80026bc:	601a      	str	r2, [r3, #0]
 80026be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026c0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026c2:	69fb      	ldr	r3, [r7, #28]
 80026c4:	f383 8810 	msr	PRIMASK, r3
}
 80026c8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80026ca:	f3ef 8310 	mrs	r3, PRIMASK
 80026ce:	623b      	str	r3, [r7, #32]
  return(result);
 80026d0:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80026d2:	633b      	str	r3, [r7, #48]	@ 0x30
 80026d4:	2301      	movs	r3, #1
 80026d6:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026da:	f383 8810 	msr	PRIMASK, r3
}
 80026de:	46c0      	nop			@ (mov r8, r8)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	689a      	ldr	r2, [r3, #8]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	491b      	ldr	r1, [pc, #108]	@ (8002758 <UART_EndRxTransfer+0xc8>)
 80026ec:	400a      	ands	r2, r1
 80026ee:	609a      	str	r2, [r3, #8]
 80026f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026f6:	f383 8810 	msr	PRIMASK, r3
}
 80026fa:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002700:	2b01      	cmp	r3, #1
 8002702:	d118      	bne.n	8002736 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002704:	f3ef 8310 	mrs	r3, PRIMASK
 8002708:	60bb      	str	r3, [r7, #8]
  return(result);
 800270a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800270c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800270e:	2301      	movs	r3, #1
 8002710:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	f383 8810 	msr	PRIMASK, r3
}
 8002718:	46c0      	nop			@ (mov r8, r8)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	681a      	ldr	r2, [r3, #0]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	2110      	movs	r1, #16
 8002726:	438a      	bics	r2, r1
 8002728:	601a      	str	r2, [r3, #0]
 800272a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800272c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	f383 8810 	msr	PRIMASK, r3
}
 8002734:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	228c      	movs	r2, #140	@ 0x8c
 800273a:	2120      	movs	r1, #32
 800273c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2200      	movs	r2, #0
 8002742:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2200      	movs	r2, #0
 8002748:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800274a:	46c0      	nop			@ (mov r8, r8)
 800274c:	46bd      	mov	sp, r7
 800274e:	b00e      	add	sp, #56	@ 0x38
 8002750:	bd80      	pop	{r7, pc}
 8002752:	46c0      	nop			@ (mov r8, r8)
 8002754:	fffffedf 	.word	0xfffffedf
 8002758:	effffffe 	.word	0xeffffffe

0800275c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b084      	sub	sp, #16
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002768:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	225e      	movs	r2, #94	@ 0x5e
 800276e:	2100      	movs	r1, #0
 8002770:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	2256      	movs	r2, #86	@ 0x56
 8002776:	2100      	movs	r1, #0
 8002778:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	0018      	movs	r0, r3
 800277e:	f7ff fc3b 	bl	8001ff8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002782:	46c0      	nop			@ (mov r8, r8)
 8002784:	46bd      	mov	sp, r7
 8002786:	b004      	add	sp, #16
 8002788:	bd80      	pop	{r7, pc}

0800278a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800278a:	b580      	push	{r7, lr}
 800278c:	b086      	sub	sp, #24
 800278e:	af00      	add	r7, sp, #0
 8002790:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002792:	f3ef 8310 	mrs	r3, PRIMASK
 8002796:	60bb      	str	r3, [r7, #8]
  return(result);
 8002798:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800279a:	617b      	str	r3, [r7, #20]
 800279c:	2301      	movs	r3, #1
 800279e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	f383 8810 	msr	PRIMASK, r3
}
 80027a6:	46c0      	nop			@ (mov r8, r8)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	681a      	ldr	r2, [r3, #0]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	2140      	movs	r1, #64	@ 0x40
 80027b4:	438a      	bics	r2, r1
 80027b6:	601a      	str	r2, [r3, #0]
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027bc:	693b      	ldr	r3, [r7, #16]
 80027be:	f383 8810 	msr	PRIMASK, r3
}
 80027c2:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2288      	movs	r2, #136	@ 0x88
 80027c8:	2120      	movs	r1, #32
 80027ca:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2200      	movs	r2, #0
 80027d0:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	0018      	movs	r0, r3
 80027d6:	f7ff fc07 	bl	8001fe8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80027da:	46c0      	nop			@ (mov r8, r8)
 80027dc:	46bd      	mov	sp, r7
 80027de:	b006      	add	sp, #24
 80027e0:	bd80      	pop	{r7, pc}

080027e2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80027e2:	b580      	push	{r7, lr}
 80027e4:	b082      	sub	sp, #8
 80027e6:	af00      	add	r7, sp, #0
 80027e8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80027ea:	46c0      	nop			@ (mov r8, r8)
 80027ec:	46bd      	mov	sp, r7
 80027ee:	b002      	add	sp, #8
 80027f0:	bd80      	pop	{r7, pc}

080027f2 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80027f2:	b580      	push	{r7, lr}
 80027f4:	b082      	sub	sp, #8
 80027f6:	af00      	add	r7, sp, #0
 80027f8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80027fa:	46c0      	nop			@ (mov r8, r8)
 80027fc:	46bd      	mov	sp, r7
 80027fe:	b002      	add	sp, #8
 8002800:	bd80      	pop	{r7, pc}

08002802 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8002802:	b580      	push	{r7, lr}
 8002804:	b082      	sub	sp, #8
 8002806:	af00      	add	r7, sp, #0
 8002808:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800280a:	46c0      	nop			@ (mov r8, r8)
 800280c:	46bd      	mov	sp, r7
 800280e:	b002      	add	sp, #8
 8002810:	bd80      	pop	{r7, pc}

08002812 <memset>:
 8002812:	0003      	movs	r3, r0
 8002814:	1882      	adds	r2, r0, r2
 8002816:	4293      	cmp	r3, r2
 8002818:	d100      	bne.n	800281c <memset+0xa>
 800281a:	4770      	bx	lr
 800281c:	7019      	strb	r1, [r3, #0]
 800281e:	3301      	adds	r3, #1
 8002820:	e7f9      	b.n	8002816 <memset+0x4>
	...

08002824 <__libc_init_array>:
 8002824:	b570      	push	{r4, r5, r6, lr}
 8002826:	2600      	movs	r6, #0
 8002828:	4c0c      	ldr	r4, [pc, #48]	@ (800285c <__libc_init_array+0x38>)
 800282a:	4d0d      	ldr	r5, [pc, #52]	@ (8002860 <__libc_init_array+0x3c>)
 800282c:	1b64      	subs	r4, r4, r5
 800282e:	10a4      	asrs	r4, r4, #2
 8002830:	42a6      	cmp	r6, r4
 8002832:	d109      	bne.n	8002848 <__libc_init_array+0x24>
 8002834:	2600      	movs	r6, #0
 8002836:	f000 f819 	bl	800286c <_init>
 800283a:	4c0a      	ldr	r4, [pc, #40]	@ (8002864 <__libc_init_array+0x40>)
 800283c:	4d0a      	ldr	r5, [pc, #40]	@ (8002868 <__libc_init_array+0x44>)
 800283e:	1b64      	subs	r4, r4, r5
 8002840:	10a4      	asrs	r4, r4, #2
 8002842:	42a6      	cmp	r6, r4
 8002844:	d105      	bne.n	8002852 <__libc_init_array+0x2e>
 8002846:	bd70      	pop	{r4, r5, r6, pc}
 8002848:	00b3      	lsls	r3, r6, #2
 800284a:	58eb      	ldr	r3, [r5, r3]
 800284c:	4798      	blx	r3
 800284e:	3601      	adds	r6, #1
 8002850:	e7ee      	b.n	8002830 <__libc_init_array+0xc>
 8002852:	00b3      	lsls	r3, r6, #2
 8002854:	58eb      	ldr	r3, [r5, r3]
 8002856:	4798      	blx	r3
 8002858:	3601      	adds	r6, #1
 800285a:	e7f2      	b.n	8002842 <__libc_init_array+0x1e>
 800285c:	08002924 	.word	0x08002924
 8002860:	08002924 	.word	0x08002924
 8002864:	08002928 	.word	0x08002928
 8002868:	08002924 	.word	0x08002924

0800286c <_init>:
 800286c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800286e:	46c0      	nop			@ (mov r8, r8)
 8002870:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002872:	bc08      	pop	{r3}
 8002874:	469e      	mov	lr, r3
 8002876:	4770      	bx	lr

08002878 <_fini>:
 8002878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800287a:	46c0      	nop			@ (mov r8, r8)
 800287c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800287e:	bc08      	pop	{r3}
 8002880:	469e      	mov	lr, r3
 8002882:	4770      	bx	lr
