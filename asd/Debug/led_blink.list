
led_blink.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002698  080000b8  080000b8  000010b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08002750  08002750  00003750  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080027e4  080027e4  0000400c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080027e4  080027e4  0000400c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080027e4  080027e4  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080027e4  080027e4  000037e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080027e8  080027e8  000037e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080027ec  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000070  2000000c  080027f8  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000007c  080027f8  0000407c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009248  00000000  00000000  00004034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000182a  00000000  00000000  0000d27c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a08  00000000  00000000  0000eaa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007c6  00000000  00000000  0000f4b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013d8b  00000000  00000000  0000fc76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b275  00000000  00000000  00023a01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008078d  00000000  00000000  0002ec76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000af403  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000023dc  00000000  00000000  000af448  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  000b1824  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	@ (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	@ (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	@ (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000000c 	.word	0x2000000c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08002738 	.word	0x08002738

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	@ (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	@ (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	@ (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			@ (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000010 	.word	0x20000010
 80000fc:	08002738 	.word	0x08002738

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	@ 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f806 	bl	8000214 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			@ (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__aeabi_idiv0>:
 8000214:	4770      	bx	lr
 8000216:	46c0      	nop			@ (mov r8, r8)

08000218 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800021c:	f000 fa68 	bl	80006f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000220:	f000 f80c 	bl	800023c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000224:	f000 f8d4 	bl	80003d0 <MX_GPIO_Init>
  MX_TIM3_Init();
 8000228:	f000 f850 	bl	80002cc <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);   // TIM3 interrupt başlat
 800022c:	4b02      	ldr	r3, [pc, #8]	@ (8000238 <main+0x20>)
 800022e:	0018      	movs	r0, r3
 8000230:	f001 fa76 	bl	8001720 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000234:	46c0      	nop			@ (mov r8, r8)
 8000236:	e7fd      	b.n	8000234 <main+0x1c>
 8000238:	20000028 	.word	0x20000028

0800023c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800023c:	b590      	push	{r4, r7, lr}
 800023e:	b093      	sub	sp, #76	@ 0x4c
 8000240:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000242:	2414      	movs	r4, #20
 8000244:	193b      	adds	r3, r7, r4
 8000246:	0018      	movs	r0, r3
 8000248:	2334      	movs	r3, #52	@ 0x34
 800024a:	001a      	movs	r2, r3
 800024c:	2100      	movs	r1, #0
 800024e:	f002 fa47 	bl	80026e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000252:	1d3b      	adds	r3, r7, #4
 8000254:	0018      	movs	r0, r3
 8000256:	2310      	movs	r3, #16
 8000258:	001a      	movs	r2, r3
 800025a:	2100      	movs	r1, #0
 800025c:	f002 fa40 	bl	80026e0 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000260:	2380      	movs	r3, #128	@ 0x80
 8000262:	009b      	lsls	r3, r3, #2
 8000264:	0018      	movs	r0, r3
 8000266:	f000 fd29 	bl	8000cbc <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800026a:	193b      	adds	r3, r7, r4
 800026c:	2202      	movs	r2, #2
 800026e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000270:	193b      	adds	r3, r7, r4
 8000272:	2280      	movs	r2, #128	@ 0x80
 8000274:	0052      	lsls	r2, r2, #1
 8000276:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000278:	193b      	adds	r3, r7, r4
 800027a:	2200      	movs	r2, #0
 800027c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800027e:	193b      	adds	r3, r7, r4
 8000280:	2240      	movs	r2, #64	@ 0x40
 8000282:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000284:	193b      	adds	r3, r7, r4
 8000286:	2200      	movs	r2, #0
 8000288:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800028a:	193b      	adds	r3, r7, r4
 800028c:	0018      	movs	r0, r3
 800028e:	f000 fd55 	bl	8000d3c <HAL_RCC_OscConfig>
 8000292:	1e03      	subs	r3, r0, #0
 8000294:	d001      	beq.n	800029a <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000296:	f000 f8fb 	bl	8000490 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800029a:	1d3b      	adds	r3, r7, #4
 800029c:	2207      	movs	r2, #7
 800029e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002a0:	1d3b      	adds	r3, r7, #4
 80002a2:	2200      	movs	r2, #0
 80002a4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002a6:	1d3b      	adds	r3, r7, #4
 80002a8:	2200      	movs	r2, #0
 80002aa:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002ac:	1d3b      	adds	r3, r7, #4
 80002ae:	2200      	movs	r2, #0
 80002b0:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002b2:	1d3b      	adds	r3, r7, #4
 80002b4:	2100      	movs	r1, #0
 80002b6:	0018      	movs	r0, r3
 80002b8:	f001 f850 	bl	800135c <HAL_RCC_ClockConfig>
 80002bc:	1e03      	subs	r3, r0, #0
 80002be:	d001      	beq.n	80002c4 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80002c0:	f000 f8e6 	bl	8000490 <Error_Handler>
  }
}
 80002c4:	46c0      	nop			@ (mov r8, r8)
 80002c6:	46bd      	mov	sp, r7
 80002c8:	b013      	add	sp, #76	@ 0x4c
 80002ca:	bd90      	pop	{r4, r7, pc}

080002cc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	b08e      	sub	sp, #56	@ 0x38
 80002d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80002d2:	2328      	movs	r3, #40	@ 0x28
 80002d4:	18fb      	adds	r3, r7, r3
 80002d6:	0018      	movs	r0, r3
 80002d8:	2310      	movs	r3, #16
 80002da:	001a      	movs	r2, r3
 80002dc:	2100      	movs	r1, #0
 80002de:	f002 f9ff 	bl	80026e0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002e2:	231c      	movs	r3, #28
 80002e4:	18fb      	adds	r3, r7, r3
 80002e6:	0018      	movs	r0, r3
 80002e8:	230c      	movs	r3, #12
 80002ea:	001a      	movs	r2, r3
 80002ec:	2100      	movs	r1, #0
 80002ee:	f002 f9f7 	bl	80026e0 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80002f2:	003b      	movs	r3, r7
 80002f4:	0018      	movs	r0, r3
 80002f6:	231c      	movs	r3, #28
 80002f8:	001a      	movs	r2, r3
 80002fa:	2100      	movs	r1, #0
 80002fc:	f002 f9f0 	bl	80026e0 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000300:	4b2f      	ldr	r3, [pc, #188]	@ (80003c0 <MX_TIM3_Init+0xf4>)
 8000302:	4a30      	ldr	r2, [pc, #192]	@ (80003c4 <MX_TIM3_Init+0xf8>)
 8000304:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 15999;
 8000306:	4b2e      	ldr	r3, [pc, #184]	@ (80003c0 <MX_TIM3_Init+0xf4>)
 8000308:	4a2f      	ldr	r2, [pc, #188]	@ (80003c8 <MX_TIM3_Init+0xfc>)
 800030a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800030c:	4b2c      	ldr	r3, [pc, #176]	@ (80003c0 <MX_TIM3_Init+0xf4>)
 800030e:	2200      	movs	r2, #0
 8000310:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8000312:	4b2b      	ldr	r3, [pc, #172]	@ (80003c0 <MX_TIM3_Init+0xf4>)
 8000314:	4a2d      	ldr	r2, [pc, #180]	@ (80003cc <MX_TIM3_Init+0x100>)
 8000316:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000318:	4b29      	ldr	r3, [pc, #164]	@ (80003c0 <MX_TIM3_Init+0xf4>)
 800031a:	2200      	movs	r2, #0
 800031c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800031e:	4b28      	ldr	r3, [pc, #160]	@ (80003c0 <MX_TIM3_Init+0xf4>)
 8000320:	2200      	movs	r2, #0
 8000322:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000324:	4b26      	ldr	r3, [pc, #152]	@ (80003c0 <MX_TIM3_Init+0xf4>)
 8000326:	0018      	movs	r0, r3
 8000328:	f001 f9a2 	bl	8001670 <HAL_TIM_Base_Init>
 800032c:	1e03      	subs	r3, r0, #0
 800032e:	d001      	beq.n	8000334 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000330:	f000 f8ae 	bl	8000490 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000334:	2128      	movs	r1, #40	@ 0x28
 8000336:	187b      	adds	r3, r7, r1
 8000338:	2280      	movs	r2, #128	@ 0x80
 800033a:	0152      	lsls	r2, r2, #5
 800033c:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800033e:	187a      	adds	r2, r7, r1
 8000340:	4b1f      	ldr	r3, [pc, #124]	@ (80003c0 <MX_TIM3_Init+0xf4>)
 8000342:	0011      	movs	r1, r2
 8000344:	0018      	movs	r0, r3
 8000346:	f001 fca1 	bl	8001c8c <HAL_TIM_ConfigClockSource>
 800034a:	1e03      	subs	r3, r0, #0
 800034c:	d001      	beq.n	8000352 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 800034e:	f000 f89f 	bl	8000490 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000352:	4b1b      	ldr	r3, [pc, #108]	@ (80003c0 <MX_TIM3_Init+0xf4>)
 8000354:	0018      	movs	r0, r3
 8000356:	f001 fa31 	bl	80017bc <HAL_TIM_PWM_Init>
 800035a:	1e03      	subs	r3, r0, #0
 800035c:	d001      	beq.n	8000362 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 800035e:	f000 f897 	bl	8000490 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000362:	211c      	movs	r1, #28
 8000364:	187b      	adds	r3, r7, r1
 8000366:	2200      	movs	r2, #0
 8000368:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800036a:	187b      	adds	r3, r7, r1
 800036c:	2200      	movs	r2, #0
 800036e:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000370:	187a      	adds	r2, r7, r1
 8000372:	4b13      	ldr	r3, [pc, #76]	@ (80003c0 <MX_TIM3_Init+0xf4>)
 8000374:	0011      	movs	r1, r2
 8000376:	0018      	movs	r0, r3
 8000378:	f002 f938 	bl	80025ec <HAL_TIMEx_MasterConfigSynchronization>
 800037c:	1e03      	subs	r3, r0, #0
 800037e:	d001      	beq.n	8000384 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 8000380:	f000 f886 	bl	8000490 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000384:	003b      	movs	r3, r7
 8000386:	2260      	movs	r2, #96	@ 0x60
 8000388:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800038a:	003b      	movs	r3, r7
 800038c:	2200      	movs	r2, #0
 800038e:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000390:	003b      	movs	r3, r7
 8000392:	2200      	movs	r2, #0
 8000394:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000396:	003b      	movs	r3, r7
 8000398:	2200      	movs	r2, #0
 800039a:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800039c:	0039      	movs	r1, r7
 800039e:	4b08      	ldr	r3, [pc, #32]	@ (80003c0 <MX_TIM3_Init+0xf4>)
 80003a0:	2200      	movs	r2, #0
 80003a2:	0018      	movs	r0, r3
 80003a4:	f001 fb72 	bl	8001a8c <HAL_TIM_PWM_ConfigChannel>
 80003a8:	1e03      	subs	r3, r0, #0
 80003aa:	d001      	beq.n	80003b0 <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 80003ac:	f000 f870 	bl	8000490 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80003b0:	4b03      	ldr	r3, [pc, #12]	@ (80003c0 <MX_TIM3_Init+0xf4>)
 80003b2:	0018      	movs	r0, r3
 80003b4:	f000 f8bc 	bl	8000530 <HAL_TIM_MspPostInit>

}
 80003b8:	46c0      	nop			@ (mov r8, r8)
 80003ba:	46bd      	mov	sp, r7
 80003bc:	b00e      	add	sp, #56	@ 0x38
 80003be:	bd80      	pop	{r7, pc}
 80003c0:	20000028 	.word	0x20000028
 80003c4:	40000400 	.word	0x40000400
 80003c8:	00003e7f 	.word	0x00003e7f
 80003cc:	000003e7 	.word	0x000003e7

080003d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003d0:	b590      	push	{r4, r7, lr}
 80003d2:	b089      	sub	sp, #36	@ 0x24
 80003d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003d6:	240c      	movs	r4, #12
 80003d8:	193b      	adds	r3, r7, r4
 80003da:	0018      	movs	r0, r3
 80003dc:	2314      	movs	r3, #20
 80003de:	001a      	movs	r2, r3
 80003e0:	2100      	movs	r1, #0
 80003e2:	f002 f97d 	bl	80026e0 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003e6:	4b28      	ldr	r3, [pc, #160]	@ (8000488 <MX_GPIO_Init+0xb8>)
 80003e8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80003ea:	4b27      	ldr	r3, [pc, #156]	@ (8000488 <MX_GPIO_Init+0xb8>)
 80003ec:	2101      	movs	r1, #1
 80003ee:	430a      	orrs	r2, r1
 80003f0:	635a      	str	r2, [r3, #52]	@ 0x34
 80003f2:	4b25      	ldr	r3, [pc, #148]	@ (8000488 <MX_GPIO_Init+0xb8>)
 80003f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80003f6:	2201      	movs	r2, #1
 80003f8:	4013      	ands	r3, r2
 80003fa:	60bb      	str	r3, [r7, #8]
 80003fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003fe:	4b22      	ldr	r3, [pc, #136]	@ (8000488 <MX_GPIO_Init+0xb8>)
 8000400:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000402:	4b21      	ldr	r3, [pc, #132]	@ (8000488 <MX_GPIO_Init+0xb8>)
 8000404:	2102      	movs	r1, #2
 8000406:	430a      	orrs	r2, r1
 8000408:	635a      	str	r2, [r3, #52]	@ 0x34
 800040a:	4b1f      	ldr	r3, [pc, #124]	@ (8000488 <MX_GPIO_Init+0xb8>)
 800040c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800040e:	2202      	movs	r2, #2
 8000410:	4013      	ands	r3, r2
 8000412:	607b      	str	r3, [r7, #4]
 8000414:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8000416:	23f0      	movs	r3, #240	@ 0xf0
 8000418:	01d9      	lsls	r1, r3, #7
 800041a:	23a0      	movs	r3, #160	@ 0xa0
 800041c:	05db      	lsls	r3, r3, #23
 800041e:	2200      	movs	r2, #0
 8000420:	0018      	movs	r0, r3
 8000422:	f000 fc2d 	bl	8000c80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8000426:	4b19      	ldr	r3, [pc, #100]	@ (800048c <MX_GPIO_Init+0xbc>)
 8000428:	2200      	movs	r2, #0
 800042a:	2108      	movs	r1, #8
 800042c:	0018      	movs	r0, r3
 800042e:	f000 fc27 	bl	8000c80 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA11 PA12 PA13 PA14 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8000432:	193b      	adds	r3, r7, r4
 8000434:	22f0      	movs	r2, #240	@ 0xf0
 8000436:	01d2      	lsls	r2, r2, #7
 8000438:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800043a:	193b      	adds	r3, r7, r4
 800043c:	2201      	movs	r2, #1
 800043e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000440:	193b      	adds	r3, r7, r4
 8000442:	2200      	movs	r2, #0
 8000444:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000446:	193b      	adds	r3, r7, r4
 8000448:	2200      	movs	r2, #0
 800044a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800044c:	193a      	adds	r2, r7, r4
 800044e:	23a0      	movs	r3, #160	@ 0xa0
 8000450:	05db      	lsls	r3, r3, #23
 8000452:	0011      	movs	r1, r2
 8000454:	0018      	movs	r0, r3
 8000456:	f000 faaf 	bl	80009b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800045a:	0021      	movs	r1, r4
 800045c:	187b      	adds	r3, r7, r1
 800045e:	2208      	movs	r2, #8
 8000460:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000462:	187b      	adds	r3, r7, r1
 8000464:	2201      	movs	r2, #1
 8000466:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000468:	187b      	adds	r3, r7, r1
 800046a:	2200      	movs	r2, #0
 800046c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800046e:	187b      	adds	r3, r7, r1
 8000470:	2200      	movs	r2, #0
 8000472:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000474:	187b      	adds	r3, r7, r1
 8000476:	4a05      	ldr	r2, [pc, #20]	@ (800048c <MX_GPIO_Init+0xbc>)
 8000478:	0019      	movs	r1, r3
 800047a:	0010      	movs	r0, r2
 800047c:	f000 fa9c 	bl	80009b8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000480:	46c0      	nop			@ (mov r8, r8)
 8000482:	46bd      	mov	sp, r7
 8000484:	b009      	add	sp, #36	@ 0x24
 8000486:	bd90      	pop	{r4, r7, pc}
 8000488:	40021000 	.word	0x40021000
 800048c:	50000400 	.word	0x50000400

08000490 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000490:	b580      	push	{r7, lr}
 8000492:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000494:	b672      	cpsid	i
}
 8000496:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000498:	46c0      	nop			@ (mov r8, r8)
 800049a:	e7fd      	b.n	8000498 <Error_Handler+0x8>

0800049c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	b082      	sub	sp, #8
 80004a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004a2:	4b0f      	ldr	r3, [pc, #60]	@ (80004e0 <HAL_MspInit+0x44>)
 80004a4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80004a6:	4b0e      	ldr	r3, [pc, #56]	@ (80004e0 <HAL_MspInit+0x44>)
 80004a8:	2101      	movs	r1, #1
 80004aa:	430a      	orrs	r2, r1
 80004ac:	641a      	str	r2, [r3, #64]	@ 0x40
 80004ae:	4b0c      	ldr	r3, [pc, #48]	@ (80004e0 <HAL_MspInit+0x44>)
 80004b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80004b2:	2201      	movs	r2, #1
 80004b4:	4013      	ands	r3, r2
 80004b6:	607b      	str	r3, [r7, #4]
 80004b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004ba:	4b09      	ldr	r3, [pc, #36]	@ (80004e0 <HAL_MspInit+0x44>)
 80004bc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80004be:	4b08      	ldr	r3, [pc, #32]	@ (80004e0 <HAL_MspInit+0x44>)
 80004c0:	2180      	movs	r1, #128	@ 0x80
 80004c2:	0549      	lsls	r1, r1, #21
 80004c4:	430a      	orrs	r2, r1
 80004c6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80004c8:	4b05      	ldr	r3, [pc, #20]	@ (80004e0 <HAL_MspInit+0x44>)
 80004ca:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80004cc:	2380      	movs	r3, #128	@ 0x80
 80004ce:	055b      	lsls	r3, r3, #21
 80004d0:	4013      	ands	r3, r2
 80004d2:	603b      	str	r3, [r7, #0]
 80004d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004d6:	46c0      	nop			@ (mov r8, r8)
 80004d8:	46bd      	mov	sp, r7
 80004da:	b002      	add	sp, #8
 80004dc:	bd80      	pop	{r7, pc}
 80004de:	46c0      	nop			@ (mov r8, r8)
 80004e0:	40021000 	.word	0x40021000

080004e4 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b084      	sub	sp, #16
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	4a0d      	ldr	r2, [pc, #52]	@ (8000528 <HAL_TIM_Base_MspInit+0x44>)
 80004f2:	4293      	cmp	r3, r2
 80004f4:	d113      	bne.n	800051e <HAL_TIM_Base_MspInit+0x3a>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80004f6:	4b0d      	ldr	r3, [pc, #52]	@ (800052c <HAL_TIM_Base_MspInit+0x48>)
 80004f8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80004fa:	4b0c      	ldr	r3, [pc, #48]	@ (800052c <HAL_TIM_Base_MspInit+0x48>)
 80004fc:	2102      	movs	r1, #2
 80004fe:	430a      	orrs	r2, r1
 8000500:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000502:	4b0a      	ldr	r3, [pc, #40]	@ (800052c <HAL_TIM_Base_MspInit+0x48>)
 8000504:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000506:	2202      	movs	r2, #2
 8000508:	4013      	ands	r3, r2
 800050a:	60fb      	str	r3, [r7, #12]
 800050c:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800050e:	2200      	movs	r2, #0
 8000510:	2100      	movs	r1, #0
 8000512:	2010      	movs	r0, #16
 8000514:	f000 fa1e 	bl	8000954 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000518:	2010      	movs	r0, #16
 800051a:	f000 fa30 	bl	800097e <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 800051e:	46c0      	nop			@ (mov r8, r8)
 8000520:	46bd      	mov	sp, r7
 8000522:	b004      	add	sp, #16
 8000524:	bd80      	pop	{r7, pc}
 8000526:	46c0      	nop			@ (mov r8, r8)
 8000528:	40000400 	.word	0x40000400
 800052c:	40021000 	.word	0x40021000

08000530 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000530:	b590      	push	{r4, r7, lr}
 8000532:	b089      	sub	sp, #36	@ 0x24
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000538:	240c      	movs	r4, #12
 800053a:	193b      	adds	r3, r7, r4
 800053c:	0018      	movs	r0, r3
 800053e:	2314      	movs	r3, #20
 8000540:	001a      	movs	r2, r3
 8000542:	2100      	movs	r1, #0
 8000544:	f002 f8cc 	bl	80026e0 <memset>
  if(htim->Instance==TIM3)
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	4a14      	ldr	r2, [pc, #80]	@ (80005a0 <HAL_TIM_MspPostInit+0x70>)
 800054e:	4293      	cmp	r3, r2
 8000550:	d122      	bne.n	8000598 <HAL_TIM_MspPostInit+0x68>
  {
    /* USER CODE BEGIN TIM3_MspPostInit 0 */

    /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000552:	4b14      	ldr	r3, [pc, #80]	@ (80005a4 <HAL_TIM_MspPostInit+0x74>)
 8000554:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000556:	4b13      	ldr	r3, [pc, #76]	@ (80005a4 <HAL_TIM_MspPostInit+0x74>)
 8000558:	2101      	movs	r1, #1
 800055a:	430a      	orrs	r2, r1
 800055c:	635a      	str	r2, [r3, #52]	@ 0x34
 800055e:	4b11      	ldr	r3, [pc, #68]	@ (80005a4 <HAL_TIM_MspPostInit+0x74>)
 8000560:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000562:	2201      	movs	r2, #1
 8000564:	4013      	ands	r3, r2
 8000566:	60bb      	str	r3, [r7, #8]
 8000568:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800056a:	0021      	movs	r1, r4
 800056c:	187b      	adds	r3, r7, r1
 800056e:	2240      	movs	r2, #64	@ 0x40
 8000570:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000572:	187b      	adds	r3, r7, r1
 8000574:	2202      	movs	r2, #2
 8000576:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000578:	187b      	adds	r3, r7, r1
 800057a:	2200      	movs	r2, #0
 800057c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800057e:	187b      	adds	r3, r7, r1
 8000580:	2200      	movs	r2, #0
 8000582:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8000584:	187b      	adds	r3, r7, r1
 8000586:	2201      	movs	r2, #1
 8000588:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800058a:	187a      	adds	r2, r7, r1
 800058c:	23a0      	movs	r3, #160	@ 0xa0
 800058e:	05db      	lsls	r3, r3, #23
 8000590:	0011      	movs	r1, r2
 8000592:	0018      	movs	r0, r3
 8000594:	f000 fa10 	bl	80009b8 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000598:	46c0      	nop			@ (mov r8, r8)
 800059a:	46bd      	mov	sp, r7
 800059c:	b009      	add	sp, #36	@ 0x24
 800059e:	bd90      	pop	{r4, r7, pc}
 80005a0:	40000400 	.word	0x40000400
 80005a4:	40021000 	.word	0x40021000

080005a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80005ac:	46c0      	nop			@ (mov r8, r8)
 80005ae:	e7fd      	b.n	80005ac <NMI_Handler+0x4>

080005b0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005b4:	46c0      	nop			@ (mov r8, r8)
 80005b6:	e7fd      	b.n	80005b4 <HardFault_Handler+0x4>

080005b8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80005bc:	46c0      	nop			@ (mov r8, r8)
 80005be:	46bd      	mov	sp, r7
 80005c0:	bd80      	pop	{r7, pc}

080005c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005c2:	b580      	push	{r7, lr}
 80005c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005c6:	46c0      	nop			@ (mov r8, r8)
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}

080005cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005d0:	f000 f8f8 	bl	80007c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005d4:	46c0      	nop			@ (mov r8, r8)
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}
	...

080005dc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
  static uint8_t step = 0;  // Hangi LED yanacak, hafızada tutulur

  // Tüm LED’leri söndür (önce kapatıyoruz ki sadece biri yansın)
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 80005e0:	23e0      	movs	r3, #224	@ 0xe0
 80005e2:	0199      	lsls	r1, r3, #6
 80005e4:	23a0      	movs	r3, #160	@ 0xa0
 80005e6:	05db      	lsls	r3, r3, #23
 80005e8:	2200      	movs	r2, #0
 80005ea:	0018      	movs	r0, r3
 80005ec:	f000 fb48 	bl	8000c80 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 80005f0:	4b24      	ldr	r3, [pc, #144]	@ (8000684 <TIM3_IRQHandler+0xa8>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	2108      	movs	r1, #8
 80005f6:	0018      	movs	r0, r3
 80005f8:	f000 fb42 	bl	8000c80 <HAL_GPIO_WritePin>

  // Sıradaki LED’i yak
  switch(step)
 80005fc:	4b22      	ldr	r3, [pc, #136]	@ (8000688 <TIM3_IRQHandler+0xac>)
 80005fe:	781b      	ldrb	r3, [r3, #0]
 8000600:	2b03      	cmp	r3, #3
 8000602:	d021      	beq.n	8000648 <TIM3_IRQHandler+0x6c>
 8000604:	dc29      	bgt.n	800065a <TIM3_IRQHandler+0x7e>
 8000606:	2b02      	cmp	r3, #2
 8000608:	d017      	beq.n	800063a <TIM3_IRQHandler+0x5e>
 800060a:	dc26      	bgt.n	800065a <TIM3_IRQHandler+0x7e>
 800060c:	2b00      	cmp	r3, #0
 800060e:	d002      	beq.n	8000616 <TIM3_IRQHandler+0x3a>
 8000610:	2b01      	cmp	r3, #1
 8000612:	d009      	beq.n	8000628 <TIM3_IRQHandler+0x4c>
 8000614:	e021      	b.n	800065a <TIM3_IRQHandler+0x7e>
  {
    case 0: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_13, GPIO_PIN_SET); break;
 8000616:	2380      	movs	r3, #128	@ 0x80
 8000618:	0199      	lsls	r1, r3, #6
 800061a:	23a0      	movs	r3, #160	@ 0xa0
 800061c:	05db      	lsls	r3, r3, #23
 800061e:	2201      	movs	r2, #1
 8000620:	0018      	movs	r0, r3
 8000622:	f000 fb2d 	bl	8000c80 <HAL_GPIO_WritePin>
 8000626:	e018      	b.n	800065a <TIM3_IRQHandler+0x7e>
    case 1: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET); break;
 8000628:	2380      	movs	r3, #128	@ 0x80
 800062a:	0159      	lsls	r1, r3, #5
 800062c:	23a0      	movs	r3, #160	@ 0xa0
 800062e:	05db      	lsls	r3, r3, #23
 8000630:	2201      	movs	r2, #1
 8000632:	0018      	movs	r0, r3
 8000634:	f000 fb24 	bl	8000c80 <HAL_GPIO_WritePin>
 8000638:	e00f      	b.n	800065a <TIM3_IRQHandler+0x7e>
    case 2: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET); break;
 800063a:	4b12      	ldr	r3, [pc, #72]	@ (8000684 <TIM3_IRQHandler+0xa8>)
 800063c:	2201      	movs	r2, #1
 800063e:	2108      	movs	r1, #8
 8000640:	0018      	movs	r0, r3
 8000642:	f000 fb1d 	bl	8000c80 <HAL_GPIO_WritePin>
 8000646:	e008      	b.n	800065a <TIM3_IRQHandler+0x7e>
    case 3: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11,  GPIO_PIN_SET); break;
 8000648:	2380      	movs	r3, #128	@ 0x80
 800064a:	0119      	lsls	r1, r3, #4
 800064c:	23a0      	movs	r3, #160	@ 0xa0
 800064e:	05db      	lsls	r3, r3, #23
 8000650:	2201      	movs	r2, #1
 8000652:	0018      	movs	r0, r3
 8000654:	f000 fb14 	bl	8000c80 <HAL_GPIO_WritePin>
 8000658:	46c0      	nop			@ (mov r8, r8)
  }

  // Bir sonraki adıma geç
  step++;
 800065a:	4b0b      	ldr	r3, [pc, #44]	@ (8000688 <TIM3_IRQHandler+0xac>)
 800065c:	781b      	ldrb	r3, [r3, #0]
 800065e:	3301      	adds	r3, #1
 8000660:	b2da      	uxtb	r2, r3
 8000662:	4b09      	ldr	r3, [pc, #36]	@ (8000688 <TIM3_IRQHandler+0xac>)
 8000664:	701a      	strb	r2, [r3, #0]
  if(step > 3) step = 0;   // 4 LED’den sonra tekrar başa dön
 8000666:	4b08      	ldr	r3, [pc, #32]	@ (8000688 <TIM3_IRQHandler+0xac>)
 8000668:	781b      	ldrb	r3, [r3, #0]
 800066a:	2b03      	cmp	r3, #3
 800066c:	d902      	bls.n	8000674 <TIM3_IRQHandler+0x98>
 800066e:	4b06      	ldr	r3, [pc, #24]	@ (8000688 <TIM3_IRQHandler+0xac>)
 8000670:	2200      	movs	r2, #0
 8000672:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM3_IRQn 0 */

  HAL_TIM_IRQHandler(&htim3);
 8000674:	4b05      	ldr	r3, [pc, #20]	@ (800068c <TIM3_IRQHandler+0xb0>)
 8000676:	0018      	movs	r0, r3
 8000678:	f001 f900 	bl	800187c <HAL_TIM_IRQHandler>

  /* USER CODE BEGIN TIM3_IRQn 1 */
  /* USER CODE END TIM3_IRQn 1 */
}
 800067c:	46c0      	nop			@ (mov r8, r8)
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
 8000682:	46c0      	nop			@ (mov r8, r8)
 8000684:	50000400 	.word	0x50000400
 8000688:	20000074 	.word	0x20000074
 800068c:	20000028 	.word	0x20000028

08000690 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000694:	46c0      	nop			@ (mov r8, r8)
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
	...

0800069c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800069c:	480d      	ldr	r0, [pc, #52]	@ (80006d4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800069e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80006a0:	f7ff fff6 	bl	8000690 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006a4:	480c      	ldr	r0, [pc, #48]	@ (80006d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80006a6:	490d      	ldr	r1, [pc, #52]	@ (80006dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80006a8:	4a0d      	ldr	r2, [pc, #52]	@ (80006e0 <LoopForever+0xe>)
  movs r3, #0
 80006aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006ac:	e002      	b.n	80006b4 <LoopCopyDataInit>

080006ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006b2:	3304      	adds	r3, #4

080006b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006b8:	d3f9      	bcc.n	80006ae <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006ba:	4a0a      	ldr	r2, [pc, #40]	@ (80006e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006bc:	4c0a      	ldr	r4, [pc, #40]	@ (80006e8 <LoopForever+0x16>)
  movs r3, #0
 80006be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006c0:	e001      	b.n	80006c6 <LoopFillZerobss>

080006c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006c4:	3204      	adds	r2, #4

080006c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006c8:	d3fb      	bcc.n	80006c2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80006ca:	f002 f811 	bl	80026f0 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80006ce:	f7ff fda3 	bl	8000218 <main>

080006d2 <LoopForever>:

LoopForever:
  b LoopForever
 80006d2:	e7fe      	b.n	80006d2 <LoopForever>
  ldr   r0, =_estack
 80006d4:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80006d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006dc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80006e0:	080027ec 	.word	0x080027ec
  ldr r2, =_sbss
 80006e4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80006e8:	2000007c 	.word	0x2000007c

080006ec <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006ec:	e7fe      	b.n	80006ec <ADC1_IRQHandler>
	...

080006f0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b082      	sub	sp, #8
 80006f4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80006f6:	1dfb      	adds	r3, r7, #7
 80006f8:	2200      	movs	r2, #0
 80006fa:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006fc:	4b0b      	ldr	r3, [pc, #44]	@ (800072c <HAL_Init+0x3c>)
 80006fe:	681a      	ldr	r2, [r3, #0]
 8000700:	4b0a      	ldr	r3, [pc, #40]	@ (800072c <HAL_Init+0x3c>)
 8000702:	2180      	movs	r1, #128	@ 0x80
 8000704:	0049      	lsls	r1, r1, #1
 8000706:	430a      	orrs	r2, r1
 8000708:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800070a:	2003      	movs	r0, #3
 800070c:	f000 f810 	bl	8000730 <HAL_InitTick>
 8000710:	1e03      	subs	r3, r0, #0
 8000712:	d003      	beq.n	800071c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000714:	1dfb      	adds	r3, r7, #7
 8000716:	2201      	movs	r2, #1
 8000718:	701a      	strb	r2, [r3, #0]
 800071a:	e001      	b.n	8000720 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 800071c:	f7ff febe 	bl	800049c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000720:	1dfb      	adds	r3, r7, #7
 8000722:	781b      	ldrb	r3, [r3, #0]
}
 8000724:	0018      	movs	r0, r3
 8000726:	46bd      	mov	sp, r7
 8000728:	b002      	add	sp, #8
 800072a:	bd80      	pop	{r7, pc}
 800072c:	40022000 	.word	0x40022000

08000730 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000730:	b590      	push	{r4, r7, lr}
 8000732:	b085      	sub	sp, #20
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000738:	230f      	movs	r3, #15
 800073a:	18fb      	adds	r3, r7, r3
 800073c:	2200      	movs	r2, #0
 800073e:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000740:	4b1d      	ldr	r3, [pc, #116]	@ (80007b8 <HAL_InitTick+0x88>)
 8000742:	781b      	ldrb	r3, [r3, #0]
 8000744:	2b00      	cmp	r3, #0
 8000746:	d02b      	beq.n	80007a0 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000748:	4b1c      	ldr	r3, [pc, #112]	@ (80007bc <HAL_InitTick+0x8c>)
 800074a:	681c      	ldr	r4, [r3, #0]
 800074c:	4b1a      	ldr	r3, [pc, #104]	@ (80007b8 <HAL_InitTick+0x88>)
 800074e:	781b      	ldrb	r3, [r3, #0]
 8000750:	0019      	movs	r1, r3
 8000752:	23fa      	movs	r3, #250	@ 0xfa
 8000754:	0098      	lsls	r0, r3, #2
 8000756:	f7ff fcd3 	bl	8000100 <__udivsi3>
 800075a:	0003      	movs	r3, r0
 800075c:	0019      	movs	r1, r3
 800075e:	0020      	movs	r0, r4
 8000760:	f7ff fcce 	bl	8000100 <__udivsi3>
 8000764:	0003      	movs	r3, r0
 8000766:	0018      	movs	r0, r3
 8000768:	f000 f919 	bl	800099e <HAL_SYSTICK_Config>
 800076c:	1e03      	subs	r3, r0, #0
 800076e:	d112      	bne.n	8000796 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	2b03      	cmp	r3, #3
 8000774:	d80a      	bhi.n	800078c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000776:	6879      	ldr	r1, [r7, #4]
 8000778:	2301      	movs	r3, #1
 800077a:	425b      	negs	r3, r3
 800077c:	2200      	movs	r2, #0
 800077e:	0018      	movs	r0, r3
 8000780:	f000 f8e8 	bl	8000954 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000784:	4b0e      	ldr	r3, [pc, #56]	@ (80007c0 <HAL_InitTick+0x90>)
 8000786:	687a      	ldr	r2, [r7, #4]
 8000788:	601a      	str	r2, [r3, #0]
 800078a:	e00d      	b.n	80007a8 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 800078c:	230f      	movs	r3, #15
 800078e:	18fb      	adds	r3, r7, r3
 8000790:	2201      	movs	r2, #1
 8000792:	701a      	strb	r2, [r3, #0]
 8000794:	e008      	b.n	80007a8 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000796:	230f      	movs	r3, #15
 8000798:	18fb      	adds	r3, r7, r3
 800079a:	2201      	movs	r2, #1
 800079c:	701a      	strb	r2, [r3, #0]
 800079e:	e003      	b.n	80007a8 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80007a0:	230f      	movs	r3, #15
 80007a2:	18fb      	adds	r3, r7, r3
 80007a4:	2201      	movs	r2, #1
 80007a6:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80007a8:	230f      	movs	r3, #15
 80007aa:	18fb      	adds	r3, r7, r3
 80007ac:	781b      	ldrb	r3, [r3, #0]
}
 80007ae:	0018      	movs	r0, r3
 80007b0:	46bd      	mov	sp, r7
 80007b2:	b005      	add	sp, #20
 80007b4:	bd90      	pop	{r4, r7, pc}
 80007b6:	46c0      	nop			@ (mov r8, r8)
 80007b8:	20000008 	.word	0x20000008
 80007bc:	20000000 	.word	0x20000000
 80007c0:	20000004 	.word	0x20000004

080007c4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80007c8:	4b05      	ldr	r3, [pc, #20]	@ (80007e0 <HAL_IncTick+0x1c>)
 80007ca:	781b      	ldrb	r3, [r3, #0]
 80007cc:	001a      	movs	r2, r3
 80007ce:	4b05      	ldr	r3, [pc, #20]	@ (80007e4 <HAL_IncTick+0x20>)
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	18d2      	adds	r2, r2, r3
 80007d4:	4b03      	ldr	r3, [pc, #12]	@ (80007e4 <HAL_IncTick+0x20>)
 80007d6:	601a      	str	r2, [r3, #0]
}
 80007d8:	46c0      	nop			@ (mov r8, r8)
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	46c0      	nop			@ (mov r8, r8)
 80007e0:	20000008 	.word	0x20000008
 80007e4:	20000078 	.word	0x20000078

080007e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
  return uwTick;
 80007ec:	4b02      	ldr	r3, [pc, #8]	@ (80007f8 <HAL_GetTick+0x10>)
 80007ee:	681b      	ldr	r3, [r3, #0]
}
 80007f0:	0018      	movs	r0, r3
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	46c0      	nop			@ (mov r8, r8)
 80007f8:	20000078 	.word	0x20000078

080007fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b082      	sub	sp, #8
 8000800:	af00      	add	r7, sp, #0
 8000802:	0002      	movs	r2, r0
 8000804:	1dfb      	adds	r3, r7, #7
 8000806:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000808:	1dfb      	adds	r3, r7, #7
 800080a:	781b      	ldrb	r3, [r3, #0]
 800080c:	2b7f      	cmp	r3, #127	@ 0x7f
 800080e:	d809      	bhi.n	8000824 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000810:	1dfb      	adds	r3, r7, #7
 8000812:	781b      	ldrb	r3, [r3, #0]
 8000814:	001a      	movs	r2, r3
 8000816:	231f      	movs	r3, #31
 8000818:	401a      	ands	r2, r3
 800081a:	4b04      	ldr	r3, [pc, #16]	@ (800082c <__NVIC_EnableIRQ+0x30>)
 800081c:	2101      	movs	r1, #1
 800081e:	4091      	lsls	r1, r2
 8000820:	000a      	movs	r2, r1
 8000822:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000824:	46c0      	nop			@ (mov r8, r8)
 8000826:	46bd      	mov	sp, r7
 8000828:	b002      	add	sp, #8
 800082a:	bd80      	pop	{r7, pc}
 800082c:	e000e100 	.word	0xe000e100

08000830 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000830:	b590      	push	{r4, r7, lr}
 8000832:	b083      	sub	sp, #12
 8000834:	af00      	add	r7, sp, #0
 8000836:	0002      	movs	r2, r0
 8000838:	6039      	str	r1, [r7, #0]
 800083a:	1dfb      	adds	r3, r7, #7
 800083c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800083e:	1dfb      	adds	r3, r7, #7
 8000840:	781b      	ldrb	r3, [r3, #0]
 8000842:	2b7f      	cmp	r3, #127	@ 0x7f
 8000844:	d828      	bhi.n	8000898 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000846:	4a2f      	ldr	r2, [pc, #188]	@ (8000904 <__NVIC_SetPriority+0xd4>)
 8000848:	1dfb      	adds	r3, r7, #7
 800084a:	781b      	ldrb	r3, [r3, #0]
 800084c:	b25b      	sxtb	r3, r3
 800084e:	089b      	lsrs	r3, r3, #2
 8000850:	33c0      	adds	r3, #192	@ 0xc0
 8000852:	009b      	lsls	r3, r3, #2
 8000854:	589b      	ldr	r3, [r3, r2]
 8000856:	1dfa      	adds	r2, r7, #7
 8000858:	7812      	ldrb	r2, [r2, #0]
 800085a:	0011      	movs	r1, r2
 800085c:	2203      	movs	r2, #3
 800085e:	400a      	ands	r2, r1
 8000860:	00d2      	lsls	r2, r2, #3
 8000862:	21ff      	movs	r1, #255	@ 0xff
 8000864:	4091      	lsls	r1, r2
 8000866:	000a      	movs	r2, r1
 8000868:	43d2      	mvns	r2, r2
 800086a:	401a      	ands	r2, r3
 800086c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800086e:	683b      	ldr	r3, [r7, #0]
 8000870:	019b      	lsls	r3, r3, #6
 8000872:	22ff      	movs	r2, #255	@ 0xff
 8000874:	401a      	ands	r2, r3
 8000876:	1dfb      	adds	r3, r7, #7
 8000878:	781b      	ldrb	r3, [r3, #0]
 800087a:	0018      	movs	r0, r3
 800087c:	2303      	movs	r3, #3
 800087e:	4003      	ands	r3, r0
 8000880:	00db      	lsls	r3, r3, #3
 8000882:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000884:	481f      	ldr	r0, [pc, #124]	@ (8000904 <__NVIC_SetPriority+0xd4>)
 8000886:	1dfb      	adds	r3, r7, #7
 8000888:	781b      	ldrb	r3, [r3, #0]
 800088a:	b25b      	sxtb	r3, r3
 800088c:	089b      	lsrs	r3, r3, #2
 800088e:	430a      	orrs	r2, r1
 8000890:	33c0      	adds	r3, #192	@ 0xc0
 8000892:	009b      	lsls	r3, r3, #2
 8000894:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000896:	e031      	b.n	80008fc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000898:	4a1b      	ldr	r2, [pc, #108]	@ (8000908 <__NVIC_SetPriority+0xd8>)
 800089a:	1dfb      	adds	r3, r7, #7
 800089c:	781b      	ldrb	r3, [r3, #0]
 800089e:	0019      	movs	r1, r3
 80008a0:	230f      	movs	r3, #15
 80008a2:	400b      	ands	r3, r1
 80008a4:	3b08      	subs	r3, #8
 80008a6:	089b      	lsrs	r3, r3, #2
 80008a8:	3306      	adds	r3, #6
 80008aa:	009b      	lsls	r3, r3, #2
 80008ac:	18d3      	adds	r3, r2, r3
 80008ae:	3304      	adds	r3, #4
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	1dfa      	adds	r2, r7, #7
 80008b4:	7812      	ldrb	r2, [r2, #0]
 80008b6:	0011      	movs	r1, r2
 80008b8:	2203      	movs	r2, #3
 80008ba:	400a      	ands	r2, r1
 80008bc:	00d2      	lsls	r2, r2, #3
 80008be:	21ff      	movs	r1, #255	@ 0xff
 80008c0:	4091      	lsls	r1, r2
 80008c2:	000a      	movs	r2, r1
 80008c4:	43d2      	mvns	r2, r2
 80008c6:	401a      	ands	r2, r3
 80008c8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80008ca:	683b      	ldr	r3, [r7, #0]
 80008cc:	019b      	lsls	r3, r3, #6
 80008ce:	22ff      	movs	r2, #255	@ 0xff
 80008d0:	401a      	ands	r2, r3
 80008d2:	1dfb      	adds	r3, r7, #7
 80008d4:	781b      	ldrb	r3, [r3, #0]
 80008d6:	0018      	movs	r0, r3
 80008d8:	2303      	movs	r3, #3
 80008da:	4003      	ands	r3, r0
 80008dc:	00db      	lsls	r3, r3, #3
 80008de:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008e0:	4809      	ldr	r0, [pc, #36]	@ (8000908 <__NVIC_SetPriority+0xd8>)
 80008e2:	1dfb      	adds	r3, r7, #7
 80008e4:	781b      	ldrb	r3, [r3, #0]
 80008e6:	001c      	movs	r4, r3
 80008e8:	230f      	movs	r3, #15
 80008ea:	4023      	ands	r3, r4
 80008ec:	3b08      	subs	r3, #8
 80008ee:	089b      	lsrs	r3, r3, #2
 80008f0:	430a      	orrs	r2, r1
 80008f2:	3306      	adds	r3, #6
 80008f4:	009b      	lsls	r3, r3, #2
 80008f6:	18c3      	adds	r3, r0, r3
 80008f8:	3304      	adds	r3, #4
 80008fa:	601a      	str	r2, [r3, #0]
}
 80008fc:	46c0      	nop			@ (mov r8, r8)
 80008fe:	46bd      	mov	sp, r7
 8000900:	b003      	add	sp, #12
 8000902:	bd90      	pop	{r4, r7, pc}
 8000904:	e000e100 	.word	0xe000e100
 8000908:	e000ed00 	.word	0xe000ed00

0800090c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b082      	sub	sp, #8
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	1e5a      	subs	r2, r3, #1
 8000918:	2380      	movs	r3, #128	@ 0x80
 800091a:	045b      	lsls	r3, r3, #17
 800091c:	429a      	cmp	r2, r3
 800091e:	d301      	bcc.n	8000924 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000920:	2301      	movs	r3, #1
 8000922:	e010      	b.n	8000946 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000924:	4b0a      	ldr	r3, [pc, #40]	@ (8000950 <SysTick_Config+0x44>)
 8000926:	687a      	ldr	r2, [r7, #4]
 8000928:	3a01      	subs	r2, #1
 800092a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800092c:	2301      	movs	r3, #1
 800092e:	425b      	negs	r3, r3
 8000930:	2103      	movs	r1, #3
 8000932:	0018      	movs	r0, r3
 8000934:	f7ff ff7c 	bl	8000830 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000938:	4b05      	ldr	r3, [pc, #20]	@ (8000950 <SysTick_Config+0x44>)
 800093a:	2200      	movs	r2, #0
 800093c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800093e:	4b04      	ldr	r3, [pc, #16]	@ (8000950 <SysTick_Config+0x44>)
 8000940:	2207      	movs	r2, #7
 8000942:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000944:	2300      	movs	r3, #0
}
 8000946:	0018      	movs	r0, r3
 8000948:	46bd      	mov	sp, r7
 800094a:	b002      	add	sp, #8
 800094c:	bd80      	pop	{r7, pc}
 800094e:	46c0      	nop			@ (mov r8, r8)
 8000950:	e000e010 	.word	0xe000e010

08000954 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b084      	sub	sp, #16
 8000958:	af00      	add	r7, sp, #0
 800095a:	60b9      	str	r1, [r7, #8]
 800095c:	607a      	str	r2, [r7, #4]
 800095e:	210f      	movs	r1, #15
 8000960:	187b      	adds	r3, r7, r1
 8000962:	1c02      	adds	r2, r0, #0
 8000964:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000966:	68ba      	ldr	r2, [r7, #8]
 8000968:	187b      	adds	r3, r7, r1
 800096a:	781b      	ldrb	r3, [r3, #0]
 800096c:	b25b      	sxtb	r3, r3
 800096e:	0011      	movs	r1, r2
 8000970:	0018      	movs	r0, r3
 8000972:	f7ff ff5d 	bl	8000830 <__NVIC_SetPriority>
}
 8000976:	46c0      	nop			@ (mov r8, r8)
 8000978:	46bd      	mov	sp, r7
 800097a:	b004      	add	sp, #16
 800097c:	bd80      	pop	{r7, pc}

0800097e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800097e:	b580      	push	{r7, lr}
 8000980:	b082      	sub	sp, #8
 8000982:	af00      	add	r7, sp, #0
 8000984:	0002      	movs	r2, r0
 8000986:	1dfb      	adds	r3, r7, #7
 8000988:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800098a:	1dfb      	adds	r3, r7, #7
 800098c:	781b      	ldrb	r3, [r3, #0]
 800098e:	b25b      	sxtb	r3, r3
 8000990:	0018      	movs	r0, r3
 8000992:	f7ff ff33 	bl	80007fc <__NVIC_EnableIRQ>
}
 8000996:	46c0      	nop			@ (mov r8, r8)
 8000998:	46bd      	mov	sp, r7
 800099a:	b002      	add	sp, #8
 800099c:	bd80      	pop	{r7, pc}

0800099e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800099e:	b580      	push	{r7, lr}
 80009a0:	b082      	sub	sp, #8
 80009a2:	af00      	add	r7, sp, #0
 80009a4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	0018      	movs	r0, r3
 80009aa:	f7ff ffaf 	bl	800090c <SysTick_Config>
 80009ae:	0003      	movs	r3, r0
}
 80009b0:	0018      	movs	r0, r3
 80009b2:	46bd      	mov	sp, r7
 80009b4:	b002      	add	sp, #8
 80009b6:	bd80      	pop	{r7, pc}

080009b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b086      	sub	sp, #24
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
 80009c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80009c2:	2300      	movs	r3, #0
 80009c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80009c6:	e147      	b.n	8000c58 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80009c8:	683b      	ldr	r3, [r7, #0]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	2101      	movs	r1, #1
 80009ce:	697a      	ldr	r2, [r7, #20]
 80009d0:	4091      	lsls	r1, r2
 80009d2:	000a      	movs	r2, r1
 80009d4:	4013      	ands	r3, r2
 80009d6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d100      	bne.n	80009e0 <HAL_GPIO_Init+0x28>
 80009de:	e138      	b.n	8000c52 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80009e0:	683b      	ldr	r3, [r7, #0]
 80009e2:	685b      	ldr	r3, [r3, #4]
 80009e4:	2203      	movs	r2, #3
 80009e6:	4013      	ands	r3, r2
 80009e8:	2b01      	cmp	r3, #1
 80009ea:	d005      	beq.n	80009f8 <HAL_GPIO_Init+0x40>
 80009ec:	683b      	ldr	r3, [r7, #0]
 80009ee:	685b      	ldr	r3, [r3, #4]
 80009f0:	2203      	movs	r2, #3
 80009f2:	4013      	ands	r3, r2
 80009f4:	2b02      	cmp	r3, #2
 80009f6:	d130      	bne.n	8000a5a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	689b      	ldr	r3, [r3, #8]
 80009fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80009fe:	697b      	ldr	r3, [r7, #20]
 8000a00:	005b      	lsls	r3, r3, #1
 8000a02:	2203      	movs	r2, #3
 8000a04:	409a      	lsls	r2, r3
 8000a06:	0013      	movs	r3, r2
 8000a08:	43da      	mvns	r2, r3
 8000a0a:	693b      	ldr	r3, [r7, #16]
 8000a0c:	4013      	ands	r3, r2
 8000a0e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000a10:	683b      	ldr	r3, [r7, #0]
 8000a12:	68da      	ldr	r2, [r3, #12]
 8000a14:	697b      	ldr	r3, [r7, #20]
 8000a16:	005b      	lsls	r3, r3, #1
 8000a18:	409a      	lsls	r2, r3
 8000a1a:	0013      	movs	r3, r2
 8000a1c:	693a      	ldr	r2, [r7, #16]
 8000a1e:	4313      	orrs	r3, r2
 8000a20:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	693a      	ldr	r2, [r7, #16]
 8000a26:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	685b      	ldr	r3, [r3, #4]
 8000a2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000a2e:	2201      	movs	r2, #1
 8000a30:	697b      	ldr	r3, [r7, #20]
 8000a32:	409a      	lsls	r2, r3
 8000a34:	0013      	movs	r3, r2
 8000a36:	43da      	mvns	r2, r3
 8000a38:	693b      	ldr	r3, [r7, #16]
 8000a3a:	4013      	ands	r3, r2
 8000a3c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000a3e:	683b      	ldr	r3, [r7, #0]
 8000a40:	685b      	ldr	r3, [r3, #4]
 8000a42:	091b      	lsrs	r3, r3, #4
 8000a44:	2201      	movs	r2, #1
 8000a46:	401a      	ands	r2, r3
 8000a48:	697b      	ldr	r3, [r7, #20]
 8000a4a:	409a      	lsls	r2, r3
 8000a4c:	0013      	movs	r3, r2
 8000a4e:	693a      	ldr	r2, [r7, #16]
 8000a50:	4313      	orrs	r3, r2
 8000a52:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	693a      	ldr	r2, [r7, #16]
 8000a58:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000a5a:	683b      	ldr	r3, [r7, #0]
 8000a5c:	685b      	ldr	r3, [r3, #4]
 8000a5e:	2203      	movs	r2, #3
 8000a60:	4013      	ands	r3, r2
 8000a62:	2b03      	cmp	r3, #3
 8000a64:	d017      	beq.n	8000a96 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	68db      	ldr	r3, [r3, #12]
 8000a6a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000a6c:	697b      	ldr	r3, [r7, #20]
 8000a6e:	005b      	lsls	r3, r3, #1
 8000a70:	2203      	movs	r2, #3
 8000a72:	409a      	lsls	r2, r3
 8000a74:	0013      	movs	r3, r2
 8000a76:	43da      	mvns	r2, r3
 8000a78:	693b      	ldr	r3, [r7, #16]
 8000a7a:	4013      	ands	r3, r2
 8000a7c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000a7e:	683b      	ldr	r3, [r7, #0]
 8000a80:	689a      	ldr	r2, [r3, #8]
 8000a82:	697b      	ldr	r3, [r7, #20]
 8000a84:	005b      	lsls	r3, r3, #1
 8000a86:	409a      	lsls	r2, r3
 8000a88:	0013      	movs	r3, r2
 8000a8a:	693a      	ldr	r2, [r7, #16]
 8000a8c:	4313      	orrs	r3, r2
 8000a8e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	693a      	ldr	r2, [r7, #16]
 8000a94:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000a96:	683b      	ldr	r3, [r7, #0]
 8000a98:	685b      	ldr	r3, [r3, #4]
 8000a9a:	2203      	movs	r2, #3
 8000a9c:	4013      	ands	r3, r2
 8000a9e:	2b02      	cmp	r3, #2
 8000aa0:	d123      	bne.n	8000aea <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000aa2:	697b      	ldr	r3, [r7, #20]
 8000aa4:	08da      	lsrs	r2, r3, #3
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	3208      	adds	r2, #8
 8000aaa:	0092      	lsls	r2, r2, #2
 8000aac:	58d3      	ldr	r3, [r2, r3]
 8000aae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000ab0:	697b      	ldr	r3, [r7, #20]
 8000ab2:	2207      	movs	r2, #7
 8000ab4:	4013      	ands	r3, r2
 8000ab6:	009b      	lsls	r3, r3, #2
 8000ab8:	220f      	movs	r2, #15
 8000aba:	409a      	lsls	r2, r3
 8000abc:	0013      	movs	r3, r2
 8000abe:	43da      	mvns	r2, r3
 8000ac0:	693b      	ldr	r3, [r7, #16]
 8000ac2:	4013      	ands	r3, r2
 8000ac4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000ac6:	683b      	ldr	r3, [r7, #0]
 8000ac8:	691a      	ldr	r2, [r3, #16]
 8000aca:	697b      	ldr	r3, [r7, #20]
 8000acc:	2107      	movs	r1, #7
 8000ace:	400b      	ands	r3, r1
 8000ad0:	009b      	lsls	r3, r3, #2
 8000ad2:	409a      	lsls	r2, r3
 8000ad4:	0013      	movs	r3, r2
 8000ad6:	693a      	ldr	r2, [r7, #16]
 8000ad8:	4313      	orrs	r3, r2
 8000ada:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000adc:	697b      	ldr	r3, [r7, #20]
 8000ade:	08da      	lsrs	r2, r3, #3
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	3208      	adds	r2, #8
 8000ae4:	0092      	lsls	r2, r2, #2
 8000ae6:	6939      	ldr	r1, [r7, #16]
 8000ae8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000af0:	697b      	ldr	r3, [r7, #20]
 8000af2:	005b      	lsls	r3, r3, #1
 8000af4:	2203      	movs	r2, #3
 8000af6:	409a      	lsls	r2, r3
 8000af8:	0013      	movs	r3, r2
 8000afa:	43da      	mvns	r2, r3
 8000afc:	693b      	ldr	r3, [r7, #16]
 8000afe:	4013      	ands	r3, r2
 8000b00:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000b02:	683b      	ldr	r3, [r7, #0]
 8000b04:	685b      	ldr	r3, [r3, #4]
 8000b06:	2203      	movs	r2, #3
 8000b08:	401a      	ands	r2, r3
 8000b0a:	697b      	ldr	r3, [r7, #20]
 8000b0c:	005b      	lsls	r3, r3, #1
 8000b0e:	409a      	lsls	r2, r3
 8000b10:	0013      	movs	r3, r2
 8000b12:	693a      	ldr	r2, [r7, #16]
 8000b14:	4313      	orrs	r3, r2
 8000b16:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	693a      	ldr	r2, [r7, #16]
 8000b1c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000b1e:	683b      	ldr	r3, [r7, #0]
 8000b20:	685a      	ldr	r2, [r3, #4]
 8000b22:	23c0      	movs	r3, #192	@ 0xc0
 8000b24:	029b      	lsls	r3, r3, #10
 8000b26:	4013      	ands	r3, r2
 8000b28:	d100      	bne.n	8000b2c <HAL_GPIO_Init+0x174>
 8000b2a:	e092      	b.n	8000c52 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8000b2c:	4a50      	ldr	r2, [pc, #320]	@ (8000c70 <HAL_GPIO_Init+0x2b8>)
 8000b2e:	697b      	ldr	r3, [r7, #20]
 8000b30:	089b      	lsrs	r3, r3, #2
 8000b32:	3318      	adds	r3, #24
 8000b34:	009b      	lsls	r3, r3, #2
 8000b36:	589b      	ldr	r3, [r3, r2]
 8000b38:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8000b3a:	697b      	ldr	r3, [r7, #20]
 8000b3c:	2203      	movs	r2, #3
 8000b3e:	4013      	ands	r3, r2
 8000b40:	00db      	lsls	r3, r3, #3
 8000b42:	220f      	movs	r2, #15
 8000b44:	409a      	lsls	r2, r3
 8000b46:	0013      	movs	r3, r2
 8000b48:	43da      	mvns	r2, r3
 8000b4a:	693b      	ldr	r3, [r7, #16]
 8000b4c:	4013      	ands	r3, r2
 8000b4e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000b50:	687a      	ldr	r2, [r7, #4]
 8000b52:	23a0      	movs	r3, #160	@ 0xa0
 8000b54:	05db      	lsls	r3, r3, #23
 8000b56:	429a      	cmp	r2, r3
 8000b58:	d013      	beq.n	8000b82 <HAL_GPIO_Init+0x1ca>
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	4a45      	ldr	r2, [pc, #276]	@ (8000c74 <HAL_GPIO_Init+0x2bc>)
 8000b5e:	4293      	cmp	r3, r2
 8000b60:	d00d      	beq.n	8000b7e <HAL_GPIO_Init+0x1c6>
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	4a44      	ldr	r2, [pc, #272]	@ (8000c78 <HAL_GPIO_Init+0x2c0>)
 8000b66:	4293      	cmp	r3, r2
 8000b68:	d007      	beq.n	8000b7a <HAL_GPIO_Init+0x1c2>
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	4a43      	ldr	r2, [pc, #268]	@ (8000c7c <HAL_GPIO_Init+0x2c4>)
 8000b6e:	4293      	cmp	r3, r2
 8000b70:	d101      	bne.n	8000b76 <HAL_GPIO_Init+0x1be>
 8000b72:	2303      	movs	r3, #3
 8000b74:	e006      	b.n	8000b84 <HAL_GPIO_Init+0x1cc>
 8000b76:	2305      	movs	r3, #5
 8000b78:	e004      	b.n	8000b84 <HAL_GPIO_Init+0x1cc>
 8000b7a:	2302      	movs	r3, #2
 8000b7c:	e002      	b.n	8000b84 <HAL_GPIO_Init+0x1cc>
 8000b7e:	2301      	movs	r3, #1
 8000b80:	e000      	b.n	8000b84 <HAL_GPIO_Init+0x1cc>
 8000b82:	2300      	movs	r3, #0
 8000b84:	697a      	ldr	r2, [r7, #20]
 8000b86:	2103      	movs	r1, #3
 8000b88:	400a      	ands	r2, r1
 8000b8a:	00d2      	lsls	r2, r2, #3
 8000b8c:	4093      	lsls	r3, r2
 8000b8e:	693a      	ldr	r2, [r7, #16]
 8000b90:	4313      	orrs	r3, r2
 8000b92:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8000b94:	4936      	ldr	r1, [pc, #216]	@ (8000c70 <HAL_GPIO_Init+0x2b8>)
 8000b96:	697b      	ldr	r3, [r7, #20]
 8000b98:	089b      	lsrs	r3, r3, #2
 8000b9a:	3318      	adds	r3, #24
 8000b9c:	009b      	lsls	r3, r3, #2
 8000b9e:	693a      	ldr	r2, [r7, #16]
 8000ba0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000ba2:	4b33      	ldr	r3, [pc, #204]	@ (8000c70 <HAL_GPIO_Init+0x2b8>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	43da      	mvns	r2, r3
 8000bac:	693b      	ldr	r3, [r7, #16]
 8000bae:	4013      	ands	r3, r2
 8000bb0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000bb2:	683b      	ldr	r3, [r7, #0]
 8000bb4:	685a      	ldr	r2, [r3, #4]
 8000bb6:	2380      	movs	r3, #128	@ 0x80
 8000bb8:	035b      	lsls	r3, r3, #13
 8000bba:	4013      	ands	r3, r2
 8000bbc:	d003      	beq.n	8000bc6 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8000bbe:	693a      	ldr	r2, [r7, #16]
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	4313      	orrs	r3, r2
 8000bc4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000bc6:	4b2a      	ldr	r3, [pc, #168]	@ (8000c70 <HAL_GPIO_Init+0x2b8>)
 8000bc8:	693a      	ldr	r2, [r7, #16]
 8000bca:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8000bcc:	4b28      	ldr	r3, [pc, #160]	@ (8000c70 <HAL_GPIO_Init+0x2b8>)
 8000bce:	685b      	ldr	r3, [r3, #4]
 8000bd0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	43da      	mvns	r2, r3
 8000bd6:	693b      	ldr	r3, [r7, #16]
 8000bd8:	4013      	ands	r3, r2
 8000bda:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000bdc:	683b      	ldr	r3, [r7, #0]
 8000bde:	685a      	ldr	r2, [r3, #4]
 8000be0:	2380      	movs	r3, #128	@ 0x80
 8000be2:	039b      	lsls	r3, r3, #14
 8000be4:	4013      	ands	r3, r2
 8000be6:	d003      	beq.n	8000bf0 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8000be8:	693a      	ldr	r2, [r7, #16]
 8000bea:	68fb      	ldr	r3, [r7, #12]
 8000bec:	4313      	orrs	r3, r2
 8000bee:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000bf0:	4b1f      	ldr	r3, [pc, #124]	@ (8000c70 <HAL_GPIO_Init+0x2b8>)
 8000bf2:	693a      	ldr	r2, [r7, #16]
 8000bf4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000bf6:	4a1e      	ldr	r2, [pc, #120]	@ (8000c70 <HAL_GPIO_Init+0x2b8>)
 8000bf8:	2384      	movs	r3, #132	@ 0x84
 8000bfa:	58d3      	ldr	r3, [r2, r3]
 8000bfc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	43da      	mvns	r2, r3
 8000c02:	693b      	ldr	r3, [r7, #16]
 8000c04:	4013      	ands	r3, r2
 8000c06:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000c08:	683b      	ldr	r3, [r7, #0]
 8000c0a:	685a      	ldr	r2, [r3, #4]
 8000c0c:	2380      	movs	r3, #128	@ 0x80
 8000c0e:	029b      	lsls	r3, r3, #10
 8000c10:	4013      	ands	r3, r2
 8000c12:	d003      	beq.n	8000c1c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8000c14:	693a      	ldr	r2, [r7, #16]
 8000c16:	68fb      	ldr	r3, [r7, #12]
 8000c18:	4313      	orrs	r3, r2
 8000c1a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000c1c:	4914      	ldr	r1, [pc, #80]	@ (8000c70 <HAL_GPIO_Init+0x2b8>)
 8000c1e:	2284      	movs	r2, #132	@ 0x84
 8000c20:	693b      	ldr	r3, [r7, #16]
 8000c22:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8000c24:	4a12      	ldr	r2, [pc, #72]	@ (8000c70 <HAL_GPIO_Init+0x2b8>)
 8000c26:	2380      	movs	r3, #128	@ 0x80
 8000c28:	58d3      	ldr	r3, [r2, r3]
 8000c2a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	43da      	mvns	r2, r3
 8000c30:	693b      	ldr	r3, [r7, #16]
 8000c32:	4013      	ands	r3, r2
 8000c34:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	685a      	ldr	r2, [r3, #4]
 8000c3a:	2380      	movs	r3, #128	@ 0x80
 8000c3c:	025b      	lsls	r3, r3, #9
 8000c3e:	4013      	ands	r3, r2
 8000c40:	d003      	beq.n	8000c4a <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8000c42:	693a      	ldr	r2, [r7, #16]
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	4313      	orrs	r3, r2
 8000c48:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000c4a:	4909      	ldr	r1, [pc, #36]	@ (8000c70 <HAL_GPIO_Init+0x2b8>)
 8000c4c:	2280      	movs	r2, #128	@ 0x80
 8000c4e:	693b      	ldr	r3, [r7, #16]
 8000c50:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8000c52:	697b      	ldr	r3, [r7, #20]
 8000c54:	3301      	adds	r3, #1
 8000c56:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	681a      	ldr	r2, [r3, #0]
 8000c5c:	697b      	ldr	r3, [r7, #20]
 8000c5e:	40da      	lsrs	r2, r3
 8000c60:	1e13      	subs	r3, r2, #0
 8000c62:	d000      	beq.n	8000c66 <HAL_GPIO_Init+0x2ae>
 8000c64:	e6b0      	b.n	80009c8 <HAL_GPIO_Init+0x10>
  }
}
 8000c66:	46c0      	nop			@ (mov r8, r8)
 8000c68:	46c0      	nop			@ (mov r8, r8)
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	b006      	add	sp, #24
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	40021800 	.word	0x40021800
 8000c74:	50000400 	.word	0x50000400
 8000c78:	50000800 	.word	0x50000800
 8000c7c:	50000c00 	.word	0x50000c00

08000c80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
 8000c88:	0008      	movs	r0, r1
 8000c8a:	0011      	movs	r1, r2
 8000c8c:	1cbb      	adds	r3, r7, #2
 8000c8e:	1c02      	adds	r2, r0, #0
 8000c90:	801a      	strh	r2, [r3, #0]
 8000c92:	1c7b      	adds	r3, r7, #1
 8000c94:	1c0a      	adds	r2, r1, #0
 8000c96:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000c98:	1c7b      	adds	r3, r7, #1
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d004      	beq.n	8000caa <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000ca0:	1cbb      	adds	r3, r7, #2
 8000ca2:	881a      	ldrh	r2, [r3, #0]
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000ca8:	e003      	b.n	8000cb2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000caa:	1cbb      	adds	r3, r7, #2
 8000cac:	881a      	ldrh	r2, [r3, #0]
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000cb2:	46c0      	nop			@ (mov r8, r8)
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	b002      	add	sp, #8
 8000cb8:	bd80      	pop	{r7, pc}
	...

08000cbc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b084      	sub	sp, #16
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8000cc4:	4b19      	ldr	r3, [pc, #100]	@ (8000d2c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	4a19      	ldr	r2, [pc, #100]	@ (8000d30 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8000cca:	4013      	ands	r3, r2
 8000ccc:	0019      	movs	r1, r3
 8000cce:	4b17      	ldr	r3, [pc, #92]	@ (8000d2c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000cd0:	687a      	ldr	r2, [r7, #4]
 8000cd2:	430a      	orrs	r2, r1
 8000cd4:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000cd6:	687a      	ldr	r2, [r7, #4]
 8000cd8:	2380      	movs	r3, #128	@ 0x80
 8000cda:	009b      	lsls	r3, r3, #2
 8000cdc:	429a      	cmp	r2, r3
 8000cde:	d11f      	bne.n	8000d20 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8000ce0:	4b14      	ldr	r3, [pc, #80]	@ (8000d34 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8000ce2:	681a      	ldr	r2, [r3, #0]
 8000ce4:	0013      	movs	r3, r2
 8000ce6:	005b      	lsls	r3, r3, #1
 8000ce8:	189b      	adds	r3, r3, r2
 8000cea:	005b      	lsls	r3, r3, #1
 8000cec:	4912      	ldr	r1, [pc, #72]	@ (8000d38 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8000cee:	0018      	movs	r0, r3
 8000cf0:	f7ff fa06 	bl	8000100 <__udivsi3>
 8000cf4:	0003      	movs	r3, r0
 8000cf6:	3301      	adds	r3, #1
 8000cf8:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000cfa:	e008      	b.n	8000d0e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d003      	beq.n	8000d0a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	3b01      	subs	r3, #1
 8000d06:	60fb      	str	r3, [r7, #12]
 8000d08:	e001      	b.n	8000d0e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8000d0a:	2303      	movs	r3, #3
 8000d0c:	e009      	b.n	8000d22 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000d0e:	4b07      	ldr	r3, [pc, #28]	@ (8000d2c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000d10:	695a      	ldr	r2, [r3, #20]
 8000d12:	2380      	movs	r3, #128	@ 0x80
 8000d14:	00db      	lsls	r3, r3, #3
 8000d16:	401a      	ands	r2, r3
 8000d18:	2380      	movs	r3, #128	@ 0x80
 8000d1a:	00db      	lsls	r3, r3, #3
 8000d1c:	429a      	cmp	r2, r3
 8000d1e:	d0ed      	beq.n	8000cfc <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8000d20:	2300      	movs	r3, #0
}
 8000d22:	0018      	movs	r0, r3
 8000d24:	46bd      	mov	sp, r7
 8000d26:	b004      	add	sp, #16
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	46c0      	nop			@ (mov r8, r8)
 8000d2c:	40007000 	.word	0x40007000
 8000d30:	fffff9ff 	.word	0xfffff9ff
 8000d34:	20000000 	.word	0x20000000
 8000d38:	000f4240 	.word	0x000f4240

08000d3c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b088      	sub	sp, #32
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d101      	bne.n	8000d4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	e2f3      	b.n	8001336 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	2201      	movs	r2, #1
 8000d54:	4013      	ands	r3, r2
 8000d56:	d100      	bne.n	8000d5a <HAL_RCC_OscConfig+0x1e>
 8000d58:	e07c      	b.n	8000e54 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000d5a:	4bc3      	ldr	r3, [pc, #780]	@ (8001068 <HAL_RCC_OscConfig+0x32c>)
 8000d5c:	689b      	ldr	r3, [r3, #8]
 8000d5e:	2238      	movs	r2, #56	@ 0x38
 8000d60:	4013      	ands	r3, r2
 8000d62:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000d64:	4bc0      	ldr	r3, [pc, #768]	@ (8001068 <HAL_RCC_OscConfig+0x32c>)
 8000d66:	68db      	ldr	r3, [r3, #12]
 8000d68:	2203      	movs	r2, #3
 8000d6a:	4013      	ands	r3, r2
 8000d6c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8000d6e:	69bb      	ldr	r3, [r7, #24]
 8000d70:	2b10      	cmp	r3, #16
 8000d72:	d102      	bne.n	8000d7a <HAL_RCC_OscConfig+0x3e>
 8000d74:	697b      	ldr	r3, [r7, #20]
 8000d76:	2b03      	cmp	r3, #3
 8000d78:	d002      	beq.n	8000d80 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8000d7a:	69bb      	ldr	r3, [r7, #24]
 8000d7c:	2b08      	cmp	r3, #8
 8000d7e:	d10b      	bne.n	8000d98 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d80:	4bb9      	ldr	r3, [pc, #740]	@ (8001068 <HAL_RCC_OscConfig+0x32c>)
 8000d82:	681a      	ldr	r2, [r3, #0]
 8000d84:	2380      	movs	r3, #128	@ 0x80
 8000d86:	029b      	lsls	r3, r3, #10
 8000d88:	4013      	ands	r3, r2
 8000d8a:	d062      	beq.n	8000e52 <HAL_RCC_OscConfig+0x116>
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	685b      	ldr	r3, [r3, #4]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d15e      	bne.n	8000e52 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8000d94:	2301      	movs	r3, #1
 8000d96:	e2ce      	b.n	8001336 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	685a      	ldr	r2, [r3, #4]
 8000d9c:	2380      	movs	r3, #128	@ 0x80
 8000d9e:	025b      	lsls	r3, r3, #9
 8000da0:	429a      	cmp	r2, r3
 8000da2:	d107      	bne.n	8000db4 <HAL_RCC_OscConfig+0x78>
 8000da4:	4bb0      	ldr	r3, [pc, #704]	@ (8001068 <HAL_RCC_OscConfig+0x32c>)
 8000da6:	681a      	ldr	r2, [r3, #0]
 8000da8:	4baf      	ldr	r3, [pc, #700]	@ (8001068 <HAL_RCC_OscConfig+0x32c>)
 8000daa:	2180      	movs	r1, #128	@ 0x80
 8000dac:	0249      	lsls	r1, r1, #9
 8000dae:	430a      	orrs	r2, r1
 8000db0:	601a      	str	r2, [r3, #0]
 8000db2:	e020      	b.n	8000df6 <HAL_RCC_OscConfig+0xba>
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	685a      	ldr	r2, [r3, #4]
 8000db8:	23a0      	movs	r3, #160	@ 0xa0
 8000dba:	02db      	lsls	r3, r3, #11
 8000dbc:	429a      	cmp	r2, r3
 8000dbe:	d10e      	bne.n	8000dde <HAL_RCC_OscConfig+0xa2>
 8000dc0:	4ba9      	ldr	r3, [pc, #676]	@ (8001068 <HAL_RCC_OscConfig+0x32c>)
 8000dc2:	681a      	ldr	r2, [r3, #0]
 8000dc4:	4ba8      	ldr	r3, [pc, #672]	@ (8001068 <HAL_RCC_OscConfig+0x32c>)
 8000dc6:	2180      	movs	r1, #128	@ 0x80
 8000dc8:	02c9      	lsls	r1, r1, #11
 8000dca:	430a      	orrs	r2, r1
 8000dcc:	601a      	str	r2, [r3, #0]
 8000dce:	4ba6      	ldr	r3, [pc, #664]	@ (8001068 <HAL_RCC_OscConfig+0x32c>)
 8000dd0:	681a      	ldr	r2, [r3, #0]
 8000dd2:	4ba5      	ldr	r3, [pc, #660]	@ (8001068 <HAL_RCC_OscConfig+0x32c>)
 8000dd4:	2180      	movs	r1, #128	@ 0x80
 8000dd6:	0249      	lsls	r1, r1, #9
 8000dd8:	430a      	orrs	r2, r1
 8000dda:	601a      	str	r2, [r3, #0]
 8000ddc:	e00b      	b.n	8000df6 <HAL_RCC_OscConfig+0xba>
 8000dde:	4ba2      	ldr	r3, [pc, #648]	@ (8001068 <HAL_RCC_OscConfig+0x32c>)
 8000de0:	681a      	ldr	r2, [r3, #0]
 8000de2:	4ba1      	ldr	r3, [pc, #644]	@ (8001068 <HAL_RCC_OscConfig+0x32c>)
 8000de4:	49a1      	ldr	r1, [pc, #644]	@ (800106c <HAL_RCC_OscConfig+0x330>)
 8000de6:	400a      	ands	r2, r1
 8000de8:	601a      	str	r2, [r3, #0]
 8000dea:	4b9f      	ldr	r3, [pc, #636]	@ (8001068 <HAL_RCC_OscConfig+0x32c>)
 8000dec:	681a      	ldr	r2, [r3, #0]
 8000dee:	4b9e      	ldr	r3, [pc, #632]	@ (8001068 <HAL_RCC_OscConfig+0x32c>)
 8000df0:	499f      	ldr	r1, [pc, #636]	@ (8001070 <HAL_RCC_OscConfig+0x334>)
 8000df2:	400a      	ands	r2, r1
 8000df4:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	685b      	ldr	r3, [r3, #4]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d014      	beq.n	8000e28 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000dfe:	f7ff fcf3 	bl	80007e8 <HAL_GetTick>
 8000e02:	0003      	movs	r3, r0
 8000e04:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000e06:	e008      	b.n	8000e1a <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e08:	f7ff fcee 	bl	80007e8 <HAL_GetTick>
 8000e0c:	0002      	movs	r2, r0
 8000e0e:	693b      	ldr	r3, [r7, #16]
 8000e10:	1ad3      	subs	r3, r2, r3
 8000e12:	2b64      	cmp	r3, #100	@ 0x64
 8000e14:	d901      	bls.n	8000e1a <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8000e16:	2303      	movs	r3, #3
 8000e18:	e28d      	b.n	8001336 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000e1a:	4b93      	ldr	r3, [pc, #588]	@ (8001068 <HAL_RCC_OscConfig+0x32c>)
 8000e1c:	681a      	ldr	r2, [r3, #0]
 8000e1e:	2380      	movs	r3, #128	@ 0x80
 8000e20:	029b      	lsls	r3, r3, #10
 8000e22:	4013      	ands	r3, r2
 8000e24:	d0f0      	beq.n	8000e08 <HAL_RCC_OscConfig+0xcc>
 8000e26:	e015      	b.n	8000e54 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e28:	f7ff fcde 	bl	80007e8 <HAL_GetTick>
 8000e2c:	0003      	movs	r3, r0
 8000e2e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000e30:	e008      	b.n	8000e44 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e32:	f7ff fcd9 	bl	80007e8 <HAL_GetTick>
 8000e36:	0002      	movs	r2, r0
 8000e38:	693b      	ldr	r3, [r7, #16]
 8000e3a:	1ad3      	subs	r3, r2, r3
 8000e3c:	2b64      	cmp	r3, #100	@ 0x64
 8000e3e:	d901      	bls.n	8000e44 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8000e40:	2303      	movs	r3, #3
 8000e42:	e278      	b.n	8001336 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000e44:	4b88      	ldr	r3, [pc, #544]	@ (8001068 <HAL_RCC_OscConfig+0x32c>)
 8000e46:	681a      	ldr	r2, [r3, #0]
 8000e48:	2380      	movs	r3, #128	@ 0x80
 8000e4a:	029b      	lsls	r3, r3, #10
 8000e4c:	4013      	ands	r3, r2
 8000e4e:	d1f0      	bne.n	8000e32 <HAL_RCC_OscConfig+0xf6>
 8000e50:	e000      	b.n	8000e54 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e52:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	2202      	movs	r2, #2
 8000e5a:	4013      	ands	r3, r2
 8000e5c:	d100      	bne.n	8000e60 <HAL_RCC_OscConfig+0x124>
 8000e5e:	e099      	b.n	8000f94 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000e60:	4b81      	ldr	r3, [pc, #516]	@ (8001068 <HAL_RCC_OscConfig+0x32c>)
 8000e62:	689b      	ldr	r3, [r3, #8]
 8000e64:	2238      	movs	r2, #56	@ 0x38
 8000e66:	4013      	ands	r3, r2
 8000e68:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000e6a:	4b7f      	ldr	r3, [pc, #508]	@ (8001068 <HAL_RCC_OscConfig+0x32c>)
 8000e6c:	68db      	ldr	r3, [r3, #12]
 8000e6e:	2203      	movs	r2, #3
 8000e70:	4013      	ands	r3, r2
 8000e72:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8000e74:	69bb      	ldr	r3, [r7, #24]
 8000e76:	2b10      	cmp	r3, #16
 8000e78:	d102      	bne.n	8000e80 <HAL_RCC_OscConfig+0x144>
 8000e7a:	697b      	ldr	r3, [r7, #20]
 8000e7c:	2b02      	cmp	r3, #2
 8000e7e:	d002      	beq.n	8000e86 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8000e80:	69bb      	ldr	r3, [r7, #24]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d135      	bne.n	8000ef2 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000e86:	4b78      	ldr	r3, [pc, #480]	@ (8001068 <HAL_RCC_OscConfig+0x32c>)
 8000e88:	681a      	ldr	r2, [r3, #0]
 8000e8a:	2380      	movs	r3, #128	@ 0x80
 8000e8c:	00db      	lsls	r3, r3, #3
 8000e8e:	4013      	ands	r3, r2
 8000e90:	d005      	beq.n	8000e9e <HAL_RCC_OscConfig+0x162>
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	68db      	ldr	r3, [r3, #12]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d101      	bne.n	8000e9e <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	e24b      	b.n	8001336 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e9e:	4b72      	ldr	r3, [pc, #456]	@ (8001068 <HAL_RCC_OscConfig+0x32c>)
 8000ea0:	685b      	ldr	r3, [r3, #4]
 8000ea2:	4a74      	ldr	r2, [pc, #464]	@ (8001074 <HAL_RCC_OscConfig+0x338>)
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	0019      	movs	r1, r3
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	695b      	ldr	r3, [r3, #20]
 8000eac:	021a      	lsls	r2, r3, #8
 8000eae:	4b6e      	ldr	r3, [pc, #440]	@ (8001068 <HAL_RCC_OscConfig+0x32c>)
 8000eb0:	430a      	orrs	r2, r1
 8000eb2:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000eb4:	69bb      	ldr	r3, [r7, #24]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d112      	bne.n	8000ee0 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8000eba:	4b6b      	ldr	r3, [pc, #428]	@ (8001068 <HAL_RCC_OscConfig+0x32c>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	4a6e      	ldr	r2, [pc, #440]	@ (8001078 <HAL_RCC_OscConfig+0x33c>)
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	0019      	movs	r1, r3
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	691a      	ldr	r2, [r3, #16]
 8000ec8:	4b67      	ldr	r3, [pc, #412]	@ (8001068 <HAL_RCC_OscConfig+0x32c>)
 8000eca:	430a      	orrs	r2, r1
 8000ecc:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8000ece:	4b66      	ldr	r3, [pc, #408]	@ (8001068 <HAL_RCC_OscConfig+0x32c>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	0adb      	lsrs	r3, r3, #11
 8000ed4:	2207      	movs	r2, #7
 8000ed6:	4013      	ands	r3, r2
 8000ed8:	4a68      	ldr	r2, [pc, #416]	@ (800107c <HAL_RCC_OscConfig+0x340>)
 8000eda:	40da      	lsrs	r2, r3
 8000edc:	4b68      	ldr	r3, [pc, #416]	@ (8001080 <HAL_RCC_OscConfig+0x344>)
 8000ede:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8000ee0:	4b68      	ldr	r3, [pc, #416]	@ (8001084 <HAL_RCC_OscConfig+0x348>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	0018      	movs	r0, r3
 8000ee6:	f7ff fc23 	bl	8000730 <HAL_InitTick>
 8000eea:	1e03      	subs	r3, r0, #0
 8000eec:	d051      	beq.n	8000f92 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8000eee:	2301      	movs	r3, #1
 8000ef0:	e221      	b.n	8001336 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	68db      	ldr	r3, [r3, #12]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d030      	beq.n	8000f5c <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8000efa:	4b5b      	ldr	r3, [pc, #364]	@ (8001068 <HAL_RCC_OscConfig+0x32c>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	4a5e      	ldr	r2, [pc, #376]	@ (8001078 <HAL_RCC_OscConfig+0x33c>)
 8000f00:	4013      	ands	r3, r2
 8000f02:	0019      	movs	r1, r3
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	691a      	ldr	r2, [r3, #16]
 8000f08:	4b57      	ldr	r3, [pc, #348]	@ (8001068 <HAL_RCC_OscConfig+0x32c>)
 8000f0a:	430a      	orrs	r2, r1
 8000f0c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8000f0e:	4b56      	ldr	r3, [pc, #344]	@ (8001068 <HAL_RCC_OscConfig+0x32c>)
 8000f10:	681a      	ldr	r2, [r3, #0]
 8000f12:	4b55      	ldr	r3, [pc, #340]	@ (8001068 <HAL_RCC_OscConfig+0x32c>)
 8000f14:	2180      	movs	r1, #128	@ 0x80
 8000f16:	0049      	lsls	r1, r1, #1
 8000f18:	430a      	orrs	r2, r1
 8000f1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f1c:	f7ff fc64 	bl	80007e8 <HAL_GetTick>
 8000f20:	0003      	movs	r3, r0
 8000f22:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000f24:	e008      	b.n	8000f38 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f26:	f7ff fc5f 	bl	80007e8 <HAL_GetTick>
 8000f2a:	0002      	movs	r2, r0
 8000f2c:	693b      	ldr	r3, [r7, #16]
 8000f2e:	1ad3      	subs	r3, r2, r3
 8000f30:	2b02      	cmp	r3, #2
 8000f32:	d901      	bls.n	8000f38 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8000f34:	2303      	movs	r3, #3
 8000f36:	e1fe      	b.n	8001336 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000f38:	4b4b      	ldr	r3, [pc, #300]	@ (8001068 <HAL_RCC_OscConfig+0x32c>)
 8000f3a:	681a      	ldr	r2, [r3, #0]
 8000f3c:	2380      	movs	r3, #128	@ 0x80
 8000f3e:	00db      	lsls	r3, r3, #3
 8000f40:	4013      	ands	r3, r2
 8000f42:	d0f0      	beq.n	8000f26 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f44:	4b48      	ldr	r3, [pc, #288]	@ (8001068 <HAL_RCC_OscConfig+0x32c>)
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	4a4a      	ldr	r2, [pc, #296]	@ (8001074 <HAL_RCC_OscConfig+0x338>)
 8000f4a:	4013      	ands	r3, r2
 8000f4c:	0019      	movs	r1, r3
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	695b      	ldr	r3, [r3, #20]
 8000f52:	021a      	lsls	r2, r3, #8
 8000f54:	4b44      	ldr	r3, [pc, #272]	@ (8001068 <HAL_RCC_OscConfig+0x32c>)
 8000f56:	430a      	orrs	r2, r1
 8000f58:	605a      	str	r2, [r3, #4]
 8000f5a:	e01b      	b.n	8000f94 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8000f5c:	4b42      	ldr	r3, [pc, #264]	@ (8001068 <HAL_RCC_OscConfig+0x32c>)
 8000f5e:	681a      	ldr	r2, [r3, #0]
 8000f60:	4b41      	ldr	r3, [pc, #260]	@ (8001068 <HAL_RCC_OscConfig+0x32c>)
 8000f62:	4949      	ldr	r1, [pc, #292]	@ (8001088 <HAL_RCC_OscConfig+0x34c>)
 8000f64:	400a      	ands	r2, r1
 8000f66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f68:	f7ff fc3e 	bl	80007e8 <HAL_GetTick>
 8000f6c:	0003      	movs	r3, r0
 8000f6e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000f70:	e008      	b.n	8000f84 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f72:	f7ff fc39 	bl	80007e8 <HAL_GetTick>
 8000f76:	0002      	movs	r2, r0
 8000f78:	693b      	ldr	r3, [r7, #16]
 8000f7a:	1ad3      	subs	r3, r2, r3
 8000f7c:	2b02      	cmp	r3, #2
 8000f7e:	d901      	bls.n	8000f84 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8000f80:	2303      	movs	r3, #3
 8000f82:	e1d8      	b.n	8001336 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000f84:	4b38      	ldr	r3, [pc, #224]	@ (8001068 <HAL_RCC_OscConfig+0x32c>)
 8000f86:	681a      	ldr	r2, [r3, #0]
 8000f88:	2380      	movs	r3, #128	@ 0x80
 8000f8a:	00db      	lsls	r3, r3, #3
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	d1f0      	bne.n	8000f72 <HAL_RCC_OscConfig+0x236>
 8000f90:	e000      	b.n	8000f94 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000f92:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	2208      	movs	r2, #8
 8000f9a:	4013      	ands	r3, r2
 8000f9c:	d047      	beq.n	800102e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8000f9e:	4b32      	ldr	r3, [pc, #200]	@ (8001068 <HAL_RCC_OscConfig+0x32c>)
 8000fa0:	689b      	ldr	r3, [r3, #8]
 8000fa2:	2238      	movs	r2, #56	@ 0x38
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	2b18      	cmp	r3, #24
 8000fa8:	d10a      	bne.n	8000fc0 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8000faa:	4b2f      	ldr	r3, [pc, #188]	@ (8001068 <HAL_RCC_OscConfig+0x32c>)
 8000fac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000fae:	2202      	movs	r2, #2
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	d03c      	beq.n	800102e <HAL_RCC_OscConfig+0x2f2>
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	699b      	ldr	r3, [r3, #24]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d138      	bne.n	800102e <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	e1ba      	b.n	8001336 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	699b      	ldr	r3, [r3, #24]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d019      	beq.n	8000ffc <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8000fc8:	4b27      	ldr	r3, [pc, #156]	@ (8001068 <HAL_RCC_OscConfig+0x32c>)
 8000fca:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000fcc:	4b26      	ldr	r3, [pc, #152]	@ (8001068 <HAL_RCC_OscConfig+0x32c>)
 8000fce:	2101      	movs	r1, #1
 8000fd0:	430a      	orrs	r2, r1
 8000fd2:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fd4:	f7ff fc08 	bl	80007e8 <HAL_GetTick>
 8000fd8:	0003      	movs	r3, r0
 8000fda:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000fdc:	e008      	b.n	8000ff0 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000fde:	f7ff fc03 	bl	80007e8 <HAL_GetTick>
 8000fe2:	0002      	movs	r2, r0
 8000fe4:	693b      	ldr	r3, [r7, #16]
 8000fe6:	1ad3      	subs	r3, r2, r3
 8000fe8:	2b02      	cmp	r3, #2
 8000fea:	d901      	bls.n	8000ff0 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8000fec:	2303      	movs	r3, #3
 8000fee:	e1a2      	b.n	8001336 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000ff0:	4b1d      	ldr	r3, [pc, #116]	@ (8001068 <HAL_RCC_OscConfig+0x32c>)
 8000ff2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ff4:	2202      	movs	r2, #2
 8000ff6:	4013      	ands	r3, r2
 8000ff8:	d0f1      	beq.n	8000fde <HAL_RCC_OscConfig+0x2a2>
 8000ffa:	e018      	b.n	800102e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8000ffc:	4b1a      	ldr	r3, [pc, #104]	@ (8001068 <HAL_RCC_OscConfig+0x32c>)
 8000ffe:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001000:	4b19      	ldr	r3, [pc, #100]	@ (8001068 <HAL_RCC_OscConfig+0x32c>)
 8001002:	2101      	movs	r1, #1
 8001004:	438a      	bics	r2, r1
 8001006:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001008:	f7ff fbee 	bl	80007e8 <HAL_GetTick>
 800100c:	0003      	movs	r3, r0
 800100e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001010:	e008      	b.n	8001024 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001012:	f7ff fbe9 	bl	80007e8 <HAL_GetTick>
 8001016:	0002      	movs	r2, r0
 8001018:	693b      	ldr	r3, [r7, #16]
 800101a:	1ad3      	subs	r3, r2, r3
 800101c:	2b02      	cmp	r3, #2
 800101e:	d901      	bls.n	8001024 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001020:	2303      	movs	r3, #3
 8001022:	e188      	b.n	8001336 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001024:	4b10      	ldr	r3, [pc, #64]	@ (8001068 <HAL_RCC_OscConfig+0x32c>)
 8001026:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001028:	2202      	movs	r2, #2
 800102a:	4013      	ands	r3, r2
 800102c:	d1f1      	bne.n	8001012 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	2204      	movs	r2, #4
 8001034:	4013      	ands	r3, r2
 8001036:	d100      	bne.n	800103a <HAL_RCC_OscConfig+0x2fe>
 8001038:	e0c6      	b.n	80011c8 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800103a:	231f      	movs	r3, #31
 800103c:	18fb      	adds	r3, r7, r3
 800103e:	2200      	movs	r2, #0
 8001040:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001042:	4b09      	ldr	r3, [pc, #36]	@ (8001068 <HAL_RCC_OscConfig+0x32c>)
 8001044:	689b      	ldr	r3, [r3, #8]
 8001046:	2238      	movs	r2, #56	@ 0x38
 8001048:	4013      	ands	r3, r2
 800104a:	2b20      	cmp	r3, #32
 800104c:	d11e      	bne.n	800108c <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800104e:	4b06      	ldr	r3, [pc, #24]	@ (8001068 <HAL_RCC_OscConfig+0x32c>)
 8001050:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001052:	2202      	movs	r2, #2
 8001054:	4013      	ands	r3, r2
 8001056:	d100      	bne.n	800105a <HAL_RCC_OscConfig+0x31e>
 8001058:	e0b6      	b.n	80011c8 <HAL_RCC_OscConfig+0x48c>
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	689b      	ldr	r3, [r3, #8]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d000      	beq.n	8001064 <HAL_RCC_OscConfig+0x328>
 8001062:	e0b1      	b.n	80011c8 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001064:	2301      	movs	r3, #1
 8001066:	e166      	b.n	8001336 <HAL_RCC_OscConfig+0x5fa>
 8001068:	40021000 	.word	0x40021000
 800106c:	fffeffff 	.word	0xfffeffff
 8001070:	fffbffff 	.word	0xfffbffff
 8001074:	ffff80ff 	.word	0xffff80ff
 8001078:	ffffc7ff 	.word	0xffffc7ff
 800107c:	00f42400 	.word	0x00f42400
 8001080:	20000000 	.word	0x20000000
 8001084:	20000004 	.word	0x20000004
 8001088:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800108c:	4bac      	ldr	r3, [pc, #688]	@ (8001340 <HAL_RCC_OscConfig+0x604>)
 800108e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001090:	2380      	movs	r3, #128	@ 0x80
 8001092:	055b      	lsls	r3, r3, #21
 8001094:	4013      	ands	r3, r2
 8001096:	d101      	bne.n	800109c <HAL_RCC_OscConfig+0x360>
 8001098:	2301      	movs	r3, #1
 800109a:	e000      	b.n	800109e <HAL_RCC_OscConfig+0x362>
 800109c:	2300      	movs	r3, #0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d011      	beq.n	80010c6 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80010a2:	4ba7      	ldr	r3, [pc, #668]	@ (8001340 <HAL_RCC_OscConfig+0x604>)
 80010a4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80010a6:	4ba6      	ldr	r3, [pc, #664]	@ (8001340 <HAL_RCC_OscConfig+0x604>)
 80010a8:	2180      	movs	r1, #128	@ 0x80
 80010aa:	0549      	lsls	r1, r1, #21
 80010ac:	430a      	orrs	r2, r1
 80010ae:	63da      	str	r2, [r3, #60]	@ 0x3c
 80010b0:	4ba3      	ldr	r3, [pc, #652]	@ (8001340 <HAL_RCC_OscConfig+0x604>)
 80010b2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80010b4:	2380      	movs	r3, #128	@ 0x80
 80010b6:	055b      	lsls	r3, r3, #21
 80010b8:	4013      	ands	r3, r2
 80010ba:	60fb      	str	r3, [r7, #12]
 80010bc:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80010be:	231f      	movs	r3, #31
 80010c0:	18fb      	adds	r3, r7, r3
 80010c2:	2201      	movs	r2, #1
 80010c4:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80010c6:	4b9f      	ldr	r3, [pc, #636]	@ (8001344 <HAL_RCC_OscConfig+0x608>)
 80010c8:	681a      	ldr	r2, [r3, #0]
 80010ca:	2380      	movs	r3, #128	@ 0x80
 80010cc:	005b      	lsls	r3, r3, #1
 80010ce:	4013      	ands	r3, r2
 80010d0:	d11a      	bne.n	8001108 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80010d2:	4b9c      	ldr	r3, [pc, #624]	@ (8001344 <HAL_RCC_OscConfig+0x608>)
 80010d4:	681a      	ldr	r2, [r3, #0]
 80010d6:	4b9b      	ldr	r3, [pc, #620]	@ (8001344 <HAL_RCC_OscConfig+0x608>)
 80010d8:	2180      	movs	r1, #128	@ 0x80
 80010da:	0049      	lsls	r1, r1, #1
 80010dc:	430a      	orrs	r2, r1
 80010de:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80010e0:	f7ff fb82 	bl	80007e8 <HAL_GetTick>
 80010e4:	0003      	movs	r3, r0
 80010e6:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80010e8:	e008      	b.n	80010fc <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80010ea:	f7ff fb7d 	bl	80007e8 <HAL_GetTick>
 80010ee:	0002      	movs	r2, r0
 80010f0:	693b      	ldr	r3, [r7, #16]
 80010f2:	1ad3      	subs	r3, r2, r3
 80010f4:	2b02      	cmp	r3, #2
 80010f6:	d901      	bls.n	80010fc <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80010f8:	2303      	movs	r3, #3
 80010fa:	e11c      	b.n	8001336 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80010fc:	4b91      	ldr	r3, [pc, #580]	@ (8001344 <HAL_RCC_OscConfig+0x608>)
 80010fe:	681a      	ldr	r2, [r3, #0]
 8001100:	2380      	movs	r3, #128	@ 0x80
 8001102:	005b      	lsls	r3, r3, #1
 8001104:	4013      	ands	r3, r2
 8001106:	d0f0      	beq.n	80010ea <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	689b      	ldr	r3, [r3, #8]
 800110c:	2b01      	cmp	r3, #1
 800110e:	d106      	bne.n	800111e <HAL_RCC_OscConfig+0x3e2>
 8001110:	4b8b      	ldr	r3, [pc, #556]	@ (8001340 <HAL_RCC_OscConfig+0x604>)
 8001112:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001114:	4b8a      	ldr	r3, [pc, #552]	@ (8001340 <HAL_RCC_OscConfig+0x604>)
 8001116:	2101      	movs	r1, #1
 8001118:	430a      	orrs	r2, r1
 800111a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800111c:	e01c      	b.n	8001158 <HAL_RCC_OscConfig+0x41c>
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	689b      	ldr	r3, [r3, #8]
 8001122:	2b05      	cmp	r3, #5
 8001124:	d10c      	bne.n	8001140 <HAL_RCC_OscConfig+0x404>
 8001126:	4b86      	ldr	r3, [pc, #536]	@ (8001340 <HAL_RCC_OscConfig+0x604>)
 8001128:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800112a:	4b85      	ldr	r3, [pc, #532]	@ (8001340 <HAL_RCC_OscConfig+0x604>)
 800112c:	2104      	movs	r1, #4
 800112e:	430a      	orrs	r2, r1
 8001130:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001132:	4b83      	ldr	r3, [pc, #524]	@ (8001340 <HAL_RCC_OscConfig+0x604>)
 8001134:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001136:	4b82      	ldr	r3, [pc, #520]	@ (8001340 <HAL_RCC_OscConfig+0x604>)
 8001138:	2101      	movs	r1, #1
 800113a:	430a      	orrs	r2, r1
 800113c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800113e:	e00b      	b.n	8001158 <HAL_RCC_OscConfig+0x41c>
 8001140:	4b7f      	ldr	r3, [pc, #508]	@ (8001340 <HAL_RCC_OscConfig+0x604>)
 8001142:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001144:	4b7e      	ldr	r3, [pc, #504]	@ (8001340 <HAL_RCC_OscConfig+0x604>)
 8001146:	2101      	movs	r1, #1
 8001148:	438a      	bics	r2, r1
 800114a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800114c:	4b7c      	ldr	r3, [pc, #496]	@ (8001340 <HAL_RCC_OscConfig+0x604>)
 800114e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001150:	4b7b      	ldr	r3, [pc, #492]	@ (8001340 <HAL_RCC_OscConfig+0x604>)
 8001152:	2104      	movs	r1, #4
 8001154:	438a      	bics	r2, r1
 8001156:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	689b      	ldr	r3, [r3, #8]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d014      	beq.n	800118a <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001160:	f7ff fb42 	bl	80007e8 <HAL_GetTick>
 8001164:	0003      	movs	r3, r0
 8001166:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001168:	e009      	b.n	800117e <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800116a:	f7ff fb3d 	bl	80007e8 <HAL_GetTick>
 800116e:	0002      	movs	r2, r0
 8001170:	693b      	ldr	r3, [r7, #16]
 8001172:	1ad3      	subs	r3, r2, r3
 8001174:	4a74      	ldr	r2, [pc, #464]	@ (8001348 <HAL_RCC_OscConfig+0x60c>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d901      	bls.n	800117e <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800117a:	2303      	movs	r3, #3
 800117c:	e0db      	b.n	8001336 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800117e:	4b70      	ldr	r3, [pc, #448]	@ (8001340 <HAL_RCC_OscConfig+0x604>)
 8001180:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001182:	2202      	movs	r2, #2
 8001184:	4013      	ands	r3, r2
 8001186:	d0f0      	beq.n	800116a <HAL_RCC_OscConfig+0x42e>
 8001188:	e013      	b.n	80011b2 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800118a:	f7ff fb2d 	bl	80007e8 <HAL_GetTick>
 800118e:	0003      	movs	r3, r0
 8001190:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001192:	e009      	b.n	80011a8 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001194:	f7ff fb28 	bl	80007e8 <HAL_GetTick>
 8001198:	0002      	movs	r2, r0
 800119a:	693b      	ldr	r3, [r7, #16]
 800119c:	1ad3      	subs	r3, r2, r3
 800119e:	4a6a      	ldr	r2, [pc, #424]	@ (8001348 <HAL_RCC_OscConfig+0x60c>)
 80011a0:	4293      	cmp	r3, r2
 80011a2:	d901      	bls.n	80011a8 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80011a4:	2303      	movs	r3, #3
 80011a6:	e0c6      	b.n	8001336 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80011a8:	4b65      	ldr	r3, [pc, #404]	@ (8001340 <HAL_RCC_OscConfig+0x604>)
 80011aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80011ac:	2202      	movs	r2, #2
 80011ae:	4013      	ands	r3, r2
 80011b0:	d1f0      	bne.n	8001194 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80011b2:	231f      	movs	r3, #31
 80011b4:	18fb      	adds	r3, r7, r3
 80011b6:	781b      	ldrb	r3, [r3, #0]
 80011b8:	2b01      	cmp	r3, #1
 80011ba:	d105      	bne.n	80011c8 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80011bc:	4b60      	ldr	r3, [pc, #384]	@ (8001340 <HAL_RCC_OscConfig+0x604>)
 80011be:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80011c0:	4b5f      	ldr	r3, [pc, #380]	@ (8001340 <HAL_RCC_OscConfig+0x604>)
 80011c2:	4962      	ldr	r1, [pc, #392]	@ (800134c <HAL_RCC_OscConfig+0x610>)
 80011c4:	400a      	ands	r2, r1
 80011c6:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	69db      	ldr	r3, [r3, #28]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d100      	bne.n	80011d2 <HAL_RCC_OscConfig+0x496>
 80011d0:	e0b0      	b.n	8001334 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80011d2:	4b5b      	ldr	r3, [pc, #364]	@ (8001340 <HAL_RCC_OscConfig+0x604>)
 80011d4:	689b      	ldr	r3, [r3, #8]
 80011d6:	2238      	movs	r2, #56	@ 0x38
 80011d8:	4013      	ands	r3, r2
 80011da:	2b10      	cmp	r3, #16
 80011dc:	d100      	bne.n	80011e0 <HAL_RCC_OscConfig+0x4a4>
 80011de:	e078      	b.n	80012d2 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	69db      	ldr	r3, [r3, #28]
 80011e4:	2b02      	cmp	r3, #2
 80011e6:	d153      	bne.n	8001290 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011e8:	4b55      	ldr	r3, [pc, #340]	@ (8001340 <HAL_RCC_OscConfig+0x604>)
 80011ea:	681a      	ldr	r2, [r3, #0]
 80011ec:	4b54      	ldr	r3, [pc, #336]	@ (8001340 <HAL_RCC_OscConfig+0x604>)
 80011ee:	4958      	ldr	r1, [pc, #352]	@ (8001350 <HAL_RCC_OscConfig+0x614>)
 80011f0:	400a      	ands	r2, r1
 80011f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011f4:	f7ff faf8 	bl	80007e8 <HAL_GetTick>
 80011f8:	0003      	movs	r3, r0
 80011fa:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80011fc:	e008      	b.n	8001210 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011fe:	f7ff faf3 	bl	80007e8 <HAL_GetTick>
 8001202:	0002      	movs	r2, r0
 8001204:	693b      	ldr	r3, [r7, #16]
 8001206:	1ad3      	subs	r3, r2, r3
 8001208:	2b02      	cmp	r3, #2
 800120a:	d901      	bls.n	8001210 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 800120c:	2303      	movs	r3, #3
 800120e:	e092      	b.n	8001336 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001210:	4b4b      	ldr	r3, [pc, #300]	@ (8001340 <HAL_RCC_OscConfig+0x604>)
 8001212:	681a      	ldr	r2, [r3, #0]
 8001214:	2380      	movs	r3, #128	@ 0x80
 8001216:	049b      	lsls	r3, r3, #18
 8001218:	4013      	ands	r3, r2
 800121a:	d1f0      	bne.n	80011fe <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800121c:	4b48      	ldr	r3, [pc, #288]	@ (8001340 <HAL_RCC_OscConfig+0x604>)
 800121e:	68db      	ldr	r3, [r3, #12]
 8001220:	4a4c      	ldr	r2, [pc, #304]	@ (8001354 <HAL_RCC_OscConfig+0x618>)
 8001222:	4013      	ands	r3, r2
 8001224:	0019      	movs	r1, r3
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	6a1a      	ldr	r2, [r3, #32]
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800122e:	431a      	orrs	r2, r3
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001234:	021b      	lsls	r3, r3, #8
 8001236:	431a      	orrs	r2, r3
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800123c:	431a      	orrs	r2, r3
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001242:	431a      	orrs	r2, r3
 8001244:	4b3e      	ldr	r3, [pc, #248]	@ (8001340 <HAL_RCC_OscConfig+0x604>)
 8001246:	430a      	orrs	r2, r1
 8001248:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800124a:	4b3d      	ldr	r3, [pc, #244]	@ (8001340 <HAL_RCC_OscConfig+0x604>)
 800124c:	681a      	ldr	r2, [r3, #0]
 800124e:	4b3c      	ldr	r3, [pc, #240]	@ (8001340 <HAL_RCC_OscConfig+0x604>)
 8001250:	2180      	movs	r1, #128	@ 0x80
 8001252:	0449      	lsls	r1, r1, #17
 8001254:	430a      	orrs	r2, r1
 8001256:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001258:	4b39      	ldr	r3, [pc, #228]	@ (8001340 <HAL_RCC_OscConfig+0x604>)
 800125a:	68da      	ldr	r2, [r3, #12]
 800125c:	4b38      	ldr	r3, [pc, #224]	@ (8001340 <HAL_RCC_OscConfig+0x604>)
 800125e:	2180      	movs	r1, #128	@ 0x80
 8001260:	0549      	lsls	r1, r1, #21
 8001262:	430a      	orrs	r2, r1
 8001264:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001266:	f7ff fabf 	bl	80007e8 <HAL_GetTick>
 800126a:	0003      	movs	r3, r0
 800126c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800126e:	e008      	b.n	8001282 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001270:	f7ff faba 	bl	80007e8 <HAL_GetTick>
 8001274:	0002      	movs	r2, r0
 8001276:	693b      	ldr	r3, [r7, #16]
 8001278:	1ad3      	subs	r3, r2, r3
 800127a:	2b02      	cmp	r3, #2
 800127c:	d901      	bls.n	8001282 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 800127e:	2303      	movs	r3, #3
 8001280:	e059      	b.n	8001336 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001282:	4b2f      	ldr	r3, [pc, #188]	@ (8001340 <HAL_RCC_OscConfig+0x604>)
 8001284:	681a      	ldr	r2, [r3, #0]
 8001286:	2380      	movs	r3, #128	@ 0x80
 8001288:	049b      	lsls	r3, r3, #18
 800128a:	4013      	ands	r3, r2
 800128c:	d0f0      	beq.n	8001270 <HAL_RCC_OscConfig+0x534>
 800128e:	e051      	b.n	8001334 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001290:	4b2b      	ldr	r3, [pc, #172]	@ (8001340 <HAL_RCC_OscConfig+0x604>)
 8001292:	681a      	ldr	r2, [r3, #0]
 8001294:	4b2a      	ldr	r3, [pc, #168]	@ (8001340 <HAL_RCC_OscConfig+0x604>)
 8001296:	492e      	ldr	r1, [pc, #184]	@ (8001350 <HAL_RCC_OscConfig+0x614>)
 8001298:	400a      	ands	r2, r1
 800129a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800129c:	f7ff faa4 	bl	80007e8 <HAL_GetTick>
 80012a0:	0003      	movs	r3, r0
 80012a2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80012a4:	e008      	b.n	80012b8 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012a6:	f7ff fa9f 	bl	80007e8 <HAL_GetTick>
 80012aa:	0002      	movs	r2, r0
 80012ac:	693b      	ldr	r3, [r7, #16]
 80012ae:	1ad3      	subs	r3, r2, r3
 80012b0:	2b02      	cmp	r3, #2
 80012b2:	d901      	bls.n	80012b8 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 80012b4:	2303      	movs	r3, #3
 80012b6:	e03e      	b.n	8001336 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80012b8:	4b21      	ldr	r3, [pc, #132]	@ (8001340 <HAL_RCC_OscConfig+0x604>)
 80012ba:	681a      	ldr	r2, [r3, #0]
 80012bc:	2380      	movs	r3, #128	@ 0x80
 80012be:	049b      	lsls	r3, r3, #18
 80012c0:	4013      	ands	r3, r2
 80012c2:	d1f0      	bne.n	80012a6 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 80012c4:	4b1e      	ldr	r3, [pc, #120]	@ (8001340 <HAL_RCC_OscConfig+0x604>)
 80012c6:	68da      	ldr	r2, [r3, #12]
 80012c8:	4b1d      	ldr	r3, [pc, #116]	@ (8001340 <HAL_RCC_OscConfig+0x604>)
 80012ca:	4923      	ldr	r1, [pc, #140]	@ (8001358 <HAL_RCC_OscConfig+0x61c>)
 80012cc:	400a      	ands	r2, r1
 80012ce:	60da      	str	r2, [r3, #12]
 80012d0:	e030      	b.n	8001334 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	69db      	ldr	r3, [r3, #28]
 80012d6:	2b01      	cmp	r3, #1
 80012d8:	d101      	bne.n	80012de <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 80012da:	2301      	movs	r3, #1
 80012dc:	e02b      	b.n	8001336 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80012de:	4b18      	ldr	r3, [pc, #96]	@ (8001340 <HAL_RCC_OscConfig+0x604>)
 80012e0:	68db      	ldr	r3, [r3, #12]
 80012e2:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	2203      	movs	r2, #3
 80012e8:	401a      	ands	r2, r3
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6a1b      	ldr	r3, [r3, #32]
 80012ee:	429a      	cmp	r2, r3
 80012f0:	d11e      	bne.n	8001330 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80012f2:	697b      	ldr	r3, [r7, #20]
 80012f4:	2270      	movs	r2, #112	@ 0x70
 80012f6:	401a      	ands	r2, r3
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80012fc:	429a      	cmp	r2, r3
 80012fe:	d117      	bne.n	8001330 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001300:	697a      	ldr	r2, [r7, #20]
 8001302:	23fe      	movs	r3, #254	@ 0xfe
 8001304:	01db      	lsls	r3, r3, #7
 8001306:	401a      	ands	r2, r3
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800130c:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800130e:	429a      	cmp	r2, r3
 8001310:	d10e      	bne.n	8001330 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001312:	697a      	ldr	r2, [r7, #20]
 8001314:	23f8      	movs	r3, #248	@ 0xf8
 8001316:	039b      	lsls	r3, r3, #14
 8001318:	401a      	ands	r2, r3
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800131e:	429a      	cmp	r2, r3
 8001320:	d106      	bne.n	8001330 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001322:	697b      	ldr	r3, [r7, #20]
 8001324:	0f5b      	lsrs	r3, r3, #29
 8001326:	075a      	lsls	r2, r3, #29
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800132c:	429a      	cmp	r2, r3
 800132e:	d001      	beq.n	8001334 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8001330:	2301      	movs	r3, #1
 8001332:	e000      	b.n	8001336 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8001334:	2300      	movs	r3, #0
}
 8001336:	0018      	movs	r0, r3
 8001338:	46bd      	mov	sp, r7
 800133a:	b008      	add	sp, #32
 800133c:	bd80      	pop	{r7, pc}
 800133e:	46c0      	nop			@ (mov r8, r8)
 8001340:	40021000 	.word	0x40021000
 8001344:	40007000 	.word	0x40007000
 8001348:	00001388 	.word	0x00001388
 800134c:	efffffff 	.word	0xefffffff
 8001350:	feffffff 	.word	0xfeffffff
 8001354:	1fc1808c 	.word	0x1fc1808c
 8001358:	effefffc 	.word	0xeffefffc

0800135c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b084      	sub	sp, #16
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
 8001364:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d101      	bne.n	8001370 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800136c:	2301      	movs	r3, #1
 800136e:	e0e9      	b.n	8001544 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001370:	4b76      	ldr	r3, [pc, #472]	@ (800154c <HAL_RCC_ClockConfig+0x1f0>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	2207      	movs	r2, #7
 8001376:	4013      	ands	r3, r2
 8001378:	683a      	ldr	r2, [r7, #0]
 800137a:	429a      	cmp	r2, r3
 800137c:	d91e      	bls.n	80013bc <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800137e:	4b73      	ldr	r3, [pc, #460]	@ (800154c <HAL_RCC_ClockConfig+0x1f0>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	2207      	movs	r2, #7
 8001384:	4393      	bics	r3, r2
 8001386:	0019      	movs	r1, r3
 8001388:	4b70      	ldr	r3, [pc, #448]	@ (800154c <HAL_RCC_ClockConfig+0x1f0>)
 800138a:	683a      	ldr	r2, [r7, #0]
 800138c:	430a      	orrs	r2, r1
 800138e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001390:	f7ff fa2a 	bl	80007e8 <HAL_GetTick>
 8001394:	0003      	movs	r3, r0
 8001396:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001398:	e009      	b.n	80013ae <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800139a:	f7ff fa25 	bl	80007e8 <HAL_GetTick>
 800139e:	0002      	movs	r2, r0
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	1ad3      	subs	r3, r2, r3
 80013a4:	4a6a      	ldr	r2, [pc, #424]	@ (8001550 <HAL_RCC_ClockConfig+0x1f4>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d901      	bls.n	80013ae <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80013aa:	2303      	movs	r3, #3
 80013ac:	e0ca      	b.n	8001544 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80013ae:	4b67      	ldr	r3, [pc, #412]	@ (800154c <HAL_RCC_ClockConfig+0x1f0>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	2207      	movs	r2, #7
 80013b4:	4013      	ands	r3, r2
 80013b6:	683a      	ldr	r2, [r7, #0]
 80013b8:	429a      	cmp	r2, r3
 80013ba:	d1ee      	bne.n	800139a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	2202      	movs	r2, #2
 80013c2:	4013      	ands	r3, r2
 80013c4:	d015      	beq.n	80013f2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	2204      	movs	r2, #4
 80013cc:	4013      	ands	r3, r2
 80013ce:	d006      	beq.n	80013de <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80013d0:	4b60      	ldr	r3, [pc, #384]	@ (8001554 <HAL_RCC_ClockConfig+0x1f8>)
 80013d2:	689a      	ldr	r2, [r3, #8]
 80013d4:	4b5f      	ldr	r3, [pc, #380]	@ (8001554 <HAL_RCC_ClockConfig+0x1f8>)
 80013d6:	21e0      	movs	r1, #224	@ 0xe0
 80013d8:	01c9      	lsls	r1, r1, #7
 80013da:	430a      	orrs	r2, r1
 80013dc:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80013de:	4b5d      	ldr	r3, [pc, #372]	@ (8001554 <HAL_RCC_ClockConfig+0x1f8>)
 80013e0:	689b      	ldr	r3, [r3, #8]
 80013e2:	4a5d      	ldr	r2, [pc, #372]	@ (8001558 <HAL_RCC_ClockConfig+0x1fc>)
 80013e4:	4013      	ands	r3, r2
 80013e6:	0019      	movs	r1, r3
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	689a      	ldr	r2, [r3, #8]
 80013ec:	4b59      	ldr	r3, [pc, #356]	@ (8001554 <HAL_RCC_ClockConfig+0x1f8>)
 80013ee:	430a      	orrs	r2, r1
 80013f0:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	2201      	movs	r2, #1
 80013f8:	4013      	ands	r3, r2
 80013fa:	d057      	beq.n	80014ac <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	2b01      	cmp	r3, #1
 8001402:	d107      	bne.n	8001414 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001404:	4b53      	ldr	r3, [pc, #332]	@ (8001554 <HAL_RCC_ClockConfig+0x1f8>)
 8001406:	681a      	ldr	r2, [r3, #0]
 8001408:	2380      	movs	r3, #128	@ 0x80
 800140a:	029b      	lsls	r3, r3, #10
 800140c:	4013      	ands	r3, r2
 800140e:	d12b      	bne.n	8001468 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001410:	2301      	movs	r3, #1
 8001412:	e097      	b.n	8001544 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	2b02      	cmp	r3, #2
 800141a:	d107      	bne.n	800142c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800141c:	4b4d      	ldr	r3, [pc, #308]	@ (8001554 <HAL_RCC_ClockConfig+0x1f8>)
 800141e:	681a      	ldr	r2, [r3, #0]
 8001420:	2380      	movs	r3, #128	@ 0x80
 8001422:	049b      	lsls	r3, r3, #18
 8001424:	4013      	ands	r3, r2
 8001426:	d11f      	bne.n	8001468 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001428:	2301      	movs	r3, #1
 800142a:	e08b      	b.n	8001544 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d107      	bne.n	8001444 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001434:	4b47      	ldr	r3, [pc, #284]	@ (8001554 <HAL_RCC_ClockConfig+0x1f8>)
 8001436:	681a      	ldr	r2, [r3, #0]
 8001438:	2380      	movs	r3, #128	@ 0x80
 800143a:	00db      	lsls	r3, r3, #3
 800143c:	4013      	ands	r3, r2
 800143e:	d113      	bne.n	8001468 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001440:	2301      	movs	r3, #1
 8001442:	e07f      	b.n	8001544 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	2b03      	cmp	r3, #3
 800144a:	d106      	bne.n	800145a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800144c:	4b41      	ldr	r3, [pc, #260]	@ (8001554 <HAL_RCC_ClockConfig+0x1f8>)
 800144e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001450:	2202      	movs	r2, #2
 8001452:	4013      	ands	r3, r2
 8001454:	d108      	bne.n	8001468 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001456:	2301      	movs	r3, #1
 8001458:	e074      	b.n	8001544 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800145a:	4b3e      	ldr	r3, [pc, #248]	@ (8001554 <HAL_RCC_ClockConfig+0x1f8>)
 800145c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800145e:	2202      	movs	r2, #2
 8001460:	4013      	ands	r3, r2
 8001462:	d101      	bne.n	8001468 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001464:	2301      	movs	r3, #1
 8001466:	e06d      	b.n	8001544 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001468:	4b3a      	ldr	r3, [pc, #232]	@ (8001554 <HAL_RCC_ClockConfig+0x1f8>)
 800146a:	689b      	ldr	r3, [r3, #8]
 800146c:	2207      	movs	r2, #7
 800146e:	4393      	bics	r3, r2
 8001470:	0019      	movs	r1, r3
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	685a      	ldr	r2, [r3, #4]
 8001476:	4b37      	ldr	r3, [pc, #220]	@ (8001554 <HAL_RCC_ClockConfig+0x1f8>)
 8001478:	430a      	orrs	r2, r1
 800147a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800147c:	f7ff f9b4 	bl	80007e8 <HAL_GetTick>
 8001480:	0003      	movs	r3, r0
 8001482:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001484:	e009      	b.n	800149a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001486:	f7ff f9af 	bl	80007e8 <HAL_GetTick>
 800148a:	0002      	movs	r2, r0
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	1ad3      	subs	r3, r2, r3
 8001490:	4a2f      	ldr	r2, [pc, #188]	@ (8001550 <HAL_RCC_ClockConfig+0x1f4>)
 8001492:	4293      	cmp	r3, r2
 8001494:	d901      	bls.n	800149a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001496:	2303      	movs	r3, #3
 8001498:	e054      	b.n	8001544 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800149a:	4b2e      	ldr	r3, [pc, #184]	@ (8001554 <HAL_RCC_ClockConfig+0x1f8>)
 800149c:	689b      	ldr	r3, [r3, #8]
 800149e:	2238      	movs	r2, #56	@ 0x38
 80014a0:	401a      	ands	r2, r3
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	00db      	lsls	r3, r3, #3
 80014a8:	429a      	cmp	r2, r3
 80014aa:	d1ec      	bne.n	8001486 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80014ac:	4b27      	ldr	r3, [pc, #156]	@ (800154c <HAL_RCC_ClockConfig+0x1f0>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	2207      	movs	r2, #7
 80014b2:	4013      	ands	r3, r2
 80014b4:	683a      	ldr	r2, [r7, #0]
 80014b6:	429a      	cmp	r2, r3
 80014b8:	d21e      	bcs.n	80014f8 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014ba:	4b24      	ldr	r3, [pc, #144]	@ (800154c <HAL_RCC_ClockConfig+0x1f0>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	2207      	movs	r2, #7
 80014c0:	4393      	bics	r3, r2
 80014c2:	0019      	movs	r1, r3
 80014c4:	4b21      	ldr	r3, [pc, #132]	@ (800154c <HAL_RCC_ClockConfig+0x1f0>)
 80014c6:	683a      	ldr	r2, [r7, #0]
 80014c8:	430a      	orrs	r2, r1
 80014ca:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80014cc:	f7ff f98c 	bl	80007e8 <HAL_GetTick>
 80014d0:	0003      	movs	r3, r0
 80014d2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80014d4:	e009      	b.n	80014ea <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014d6:	f7ff f987 	bl	80007e8 <HAL_GetTick>
 80014da:	0002      	movs	r2, r0
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	1ad3      	subs	r3, r2, r3
 80014e0:	4a1b      	ldr	r2, [pc, #108]	@ (8001550 <HAL_RCC_ClockConfig+0x1f4>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d901      	bls.n	80014ea <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80014e6:	2303      	movs	r3, #3
 80014e8:	e02c      	b.n	8001544 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80014ea:	4b18      	ldr	r3, [pc, #96]	@ (800154c <HAL_RCC_ClockConfig+0x1f0>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	2207      	movs	r2, #7
 80014f0:	4013      	ands	r3, r2
 80014f2:	683a      	ldr	r2, [r7, #0]
 80014f4:	429a      	cmp	r2, r3
 80014f6:	d1ee      	bne.n	80014d6 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	2204      	movs	r2, #4
 80014fe:	4013      	ands	r3, r2
 8001500:	d009      	beq.n	8001516 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001502:	4b14      	ldr	r3, [pc, #80]	@ (8001554 <HAL_RCC_ClockConfig+0x1f8>)
 8001504:	689b      	ldr	r3, [r3, #8]
 8001506:	4a15      	ldr	r2, [pc, #84]	@ (800155c <HAL_RCC_ClockConfig+0x200>)
 8001508:	4013      	ands	r3, r2
 800150a:	0019      	movs	r1, r3
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	68da      	ldr	r2, [r3, #12]
 8001510:	4b10      	ldr	r3, [pc, #64]	@ (8001554 <HAL_RCC_ClockConfig+0x1f8>)
 8001512:	430a      	orrs	r2, r1
 8001514:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001516:	f000 f829 	bl	800156c <HAL_RCC_GetSysClockFreq>
 800151a:	0001      	movs	r1, r0
 800151c:	4b0d      	ldr	r3, [pc, #52]	@ (8001554 <HAL_RCC_ClockConfig+0x1f8>)
 800151e:	689b      	ldr	r3, [r3, #8]
 8001520:	0a1b      	lsrs	r3, r3, #8
 8001522:	220f      	movs	r2, #15
 8001524:	401a      	ands	r2, r3
 8001526:	4b0e      	ldr	r3, [pc, #56]	@ (8001560 <HAL_RCC_ClockConfig+0x204>)
 8001528:	0092      	lsls	r2, r2, #2
 800152a:	58d3      	ldr	r3, [r2, r3]
 800152c:	221f      	movs	r2, #31
 800152e:	4013      	ands	r3, r2
 8001530:	000a      	movs	r2, r1
 8001532:	40da      	lsrs	r2, r3
 8001534:	4b0b      	ldr	r3, [pc, #44]	@ (8001564 <HAL_RCC_ClockConfig+0x208>)
 8001536:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001538:	4b0b      	ldr	r3, [pc, #44]	@ (8001568 <HAL_RCC_ClockConfig+0x20c>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	0018      	movs	r0, r3
 800153e:	f7ff f8f7 	bl	8000730 <HAL_InitTick>
 8001542:	0003      	movs	r3, r0
}
 8001544:	0018      	movs	r0, r3
 8001546:	46bd      	mov	sp, r7
 8001548:	b004      	add	sp, #16
 800154a:	bd80      	pop	{r7, pc}
 800154c:	40022000 	.word	0x40022000
 8001550:	00001388 	.word	0x00001388
 8001554:	40021000 	.word	0x40021000
 8001558:	fffff0ff 	.word	0xfffff0ff
 800155c:	ffff8fff 	.word	0xffff8fff
 8001560:	08002750 	.word	0x08002750
 8001564:	20000000 	.word	0x20000000
 8001568:	20000004 	.word	0x20000004

0800156c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b086      	sub	sp, #24
 8001570:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001572:	4b3c      	ldr	r3, [pc, #240]	@ (8001664 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001574:	689b      	ldr	r3, [r3, #8]
 8001576:	2238      	movs	r2, #56	@ 0x38
 8001578:	4013      	ands	r3, r2
 800157a:	d10f      	bne.n	800159c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800157c:	4b39      	ldr	r3, [pc, #228]	@ (8001664 <HAL_RCC_GetSysClockFreq+0xf8>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	0adb      	lsrs	r3, r3, #11
 8001582:	2207      	movs	r2, #7
 8001584:	4013      	ands	r3, r2
 8001586:	2201      	movs	r2, #1
 8001588:	409a      	lsls	r2, r3
 800158a:	0013      	movs	r3, r2
 800158c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800158e:	6839      	ldr	r1, [r7, #0]
 8001590:	4835      	ldr	r0, [pc, #212]	@ (8001668 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001592:	f7fe fdb5 	bl	8000100 <__udivsi3>
 8001596:	0003      	movs	r3, r0
 8001598:	613b      	str	r3, [r7, #16]
 800159a:	e05d      	b.n	8001658 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800159c:	4b31      	ldr	r3, [pc, #196]	@ (8001664 <HAL_RCC_GetSysClockFreq+0xf8>)
 800159e:	689b      	ldr	r3, [r3, #8]
 80015a0:	2238      	movs	r2, #56	@ 0x38
 80015a2:	4013      	ands	r3, r2
 80015a4:	2b08      	cmp	r3, #8
 80015a6:	d102      	bne.n	80015ae <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80015a8:	4b30      	ldr	r3, [pc, #192]	@ (800166c <HAL_RCC_GetSysClockFreq+0x100>)
 80015aa:	613b      	str	r3, [r7, #16]
 80015ac:	e054      	b.n	8001658 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80015ae:	4b2d      	ldr	r3, [pc, #180]	@ (8001664 <HAL_RCC_GetSysClockFreq+0xf8>)
 80015b0:	689b      	ldr	r3, [r3, #8]
 80015b2:	2238      	movs	r2, #56	@ 0x38
 80015b4:	4013      	ands	r3, r2
 80015b6:	2b10      	cmp	r3, #16
 80015b8:	d138      	bne.n	800162c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80015ba:	4b2a      	ldr	r3, [pc, #168]	@ (8001664 <HAL_RCC_GetSysClockFreq+0xf8>)
 80015bc:	68db      	ldr	r3, [r3, #12]
 80015be:	2203      	movs	r2, #3
 80015c0:	4013      	ands	r3, r2
 80015c2:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80015c4:	4b27      	ldr	r3, [pc, #156]	@ (8001664 <HAL_RCC_GetSysClockFreq+0xf8>)
 80015c6:	68db      	ldr	r3, [r3, #12]
 80015c8:	091b      	lsrs	r3, r3, #4
 80015ca:	2207      	movs	r2, #7
 80015cc:	4013      	ands	r3, r2
 80015ce:	3301      	adds	r3, #1
 80015d0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	2b03      	cmp	r3, #3
 80015d6:	d10d      	bne.n	80015f4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80015d8:	68b9      	ldr	r1, [r7, #8]
 80015da:	4824      	ldr	r0, [pc, #144]	@ (800166c <HAL_RCC_GetSysClockFreq+0x100>)
 80015dc:	f7fe fd90 	bl	8000100 <__udivsi3>
 80015e0:	0003      	movs	r3, r0
 80015e2:	0019      	movs	r1, r3
 80015e4:	4b1f      	ldr	r3, [pc, #124]	@ (8001664 <HAL_RCC_GetSysClockFreq+0xf8>)
 80015e6:	68db      	ldr	r3, [r3, #12]
 80015e8:	0a1b      	lsrs	r3, r3, #8
 80015ea:	227f      	movs	r2, #127	@ 0x7f
 80015ec:	4013      	ands	r3, r2
 80015ee:	434b      	muls	r3, r1
 80015f0:	617b      	str	r3, [r7, #20]
        break;
 80015f2:	e00d      	b.n	8001610 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80015f4:	68b9      	ldr	r1, [r7, #8]
 80015f6:	481c      	ldr	r0, [pc, #112]	@ (8001668 <HAL_RCC_GetSysClockFreq+0xfc>)
 80015f8:	f7fe fd82 	bl	8000100 <__udivsi3>
 80015fc:	0003      	movs	r3, r0
 80015fe:	0019      	movs	r1, r3
 8001600:	4b18      	ldr	r3, [pc, #96]	@ (8001664 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001602:	68db      	ldr	r3, [r3, #12]
 8001604:	0a1b      	lsrs	r3, r3, #8
 8001606:	227f      	movs	r2, #127	@ 0x7f
 8001608:	4013      	ands	r3, r2
 800160a:	434b      	muls	r3, r1
 800160c:	617b      	str	r3, [r7, #20]
        break;
 800160e:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001610:	4b14      	ldr	r3, [pc, #80]	@ (8001664 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001612:	68db      	ldr	r3, [r3, #12]
 8001614:	0f5b      	lsrs	r3, r3, #29
 8001616:	2207      	movs	r2, #7
 8001618:	4013      	ands	r3, r2
 800161a:	3301      	adds	r3, #1
 800161c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800161e:	6879      	ldr	r1, [r7, #4]
 8001620:	6978      	ldr	r0, [r7, #20]
 8001622:	f7fe fd6d 	bl	8000100 <__udivsi3>
 8001626:	0003      	movs	r3, r0
 8001628:	613b      	str	r3, [r7, #16]
 800162a:	e015      	b.n	8001658 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800162c:	4b0d      	ldr	r3, [pc, #52]	@ (8001664 <HAL_RCC_GetSysClockFreq+0xf8>)
 800162e:	689b      	ldr	r3, [r3, #8]
 8001630:	2238      	movs	r2, #56	@ 0x38
 8001632:	4013      	ands	r3, r2
 8001634:	2b20      	cmp	r3, #32
 8001636:	d103      	bne.n	8001640 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001638:	2380      	movs	r3, #128	@ 0x80
 800163a:	021b      	lsls	r3, r3, #8
 800163c:	613b      	str	r3, [r7, #16]
 800163e:	e00b      	b.n	8001658 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001640:	4b08      	ldr	r3, [pc, #32]	@ (8001664 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001642:	689b      	ldr	r3, [r3, #8]
 8001644:	2238      	movs	r2, #56	@ 0x38
 8001646:	4013      	ands	r3, r2
 8001648:	2b18      	cmp	r3, #24
 800164a:	d103      	bne.n	8001654 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800164c:	23fa      	movs	r3, #250	@ 0xfa
 800164e:	01db      	lsls	r3, r3, #7
 8001650:	613b      	str	r3, [r7, #16]
 8001652:	e001      	b.n	8001658 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001654:	2300      	movs	r3, #0
 8001656:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001658:	693b      	ldr	r3, [r7, #16]
}
 800165a:	0018      	movs	r0, r3
 800165c:	46bd      	mov	sp, r7
 800165e:	b006      	add	sp, #24
 8001660:	bd80      	pop	{r7, pc}
 8001662:	46c0      	nop			@ (mov r8, r8)
 8001664:	40021000 	.word	0x40021000
 8001668:	00f42400 	.word	0x00f42400
 800166c:	007a1200 	.word	0x007a1200

08001670 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b082      	sub	sp, #8
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d101      	bne.n	8001682 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800167e:	2301      	movs	r3, #1
 8001680:	e04a      	b.n	8001718 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	223d      	movs	r2, #61	@ 0x3d
 8001686:	5c9b      	ldrb	r3, [r3, r2]
 8001688:	b2db      	uxtb	r3, r3
 800168a:	2b00      	cmp	r3, #0
 800168c:	d107      	bne.n	800169e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	223c      	movs	r2, #60	@ 0x3c
 8001692:	2100      	movs	r1, #0
 8001694:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	0018      	movs	r0, r3
 800169a:	f7fe ff23 	bl	80004e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	223d      	movs	r2, #61	@ 0x3d
 80016a2:	2102      	movs	r1, #2
 80016a4:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681a      	ldr	r2, [r3, #0]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	3304      	adds	r3, #4
 80016ae:	0019      	movs	r1, r3
 80016b0:	0010      	movs	r0, r2
 80016b2:	f000 fbe9 	bl	8001e88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2248      	movs	r2, #72	@ 0x48
 80016ba:	2101      	movs	r1, #1
 80016bc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	223e      	movs	r2, #62	@ 0x3e
 80016c2:	2101      	movs	r1, #1
 80016c4:	5499      	strb	r1, [r3, r2]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	223f      	movs	r2, #63	@ 0x3f
 80016ca:	2101      	movs	r1, #1
 80016cc:	5499      	strb	r1, [r3, r2]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2240      	movs	r2, #64	@ 0x40
 80016d2:	2101      	movs	r1, #1
 80016d4:	5499      	strb	r1, [r3, r2]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2241      	movs	r2, #65	@ 0x41
 80016da:	2101      	movs	r1, #1
 80016dc:	5499      	strb	r1, [r3, r2]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2242      	movs	r2, #66	@ 0x42
 80016e2:	2101      	movs	r1, #1
 80016e4:	5499      	strb	r1, [r3, r2]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2243      	movs	r2, #67	@ 0x43
 80016ea:	2101      	movs	r1, #1
 80016ec:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2244      	movs	r2, #68	@ 0x44
 80016f2:	2101      	movs	r1, #1
 80016f4:	5499      	strb	r1, [r3, r2]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2245      	movs	r2, #69	@ 0x45
 80016fa:	2101      	movs	r1, #1
 80016fc:	5499      	strb	r1, [r3, r2]
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2246      	movs	r2, #70	@ 0x46
 8001702:	2101      	movs	r1, #1
 8001704:	5499      	strb	r1, [r3, r2]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2247      	movs	r2, #71	@ 0x47
 800170a:	2101      	movs	r1, #1
 800170c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	223d      	movs	r2, #61	@ 0x3d
 8001712:	2101      	movs	r1, #1
 8001714:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001716:	2300      	movs	r3, #0
}
 8001718:	0018      	movs	r0, r3
 800171a:	46bd      	mov	sp, r7
 800171c:	b002      	add	sp, #8
 800171e:	bd80      	pop	{r7, pc}

08001720 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b084      	sub	sp, #16
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	223d      	movs	r2, #61	@ 0x3d
 800172c:	5c9b      	ldrb	r3, [r3, r2]
 800172e:	b2db      	uxtb	r3, r3
 8001730:	2b01      	cmp	r3, #1
 8001732:	d001      	beq.n	8001738 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001734:	2301      	movs	r3, #1
 8001736:	e037      	b.n	80017a8 <HAL_TIM_Base_Start_IT+0x88>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	223d      	movs	r2, #61	@ 0x3d
 800173c:	2102      	movs	r1, #2
 800173e:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	68da      	ldr	r2, [r3, #12]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	2101      	movs	r1, #1
 800174c:	430a      	orrs	r2, r1
 800174e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a16      	ldr	r2, [pc, #88]	@ (80017b0 <HAL_TIM_Base_Start_IT+0x90>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d004      	beq.n	8001764 <HAL_TIM_Base_Start_IT+0x44>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4a15      	ldr	r2, [pc, #84]	@ (80017b4 <HAL_TIM_Base_Start_IT+0x94>)
 8001760:	4293      	cmp	r3, r2
 8001762:	d116      	bne.n	8001792 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	689b      	ldr	r3, [r3, #8]
 800176a:	4a13      	ldr	r2, [pc, #76]	@ (80017b8 <HAL_TIM_Base_Start_IT+0x98>)
 800176c:	4013      	ands	r3, r2
 800176e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	2b06      	cmp	r3, #6
 8001774:	d016      	beq.n	80017a4 <HAL_TIM_Base_Start_IT+0x84>
 8001776:	68fa      	ldr	r2, [r7, #12]
 8001778:	2380      	movs	r3, #128	@ 0x80
 800177a:	025b      	lsls	r3, r3, #9
 800177c:	429a      	cmp	r2, r3
 800177e:	d011      	beq.n	80017a4 <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	681a      	ldr	r2, [r3, #0]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	2101      	movs	r1, #1
 800178c:	430a      	orrs	r2, r1
 800178e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001790:	e008      	b.n	80017a4 <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	681a      	ldr	r2, [r3, #0]
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	2101      	movs	r1, #1
 800179e:	430a      	orrs	r2, r1
 80017a0:	601a      	str	r2, [r3, #0]
 80017a2:	e000      	b.n	80017a6 <HAL_TIM_Base_Start_IT+0x86>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80017a4:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80017a6:	2300      	movs	r3, #0
}
 80017a8:	0018      	movs	r0, r3
 80017aa:	46bd      	mov	sp, r7
 80017ac:	b004      	add	sp, #16
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	40012c00 	.word	0x40012c00
 80017b4:	40000400 	.word	0x40000400
 80017b8:	00010007 	.word	0x00010007

080017bc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b082      	sub	sp, #8
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d101      	bne.n	80017ce <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
 80017cc:	e04a      	b.n	8001864 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	223d      	movs	r2, #61	@ 0x3d
 80017d2:	5c9b      	ldrb	r3, [r3, r2]
 80017d4:	b2db      	uxtb	r3, r3
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d107      	bne.n	80017ea <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	223c      	movs	r2, #60	@ 0x3c
 80017de:	2100      	movs	r1, #0
 80017e0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	0018      	movs	r0, r3
 80017e6:	f000 f841 	bl	800186c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	223d      	movs	r2, #61	@ 0x3d
 80017ee:	2102      	movs	r1, #2
 80017f0:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681a      	ldr	r2, [r3, #0]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	3304      	adds	r3, #4
 80017fa:	0019      	movs	r1, r3
 80017fc:	0010      	movs	r0, r2
 80017fe:	f000 fb43 	bl	8001e88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2248      	movs	r2, #72	@ 0x48
 8001806:	2101      	movs	r1, #1
 8001808:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	223e      	movs	r2, #62	@ 0x3e
 800180e:	2101      	movs	r1, #1
 8001810:	5499      	strb	r1, [r3, r2]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	223f      	movs	r2, #63	@ 0x3f
 8001816:	2101      	movs	r1, #1
 8001818:	5499      	strb	r1, [r3, r2]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2240      	movs	r2, #64	@ 0x40
 800181e:	2101      	movs	r1, #1
 8001820:	5499      	strb	r1, [r3, r2]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	2241      	movs	r2, #65	@ 0x41
 8001826:	2101      	movs	r1, #1
 8001828:	5499      	strb	r1, [r3, r2]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2242      	movs	r2, #66	@ 0x42
 800182e:	2101      	movs	r1, #1
 8001830:	5499      	strb	r1, [r3, r2]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2243      	movs	r2, #67	@ 0x43
 8001836:	2101      	movs	r1, #1
 8001838:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2244      	movs	r2, #68	@ 0x44
 800183e:	2101      	movs	r1, #1
 8001840:	5499      	strb	r1, [r3, r2]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2245      	movs	r2, #69	@ 0x45
 8001846:	2101      	movs	r1, #1
 8001848:	5499      	strb	r1, [r3, r2]
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2246      	movs	r2, #70	@ 0x46
 800184e:	2101      	movs	r1, #1
 8001850:	5499      	strb	r1, [r3, r2]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2247      	movs	r2, #71	@ 0x47
 8001856:	2101      	movs	r1, #1
 8001858:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	223d      	movs	r2, #61	@ 0x3d
 800185e:	2101      	movs	r1, #1
 8001860:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001862:	2300      	movs	r3, #0
}
 8001864:	0018      	movs	r0, r3
 8001866:	46bd      	mov	sp, r7
 8001868:	b002      	add	sp, #8
 800186a:	bd80      	pop	{r7, pc}

0800186c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b082      	sub	sp, #8
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001874:	46c0      	nop			@ (mov r8, r8)
 8001876:	46bd      	mov	sp, r7
 8001878:	b002      	add	sp, #8
 800187a:	bd80      	pop	{r7, pc}

0800187c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b084      	sub	sp, #16
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	68db      	ldr	r3, [r3, #12]
 800188a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	691b      	ldr	r3, [r3, #16]
 8001892:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001894:	68bb      	ldr	r3, [r7, #8]
 8001896:	2202      	movs	r2, #2
 8001898:	4013      	ands	r3, r2
 800189a:	d021      	beq.n	80018e0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	2202      	movs	r2, #2
 80018a0:	4013      	ands	r3, r2
 80018a2:	d01d      	beq.n	80018e0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	2203      	movs	r2, #3
 80018aa:	4252      	negs	r2, r2
 80018ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2201      	movs	r2, #1
 80018b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	699b      	ldr	r3, [r3, #24]
 80018ba:	2203      	movs	r2, #3
 80018bc:	4013      	ands	r3, r2
 80018be:	d004      	beq.n	80018ca <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	0018      	movs	r0, r3
 80018c4:	f000 fac8 	bl	8001e58 <HAL_TIM_IC_CaptureCallback>
 80018c8:	e007      	b.n	80018da <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	0018      	movs	r0, r3
 80018ce:	f000 fabb 	bl	8001e48 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	0018      	movs	r0, r3
 80018d6:	f000 fac7 	bl	8001e68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2200      	movs	r2, #0
 80018de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80018e0:	68bb      	ldr	r3, [r7, #8]
 80018e2:	2204      	movs	r2, #4
 80018e4:	4013      	ands	r3, r2
 80018e6:	d022      	beq.n	800192e <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	2204      	movs	r2, #4
 80018ec:	4013      	ands	r3, r2
 80018ee:	d01e      	beq.n	800192e <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	2205      	movs	r2, #5
 80018f6:	4252      	negs	r2, r2
 80018f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2202      	movs	r2, #2
 80018fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	699a      	ldr	r2, [r3, #24]
 8001906:	23c0      	movs	r3, #192	@ 0xc0
 8001908:	009b      	lsls	r3, r3, #2
 800190a:	4013      	ands	r3, r2
 800190c:	d004      	beq.n	8001918 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	0018      	movs	r0, r3
 8001912:	f000 faa1 	bl	8001e58 <HAL_TIM_IC_CaptureCallback>
 8001916:	e007      	b.n	8001928 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	0018      	movs	r0, r3
 800191c:	f000 fa94 	bl	8001e48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	0018      	movs	r0, r3
 8001924:	f000 faa0 	bl	8001e68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2200      	movs	r2, #0
 800192c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800192e:	68bb      	ldr	r3, [r7, #8]
 8001930:	2208      	movs	r2, #8
 8001932:	4013      	ands	r3, r2
 8001934:	d021      	beq.n	800197a <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	2208      	movs	r2, #8
 800193a:	4013      	ands	r3, r2
 800193c:	d01d      	beq.n	800197a <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	2209      	movs	r2, #9
 8001944:	4252      	negs	r2, r2
 8001946:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2204      	movs	r2, #4
 800194c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	69db      	ldr	r3, [r3, #28]
 8001954:	2203      	movs	r2, #3
 8001956:	4013      	ands	r3, r2
 8001958:	d004      	beq.n	8001964 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	0018      	movs	r0, r3
 800195e:	f000 fa7b 	bl	8001e58 <HAL_TIM_IC_CaptureCallback>
 8001962:	e007      	b.n	8001974 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	0018      	movs	r0, r3
 8001968:	f000 fa6e 	bl	8001e48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	0018      	movs	r0, r3
 8001970:	f000 fa7a 	bl	8001e68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2200      	movs	r2, #0
 8001978:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800197a:	68bb      	ldr	r3, [r7, #8]
 800197c:	2210      	movs	r2, #16
 800197e:	4013      	ands	r3, r2
 8001980:	d022      	beq.n	80019c8 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	2210      	movs	r2, #16
 8001986:	4013      	ands	r3, r2
 8001988:	d01e      	beq.n	80019c8 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	2211      	movs	r2, #17
 8001990:	4252      	negs	r2, r2
 8001992:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2208      	movs	r2, #8
 8001998:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	69da      	ldr	r2, [r3, #28]
 80019a0:	23c0      	movs	r3, #192	@ 0xc0
 80019a2:	009b      	lsls	r3, r3, #2
 80019a4:	4013      	ands	r3, r2
 80019a6:	d004      	beq.n	80019b2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	0018      	movs	r0, r3
 80019ac:	f000 fa54 	bl	8001e58 <HAL_TIM_IC_CaptureCallback>
 80019b0:	e007      	b.n	80019c2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	0018      	movs	r0, r3
 80019b6:	f000 fa47 	bl	8001e48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	0018      	movs	r0, r3
 80019be:	f000 fa53 	bl	8001e68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2200      	movs	r2, #0
 80019c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80019c8:	68bb      	ldr	r3, [r7, #8]
 80019ca:	2201      	movs	r2, #1
 80019cc:	4013      	ands	r3, r2
 80019ce:	d00c      	beq.n	80019ea <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	2201      	movs	r2, #1
 80019d4:	4013      	ands	r3, r2
 80019d6:	d008      	beq.n	80019ea <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	2202      	movs	r2, #2
 80019de:	4252      	negs	r2, r2
 80019e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	0018      	movs	r0, r3
 80019e6:	f000 fa27 	bl	8001e38 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80019ea:	68bb      	ldr	r3, [r7, #8]
 80019ec:	2280      	movs	r2, #128	@ 0x80
 80019ee:	4013      	ands	r3, r2
 80019f0:	d104      	bne.n	80019fc <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80019f2:	68ba      	ldr	r2, [r7, #8]
 80019f4:	2380      	movs	r3, #128	@ 0x80
 80019f6:	019b      	lsls	r3, r3, #6
 80019f8:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80019fa:	d00b      	beq.n	8001a14 <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	2280      	movs	r2, #128	@ 0x80
 8001a00:	4013      	ands	r3, r2
 8001a02:	d007      	beq.n	8001a14 <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a1e      	ldr	r2, [pc, #120]	@ (8001a84 <HAL_TIM_IRQHandler+0x208>)
 8001a0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	0018      	movs	r0, r3
 8001a10:	f000 fe56 	bl	80026c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8001a14:	68ba      	ldr	r2, [r7, #8]
 8001a16:	2380      	movs	r3, #128	@ 0x80
 8001a18:	005b      	lsls	r3, r3, #1
 8001a1a:	4013      	ands	r3, r2
 8001a1c:	d00b      	beq.n	8001a36 <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	2280      	movs	r2, #128	@ 0x80
 8001a22:	4013      	ands	r3, r2
 8001a24:	d007      	beq.n	8001a36 <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4a17      	ldr	r2, [pc, #92]	@ (8001a88 <HAL_TIM_IRQHandler+0x20c>)
 8001a2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	0018      	movs	r0, r3
 8001a32:	f000 fe4d 	bl	80026d0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001a36:	68bb      	ldr	r3, [r7, #8]
 8001a38:	2240      	movs	r2, #64	@ 0x40
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	d00c      	beq.n	8001a58 <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	2240      	movs	r2, #64	@ 0x40
 8001a42:	4013      	ands	r3, r2
 8001a44:	d008      	beq.n	8001a58 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	2241      	movs	r2, #65	@ 0x41
 8001a4c:	4252      	negs	r2, r2
 8001a4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	0018      	movs	r0, r3
 8001a54:	f000 fa10 	bl	8001e78 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001a58:	68bb      	ldr	r3, [r7, #8]
 8001a5a:	2220      	movs	r2, #32
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	d00c      	beq.n	8001a7a <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	2220      	movs	r2, #32
 8001a64:	4013      	ands	r3, r2
 8001a66:	d008      	beq.n	8001a7a <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	2221      	movs	r2, #33	@ 0x21
 8001a6e:	4252      	negs	r2, r2
 8001a70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	0018      	movs	r0, r3
 8001a76:	f000 fe1b 	bl	80026b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001a7a:	46c0      	nop			@ (mov r8, r8)
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	b004      	add	sp, #16
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	46c0      	nop			@ (mov r8, r8)
 8001a84:	ffffdf7f 	.word	0xffffdf7f
 8001a88:	fffffeff 	.word	0xfffffeff

08001a8c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b086      	sub	sp, #24
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	60f8      	str	r0, [r7, #12]
 8001a94:	60b9      	str	r1, [r7, #8]
 8001a96:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a98:	2317      	movs	r3, #23
 8001a9a:	18fb      	adds	r3, r7, r3
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	223c      	movs	r2, #60	@ 0x3c
 8001aa4:	5c9b      	ldrb	r3, [r3, r2]
 8001aa6:	2b01      	cmp	r3, #1
 8001aa8:	d101      	bne.n	8001aae <HAL_TIM_PWM_ConfigChannel+0x22>
 8001aaa:	2302      	movs	r3, #2
 8001aac:	e0e5      	b.n	8001c7a <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	223c      	movs	r2, #60	@ 0x3c
 8001ab2:	2101      	movs	r1, #1
 8001ab4:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2b14      	cmp	r3, #20
 8001aba:	d900      	bls.n	8001abe <HAL_TIM_PWM_ConfigChannel+0x32>
 8001abc:	e0d1      	b.n	8001c62 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	009a      	lsls	r2, r3, #2
 8001ac2:	4b70      	ldr	r3, [pc, #448]	@ (8001c84 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8001ac4:	18d3      	adds	r3, r2, r3
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	68ba      	ldr	r2, [r7, #8]
 8001ad0:	0011      	movs	r1, r2
 8001ad2:	0018      	movs	r0, r3
 8001ad4:	f000 fa52 	bl	8001f7c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	699a      	ldr	r2, [r3, #24]
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	2108      	movs	r1, #8
 8001ae4:	430a      	orrs	r2, r1
 8001ae6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	699a      	ldr	r2, [r3, #24]
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	2104      	movs	r1, #4
 8001af4:	438a      	bics	r2, r1
 8001af6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	6999      	ldr	r1, [r3, #24]
 8001afe:	68bb      	ldr	r3, [r7, #8]
 8001b00:	691a      	ldr	r2, [r3, #16]
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	430a      	orrs	r2, r1
 8001b08:	619a      	str	r2, [r3, #24]
      break;
 8001b0a:	e0af      	b.n	8001c6c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	68ba      	ldr	r2, [r7, #8]
 8001b12:	0011      	movs	r1, r2
 8001b14:	0018      	movs	r0, r3
 8001b16:	f000 fab1 	bl	800207c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	699a      	ldr	r2, [r3, #24]
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	2180      	movs	r1, #128	@ 0x80
 8001b26:	0109      	lsls	r1, r1, #4
 8001b28:	430a      	orrs	r2, r1
 8001b2a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	699a      	ldr	r2, [r3, #24]
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4954      	ldr	r1, [pc, #336]	@ (8001c88 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8001b38:	400a      	ands	r2, r1
 8001b3a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	6999      	ldr	r1, [r3, #24]
 8001b42:	68bb      	ldr	r3, [r7, #8]
 8001b44:	691b      	ldr	r3, [r3, #16]
 8001b46:	021a      	lsls	r2, r3, #8
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	430a      	orrs	r2, r1
 8001b4e:	619a      	str	r2, [r3, #24]
      break;
 8001b50:	e08c      	b.n	8001c6c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	68ba      	ldr	r2, [r7, #8]
 8001b58:	0011      	movs	r1, r2
 8001b5a:	0018      	movs	r0, r3
 8001b5c:	f000 fb0c 	bl	8002178 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	69da      	ldr	r2, [r3, #28]
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	2108      	movs	r1, #8
 8001b6c:	430a      	orrs	r2, r1
 8001b6e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	69da      	ldr	r2, [r3, #28]
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	2104      	movs	r1, #4
 8001b7c:	438a      	bics	r2, r1
 8001b7e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	69d9      	ldr	r1, [r3, #28]
 8001b86:	68bb      	ldr	r3, [r7, #8]
 8001b88:	691a      	ldr	r2, [r3, #16]
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	430a      	orrs	r2, r1
 8001b90:	61da      	str	r2, [r3, #28]
      break;
 8001b92:	e06b      	b.n	8001c6c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	68ba      	ldr	r2, [r7, #8]
 8001b9a:	0011      	movs	r1, r2
 8001b9c:	0018      	movs	r0, r3
 8001b9e:	f000 fb6d 	bl	800227c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	69da      	ldr	r2, [r3, #28]
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	2180      	movs	r1, #128	@ 0x80
 8001bae:	0109      	lsls	r1, r1, #4
 8001bb0:	430a      	orrs	r2, r1
 8001bb2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	69da      	ldr	r2, [r3, #28]
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4932      	ldr	r1, [pc, #200]	@ (8001c88 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8001bc0:	400a      	ands	r2, r1
 8001bc2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	69d9      	ldr	r1, [r3, #28]
 8001bca:	68bb      	ldr	r3, [r7, #8]
 8001bcc:	691b      	ldr	r3, [r3, #16]
 8001bce:	021a      	lsls	r2, r3, #8
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	430a      	orrs	r2, r1
 8001bd6:	61da      	str	r2, [r3, #28]
      break;
 8001bd8:	e048      	b.n	8001c6c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	68ba      	ldr	r2, [r7, #8]
 8001be0:	0011      	movs	r1, r2
 8001be2:	0018      	movs	r0, r3
 8001be4:	f000 fbae 	bl	8002344 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	2108      	movs	r1, #8
 8001bf4:	430a      	orrs	r2, r1
 8001bf6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	2104      	movs	r1, #4
 8001c04:	438a      	bics	r2, r1
 8001c06:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8001c0e:	68bb      	ldr	r3, [r7, #8]
 8001c10:	691a      	ldr	r2, [r3, #16]
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	430a      	orrs	r2, r1
 8001c18:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8001c1a:	e027      	b.n	8001c6c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	68ba      	ldr	r2, [r7, #8]
 8001c22:	0011      	movs	r1, r2
 8001c24:	0018      	movs	r0, r3
 8001c26:	f000 fbe7 	bl	80023f8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	2180      	movs	r1, #128	@ 0x80
 8001c36:	0109      	lsls	r1, r1, #4
 8001c38:	430a      	orrs	r2, r1
 8001c3a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4910      	ldr	r1, [pc, #64]	@ (8001c88 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8001c48:	400a      	ands	r2, r1
 8001c4a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8001c52:	68bb      	ldr	r3, [r7, #8]
 8001c54:	691b      	ldr	r3, [r3, #16]
 8001c56:	021a      	lsls	r2, r3, #8
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	430a      	orrs	r2, r1
 8001c5e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8001c60:	e004      	b.n	8001c6c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8001c62:	2317      	movs	r3, #23
 8001c64:	18fb      	adds	r3, r7, r3
 8001c66:	2201      	movs	r2, #1
 8001c68:	701a      	strb	r2, [r3, #0]
      break;
 8001c6a:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	223c      	movs	r2, #60	@ 0x3c
 8001c70:	2100      	movs	r1, #0
 8001c72:	5499      	strb	r1, [r3, r2]

  return status;
 8001c74:	2317      	movs	r3, #23
 8001c76:	18fb      	adds	r3, r7, r3
 8001c78:	781b      	ldrb	r3, [r3, #0]
}
 8001c7a:	0018      	movs	r0, r3
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	b006      	add	sp, #24
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	46c0      	nop			@ (mov r8, r8)
 8001c84:	08002790 	.word	0x08002790
 8001c88:	fffffbff 	.word	0xfffffbff

08001c8c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b084      	sub	sp, #16
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
 8001c94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001c96:	230f      	movs	r3, #15
 8001c98:	18fb      	adds	r3, r7, r3
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	223c      	movs	r2, #60	@ 0x3c
 8001ca2:	5c9b      	ldrb	r3, [r3, r2]
 8001ca4:	2b01      	cmp	r3, #1
 8001ca6:	d101      	bne.n	8001cac <HAL_TIM_ConfigClockSource+0x20>
 8001ca8:	2302      	movs	r3, #2
 8001caa:	e0bc      	b.n	8001e26 <HAL_TIM_ConfigClockSource+0x19a>
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	223c      	movs	r2, #60	@ 0x3c
 8001cb0:	2101      	movs	r1, #1
 8001cb2:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	223d      	movs	r2, #61	@ 0x3d
 8001cb8:	2102      	movs	r1, #2
 8001cba:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001cc4:	68bb      	ldr	r3, [r7, #8]
 8001cc6:	4a5a      	ldr	r2, [pc, #360]	@ (8001e30 <HAL_TIM_ConfigClockSource+0x1a4>)
 8001cc8:	4013      	ands	r3, r2
 8001cca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001ccc:	68bb      	ldr	r3, [r7, #8]
 8001cce:	4a59      	ldr	r2, [pc, #356]	@ (8001e34 <HAL_TIM_ConfigClockSource+0x1a8>)
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	68ba      	ldr	r2, [r7, #8]
 8001cda:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	2280      	movs	r2, #128	@ 0x80
 8001ce2:	0192      	lsls	r2, r2, #6
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d040      	beq.n	8001d6a <HAL_TIM_ConfigClockSource+0xde>
 8001ce8:	2280      	movs	r2, #128	@ 0x80
 8001cea:	0192      	lsls	r2, r2, #6
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d900      	bls.n	8001cf2 <HAL_TIM_ConfigClockSource+0x66>
 8001cf0:	e088      	b.n	8001e04 <HAL_TIM_ConfigClockSource+0x178>
 8001cf2:	2280      	movs	r2, #128	@ 0x80
 8001cf4:	0152      	lsls	r2, r2, #5
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d100      	bne.n	8001cfc <HAL_TIM_ConfigClockSource+0x70>
 8001cfa:	e088      	b.n	8001e0e <HAL_TIM_ConfigClockSource+0x182>
 8001cfc:	2280      	movs	r2, #128	@ 0x80
 8001cfe:	0152      	lsls	r2, r2, #5
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d900      	bls.n	8001d06 <HAL_TIM_ConfigClockSource+0x7a>
 8001d04:	e07e      	b.n	8001e04 <HAL_TIM_ConfigClockSource+0x178>
 8001d06:	2b70      	cmp	r3, #112	@ 0x70
 8001d08:	d018      	beq.n	8001d3c <HAL_TIM_ConfigClockSource+0xb0>
 8001d0a:	d900      	bls.n	8001d0e <HAL_TIM_ConfigClockSource+0x82>
 8001d0c:	e07a      	b.n	8001e04 <HAL_TIM_ConfigClockSource+0x178>
 8001d0e:	2b60      	cmp	r3, #96	@ 0x60
 8001d10:	d04f      	beq.n	8001db2 <HAL_TIM_ConfigClockSource+0x126>
 8001d12:	d900      	bls.n	8001d16 <HAL_TIM_ConfigClockSource+0x8a>
 8001d14:	e076      	b.n	8001e04 <HAL_TIM_ConfigClockSource+0x178>
 8001d16:	2b50      	cmp	r3, #80	@ 0x50
 8001d18:	d03b      	beq.n	8001d92 <HAL_TIM_ConfigClockSource+0x106>
 8001d1a:	d900      	bls.n	8001d1e <HAL_TIM_ConfigClockSource+0x92>
 8001d1c:	e072      	b.n	8001e04 <HAL_TIM_ConfigClockSource+0x178>
 8001d1e:	2b40      	cmp	r3, #64	@ 0x40
 8001d20:	d057      	beq.n	8001dd2 <HAL_TIM_ConfigClockSource+0x146>
 8001d22:	d900      	bls.n	8001d26 <HAL_TIM_ConfigClockSource+0x9a>
 8001d24:	e06e      	b.n	8001e04 <HAL_TIM_ConfigClockSource+0x178>
 8001d26:	2b30      	cmp	r3, #48	@ 0x30
 8001d28:	d063      	beq.n	8001df2 <HAL_TIM_ConfigClockSource+0x166>
 8001d2a:	d86b      	bhi.n	8001e04 <HAL_TIM_ConfigClockSource+0x178>
 8001d2c:	2b20      	cmp	r3, #32
 8001d2e:	d060      	beq.n	8001df2 <HAL_TIM_ConfigClockSource+0x166>
 8001d30:	d868      	bhi.n	8001e04 <HAL_TIM_ConfigClockSource+0x178>
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d05d      	beq.n	8001df2 <HAL_TIM_ConfigClockSource+0x166>
 8001d36:	2b10      	cmp	r3, #16
 8001d38:	d05b      	beq.n	8001df2 <HAL_TIM_ConfigClockSource+0x166>
 8001d3a:	e063      	b.n	8001e04 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001d4c:	f000 fc2e 	bl	80025ac <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001d58:	68bb      	ldr	r3, [r7, #8]
 8001d5a:	2277      	movs	r2, #119	@ 0x77
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	68ba      	ldr	r2, [r7, #8]
 8001d66:	609a      	str	r2, [r3, #8]
      break;
 8001d68:	e052      	b.n	8001e10 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001d7a:	f000 fc17 	bl	80025ac <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	689a      	ldr	r2, [r3, #8]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	2180      	movs	r1, #128	@ 0x80
 8001d8a:	01c9      	lsls	r1, r1, #7
 8001d8c:	430a      	orrs	r2, r1
 8001d8e:	609a      	str	r2, [r3, #8]
      break;
 8001d90:	e03e      	b.n	8001e10 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001d9e:	001a      	movs	r2, r3
 8001da0:	f000 fb88 	bl	80024b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	2150      	movs	r1, #80	@ 0x50
 8001daa:	0018      	movs	r0, r3
 8001dac:	f000 fbe2 	bl	8002574 <TIM_ITRx_SetConfig>
      break;
 8001db0:	e02e      	b.n	8001e10 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001dbe:	001a      	movs	r2, r3
 8001dc0:	f000 fba6 	bl	8002510 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	2160      	movs	r1, #96	@ 0x60
 8001dca:	0018      	movs	r0, r3
 8001dcc:	f000 fbd2 	bl	8002574 <TIM_ITRx_SetConfig>
      break;
 8001dd0:	e01e      	b.n	8001e10 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001dde:	001a      	movs	r2, r3
 8001de0:	f000 fb68 	bl	80024b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	2140      	movs	r1, #64	@ 0x40
 8001dea:	0018      	movs	r0, r3
 8001dec:	f000 fbc2 	bl	8002574 <TIM_ITRx_SetConfig>
      break;
 8001df0:	e00e      	b.n	8001e10 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681a      	ldr	r2, [r3, #0]
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	0019      	movs	r1, r3
 8001dfc:	0010      	movs	r0, r2
 8001dfe:	f000 fbb9 	bl	8002574 <TIM_ITRx_SetConfig>
      break;
 8001e02:	e005      	b.n	8001e10 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8001e04:	230f      	movs	r3, #15
 8001e06:	18fb      	adds	r3, r7, r3
 8001e08:	2201      	movs	r2, #1
 8001e0a:	701a      	strb	r2, [r3, #0]
      break;
 8001e0c:	e000      	b.n	8001e10 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8001e0e:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	223d      	movs	r2, #61	@ 0x3d
 8001e14:	2101      	movs	r1, #1
 8001e16:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	223c      	movs	r2, #60	@ 0x3c
 8001e1c:	2100      	movs	r1, #0
 8001e1e:	5499      	strb	r1, [r3, r2]

  return status;
 8001e20:	230f      	movs	r3, #15
 8001e22:	18fb      	adds	r3, r7, r3
 8001e24:	781b      	ldrb	r3, [r3, #0]
}
 8001e26:	0018      	movs	r0, r3
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	b004      	add	sp, #16
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	46c0      	nop			@ (mov r8, r8)
 8001e30:	ffceff88 	.word	0xffceff88
 8001e34:	ffff00ff 	.word	0xffff00ff

08001e38 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b082      	sub	sp, #8
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8001e40:	46c0      	nop			@ (mov r8, r8)
 8001e42:	46bd      	mov	sp, r7
 8001e44:	b002      	add	sp, #8
 8001e46:	bd80      	pop	{r7, pc}

08001e48 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b082      	sub	sp, #8
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001e50:	46c0      	nop			@ (mov r8, r8)
 8001e52:	46bd      	mov	sp, r7
 8001e54:	b002      	add	sp, #8
 8001e56:	bd80      	pop	{r7, pc}

08001e58 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b082      	sub	sp, #8
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001e60:	46c0      	nop			@ (mov r8, r8)
 8001e62:	46bd      	mov	sp, r7
 8001e64:	b002      	add	sp, #8
 8001e66:	bd80      	pop	{r7, pc}

08001e68 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b082      	sub	sp, #8
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001e70:	46c0      	nop			@ (mov r8, r8)
 8001e72:	46bd      	mov	sp, r7
 8001e74:	b002      	add	sp, #8
 8001e76:	bd80      	pop	{r7, pc}

08001e78 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b082      	sub	sp, #8
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001e80:	46c0      	nop			@ (mov r8, r8)
 8001e82:	46bd      	mov	sp, r7
 8001e84:	b002      	add	sp, #8
 8001e86:	bd80      	pop	{r7, pc}

08001e88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b084      	sub	sp, #16
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
 8001e90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	4a32      	ldr	r2, [pc, #200]	@ (8001f64 <TIM_Base_SetConfig+0xdc>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d003      	beq.n	8001ea8 <TIM_Base_SetConfig+0x20>
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	4a31      	ldr	r2, [pc, #196]	@ (8001f68 <TIM_Base_SetConfig+0xe0>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d108      	bne.n	8001eba <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	2270      	movs	r2, #112	@ 0x70
 8001eac:	4393      	bics	r3, r2
 8001eae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	68fa      	ldr	r2, [r7, #12]
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	4a29      	ldr	r2, [pc, #164]	@ (8001f64 <TIM_Base_SetConfig+0xdc>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d00f      	beq.n	8001ee2 <TIM_Base_SetConfig+0x5a>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	4a28      	ldr	r2, [pc, #160]	@ (8001f68 <TIM_Base_SetConfig+0xe0>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d00b      	beq.n	8001ee2 <TIM_Base_SetConfig+0x5a>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	4a27      	ldr	r2, [pc, #156]	@ (8001f6c <TIM_Base_SetConfig+0xe4>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d007      	beq.n	8001ee2 <TIM_Base_SetConfig+0x5a>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	4a26      	ldr	r2, [pc, #152]	@ (8001f70 <TIM_Base_SetConfig+0xe8>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d003      	beq.n	8001ee2 <TIM_Base_SetConfig+0x5a>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	4a25      	ldr	r2, [pc, #148]	@ (8001f74 <TIM_Base_SetConfig+0xec>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d108      	bne.n	8001ef4 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	4a24      	ldr	r2, [pc, #144]	@ (8001f78 <TIM_Base_SetConfig+0xf0>)
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	68db      	ldr	r3, [r3, #12]
 8001eee:	68fa      	ldr	r2, [r7, #12]
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	2280      	movs	r2, #128	@ 0x80
 8001ef8:	4393      	bics	r3, r2
 8001efa:	001a      	movs	r2, r3
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	695b      	ldr	r3, [r3, #20]
 8001f00:	4313      	orrs	r3, r2
 8001f02:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	68fa      	ldr	r2, [r7, #12]
 8001f08:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	689a      	ldr	r2, [r3, #8]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	681a      	ldr	r2, [r3, #0]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	4a11      	ldr	r2, [pc, #68]	@ (8001f64 <TIM_Base_SetConfig+0xdc>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d007      	beq.n	8001f32 <TIM_Base_SetConfig+0xaa>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	4a12      	ldr	r2, [pc, #72]	@ (8001f70 <TIM_Base_SetConfig+0xe8>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d003      	beq.n	8001f32 <TIM_Base_SetConfig+0xaa>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	4a11      	ldr	r2, [pc, #68]	@ (8001f74 <TIM_Base_SetConfig+0xec>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d103      	bne.n	8001f3a <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	691a      	ldr	r2, [r3, #16]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	691b      	ldr	r3, [r3, #16]
 8001f44:	2201      	movs	r2, #1
 8001f46:	4013      	ands	r3, r2
 8001f48:	2b01      	cmp	r3, #1
 8001f4a:	d106      	bne.n	8001f5a <TIM_Base_SetConfig+0xd2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	691b      	ldr	r3, [r3, #16]
 8001f50:	2201      	movs	r2, #1
 8001f52:	4393      	bics	r3, r2
 8001f54:	001a      	movs	r2, r3
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	611a      	str	r2, [r3, #16]
  }
}
 8001f5a:	46c0      	nop			@ (mov r8, r8)
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	b004      	add	sp, #16
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	46c0      	nop			@ (mov r8, r8)
 8001f64:	40012c00 	.word	0x40012c00
 8001f68:	40000400 	.word	0x40000400
 8001f6c:	40002000 	.word	0x40002000
 8001f70:	40014400 	.word	0x40014400
 8001f74:	40014800 	.word	0x40014800
 8001f78:	fffffcff 	.word	0xfffffcff

08001f7c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b086      	sub	sp, #24
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
 8001f84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6a1b      	ldr	r3, [r3, #32]
 8001f8a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6a1b      	ldr	r3, [r3, #32]
 8001f90:	2201      	movs	r2, #1
 8001f92:	4393      	bics	r3, r2
 8001f94:	001a      	movs	r2, r3
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	699b      	ldr	r3, [r3, #24]
 8001fa4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	4a2e      	ldr	r2, [pc, #184]	@ (8002064 <TIM_OC1_SetConfig+0xe8>)
 8001faa:	4013      	ands	r3, r2
 8001fac:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	2203      	movs	r2, #3
 8001fb2:	4393      	bics	r3, r2
 8001fb4:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	68fa      	ldr	r2, [r7, #12]
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	2202      	movs	r2, #2
 8001fc4:	4393      	bics	r3, r2
 8001fc6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	689b      	ldr	r3, [r3, #8]
 8001fcc:	697a      	ldr	r2, [r7, #20]
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	4a24      	ldr	r2, [pc, #144]	@ (8002068 <TIM_OC1_SetConfig+0xec>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d007      	beq.n	8001fea <TIM_OC1_SetConfig+0x6e>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	4a23      	ldr	r2, [pc, #140]	@ (800206c <TIM_OC1_SetConfig+0xf0>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d003      	beq.n	8001fea <TIM_OC1_SetConfig+0x6e>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	4a22      	ldr	r2, [pc, #136]	@ (8002070 <TIM_OC1_SetConfig+0xf4>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d10c      	bne.n	8002004 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	2208      	movs	r2, #8
 8001fee:	4393      	bics	r3, r2
 8001ff0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	68db      	ldr	r3, [r3, #12]
 8001ff6:	697a      	ldr	r2, [r7, #20]
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	2204      	movs	r2, #4
 8002000:	4393      	bics	r3, r2
 8002002:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	4a18      	ldr	r2, [pc, #96]	@ (8002068 <TIM_OC1_SetConfig+0xec>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d007      	beq.n	800201c <TIM_OC1_SetConfig+0xa0>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	4a17      	ldr	r2, [pc, #92]	@ (800206c <TIM_OC1_SetConfig+0xf0>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d003      	beq.n	800201c <TIM_OC1_SetConfig+0xa0>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	4a16      	ldr	r2, [pc, #88]	@ (8002070 <TIM_OC1_SetConfig+0xf4>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d111      	bne.n	8002040 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800201c:	693b      	ldr	r3, [r7, #16]
 800201e:	4a15      	ldr	r2, [pc, #84]	@ (8002074 <TIM_OC1_SetConfig+0xf8>)
 8002020:	4013      	ands	r3, r2
 8002022:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	4a14      	ldr	r2, [pc, #80]	@ (8002078 <TIM_OC1_SetConfig+0xfc>)
 8002028:	4013      	ands	r3, r2
 800202a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	695b      	ldr	r3, [r3, #20]
 8002030:	693a      	ldr	r2, [r7, #16]
 8002032:	4313      	orrs	r3, r2
 8002034:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	699b      	ldr	r3, [r3, #24]
 800203a:	693a      	ldr	r2, [r7, #16]
 800203c:	4313      	orrs	r3, r2
 800203e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	693a      	ldr	r2, [r7, #16]
 8002044:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	68fa      	ldr	r2, [r7, #12]
 800204a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	685a      	ldr	r2, [r3, #4]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	697a      	ldr	r2, [r7, #20]
 8002058:	621a      	str	r2, [r3, #32]
}
 800205a:	46c0      	nop			@ (mov r8, r8)
 800205c:	46bd      	mov	sp, r7
 800205e:	b006      	add	sp, #24
 8002060:	bd80      	pop	{r7, pc}
 8002062:	46c0      	nop			@ (mov r8, r8)
 8002064:	fffeff8f 	.word	0xfffeff8f
 8002068:	40012c00 	.word	0x40012c00
 800206c:	40014400 	.word	0x40014400
 8002070:	40014800 	.word	0x40014800
 8002074:	fffffeff 	.word	0xfffffeff
 8002078:	fffffdff 	.word	0xfffffdff

0800207c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b086      	sub	sp, #24
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
 8002084:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6a1b      	ldr	r3, [r3, #32]
 800208a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6a1b      	ldr	r3, [r3, #32]
 8002090:	2210      	movs	r2, #16
 8002092:	4393      	bics	r3, r2
 8002094:	001a      	movs	r2, r3
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	699b      	ldr	r3, [r3, #24]
 80020a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	4a2c      	ldr	r2, [pc, #176]	@ (800215c <TIM_OC2_SetConfig+0xe0>)
 80020aa:	4013      	ands	r3, r2
 80020ac:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	4a2b      	ldr	r2, [pc, #172]	@ (8002160 <TIM_OC2_SetConfig+0xe4>)
 80020b2:	4013      	ands	r3, r2
 80020b4:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	021b      	lsls	r3, r3, #8
 80020bc:	68fa      	ldr	r2, [r7, #12]
 80020be:	4313      	orrs	r3, r2
 80020c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80020c2:	697b      	ldr	r3, [r7, #20]
 80020c4:	2220      	movs	r2, #32
 80020c6:	4393      	bics	r3, r2
 80020c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	689b      	ldr	r3, [r3, #8]
 80020ce:	011b      	lsls	r3, r3, #4
 80020d0:	697a      	ldr	r2, [r7, #20]
 80020d2:	4313      	orrs	r3, r2
 80020d4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	4a22      	ldr	r2, [pc, #136]	@ (8002164 <TIM_OC2_SetConfig+0xe8>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d10d      	bne.n	80020fa <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80020de:	697b      	ldr	r3, [r7, #20]
 80020e0:	2280      	movs	r2, #128	@ 0x80
 80020e2:	4393      	bics	r3, r2
 80020e4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	68db      	ldr	r3, [r3, #12]
 80020ea:	011b      	lsls	r3, r3, #4
 80020ec:	697a      	ldr	r2, [r7, #20]
 80020ee:	4313      	orrs	r3, r2
 80020f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	2240      	movs	r2, #64	@ 0x40
 80020f6:	4393      	bics	r3, r2
 80020f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	4a19      	ldr	r2, [pc, #100]	@ (8002164 <TIM_OC2_SetConfig+0xe8>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d007      	beq.n	8002112 <TIM_OC2_SetConfig+0x96>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	4a18      	ldr	r2, [pc, #96]	@ (8002168 <TIM_OC2_SetConfig+0xec>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d003      	beq.n	8002112 <TIM_OC2_SetConfig+0x96>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	4a17      	ldr	r2, [pc, #92]	@ (800216c <TIM_OC2_SetConfig+0xf0>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d113      	bne.n	800213a <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	4a16      	ldr	r2, [pc, #88]	@ (8002170 <TIM_OC2_SetConfig+0xf4>)
 8002116:	4013      	ands	r3, r2
 8002118:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	4a15      	ldr	r2, [pc, #84]	@ (8002174 <TIM_OC2_SetConfig+0xf8>)
 800211e:	4013      	ands	r3, r2
 8002120:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	695b      	ldr	r3, [r3, #20]
 8002126:	009b      	lsls	r3, r3, #2
 8002128:	693a      	ldr	r2, [r7, #16]
 800212a:	4313      	orrs	r3, r2
 800212c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	699b      	ldr	r3, [r3, #24]
 8002132:	009b      	lsls	r3, r3, #2
 8002134:	693a      	ldr	r2, [r7, #16]
 8002136:	4313      	orrs	r3, r2
 8002138:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	693a      	ldr	r2, [r7, #16]
 800213e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	68fa      	ldr	r2, [r7, #12]
 8002144:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	685a      	ldr	r2, [r3, #4]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	697a      	ldr	r2, [r7, #20]
 8002152:	621a      	str	r2, [r3, #32]
}
 8002154:	46c0      	nop			@ (mov r8, r8)
 8002156:	46bd      	mov	sp, r7
 8002158:	b006      	add	sp, #24
 800215a:	bd80      	pop	{r7, pc}
 800215c:	feff8fff 	.word	0xfeff8fff
 8002160:	fffffcff 	.word	0xfffffcff
 8002164:	40012c00 	.word	0x40012c00
 8002168:	40014400 	.word	0x40014400
 800216c:	40014800 	.word	0x40014800
 8002170:	fffffbff 	.word	0xfffffbff
 8002174:	fffff7ff 	.word	0xfffff7ff

08002178 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b086      	sub	sp, #24
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
 8002180:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6a1b      	ldr	r3, [r3, #32]
 8002186:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6a1b      	ldr	r3, [r3, #32]
 800218c:	4a31      	ldr	r2, [pc, #196]	@ (8002254 <TIM_OC3_SetConfig+0xdc>)
 800218e:	401a      	ands	r2, r3
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	69db      	ldr	r3, [r3, #28]
 800219e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	4a2d      	ldr	r2, [pc, #180]	@ (8002258 <TIM_OC3_SetConfig+0xe0>)
 80021a4:	4013      	ands	r3, r2
 80021a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	2203      	movs	r2, #3
 80021ac:	4393      	bics	r3, r2
 80021ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	68fa      	ldr	r2, [r7, #12]
 80021b6:	4313      	orrs	r3, r2
 80021b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80021ba:	697b      	ldr	r3, [r7, #20]
 80021bc:	4a27      	ldr	r2, [pc, #156]	@ (800225c <TIM_OC3_SetConfig+0xe4>)
 80021be:	4013      	ands	r3, r2
 80021c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	689b      	ldr	r3, [r3, #8]
 80021c6:	021b      	lsls	r3, r3, #8
 80021c8:	697a      	ldr	r2, [r7, #20]
 80021ca:	4313      	orrs	r3, r2
 80021cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	4a23      	ldr	r2, [pc, #140]	@ (8002260 <TIM_OC3_SetConfig+0xe8>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d10d      	bne.n	80021f2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80021d6:	697b      	ldr	r3, [r7, #20]
 80021d8:	4a22      	ldr	r2, [pc, #136]	@ (8002264 <TIM_OC3_SetConfig+0xec>)
 80021da:	4013      	ands	r3, r2
 80021dc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	68db      	ldr	r3, [r3, #12]
 80021e2:	021b      	lsls	r3, r3, #8
 80021e4:	697a      	ldr	r2, [r7, #20]
 80021e6:	4313      	orrs	r3, r2
 80021e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80021ea:	697b      	ldr	r3, [r7, #20]
 80021ec:	4a1e      	ldr	r2, [pc, #120]	@ (8002268 <TIM_OC3_SetConfig+0xf0>)
 80021ee:	4013      	ands	r3, r2
 80021f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	4a1a      	ldr	r2, [pc, #104]	@ (8002260 <TIM_OC3_SetConfig+0xe8>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d007      	beq.n	800220a <TIM_OC3_SetConfig+0x92>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	4a1b      	ldr	r2, [pc, #108]	@ (800226c <TIM_OC3_SetConfig+0xf4>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d003      	beq.n	800220a <TIM_OC3_SetConfig+0x92>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	4a1a      	ldr	r2, [pc, #104]	@ (8002270 <TIM_OC3_SetConfig+0xf8>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d113      	bne.n	8002232 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	4a19      	ldr	r2, [pc, #100]	@ (8002274 <TIM_OC3_SetConfig+0xfc>)
 800220e:	4013      	ands	r3, r2
 8002210:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	4a18      	ldr	r2, [pc, #96]	@ (8002278 <TIM_OC3_SetConfig+0x100>)
 8002216:	4013      	ands	r3, r2
 8002218:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	695b      	ldr	r3, [r3, #20]
 800221e:	011b      	lsls	r3, r3, #4
 8002220:	693a      	ldr	r2, [r7, #16]
 8002222:	4313      	orrs	r3, r2
 8002224:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	699b      	ldr	r3, [r3, #24]
 800222a:	011b      	lsls	r3, r3, #4
 800222c:	693a      	ldr	r2, [r7, #16]
 800222e:	4313      	orrs	r3, r2
 8002230:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	693a      	ldr	r2, [r7, #16]
 8002236:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	68fa      	ldr	r2, [r7, #12]
 800223c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	685a      	ldr	r2, [r3, #4]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	697a      	ldr	r2, [r7, #20]
 800224a:	621a      	str	r2, [r3, #32]
}
 800224c:	46c0      	nop			@ (mov r8, r8)
 800224e:	46bd      	mov	sp, r7
 8002250:	b006      	add	sp, #24
 8002252:	bd80      	pop	{r7, pc}
 8002254:	fffffeff 	.word	0xfffffeff
 8002258:	fffeff8f 	.word	0xfffeff8f
 800225c:	fffffdff 	.word	0xfffffdff
 8002260:	40012c00 	.word	0x40012c00
 8002264:	fffff7ff 	.word	0xfffff7ff
 8002268:	fffffbff 	.word	0xfffffbff
 800226c:	40014400 	.word	0x40014400
 8002270:	40014800 	.word	0x40014800
 8002274:	ffffefff 	.word	0xffffefff
 8002278:	ffffdfff 	.word	0xffffdfff

0800227c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b086      	sub	sp, #24
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
 8002284:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6a1b      	ldr	r3, [r3, #32]
 800228a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6a1b      	ldr	r3, [r3, #32]
 8002290:	4a24      	ldr	r2, [pc, #144]	@ (8002324 <TIM_OC4_SetConfig+0xa8>)
 8002292:	401a      	ands	r2, r3
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	69db      	ldr	r3, [r3, #28]
 80022a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	4a20      	ldr	r2, [pc, #128]	@ (8002328 <TIM_OC4_SetConfig+0xac>)
 80022a8:	4013      	ands	r3, r2
 80022aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	4a1f      	ldr	r2, [pc, #124]	@ (800232c <TIM_OC4_SetConfig+0xb0>)
 80022b0:	4013      	ands	r3, r2
 80022b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	021b      	lsls	r3, r3, #8
 80022ba:	68fa      	ldr	r2, [r7, #12]
 80022bc:	4313      	orrs	r3, r2
 80022be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80022c0:	693b      	ldr	r3, [r7, #16]
 80022c2:	4a1b      	ldr	r2, [pc, #108]	@ (8002330 <TIM_OC4_SetConfig+0xb4>)
 80022c4:	4013      	ands	r3, r2
 80022c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	031b      	lsls	r3, r3, #12
 80022ce:	693a      	ldr	r2, [r7, #16]
 80022d0:	4313      	orrs	r3, r2
 80022d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	4a17      	ldr	r2, [pc, #92]	@ (8002334 <TIM_OC4_SetConfig+0xb8>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d007      	beq.n	80022ec <TIM_OC4_SetConfig+0x70>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	4a16      	ldr	r2, [pc, #88]	@ (8002338 <TIM_OC4_SetConfig+0xbc>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d003      	beq.n	80022ec <TIM_OC4_SetConfig+0x70>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	4a15      	ldr	r2, [pc, #84]	@ (800233c <TIM_OC4_SetConfig+0xc0>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d109      	bne.n	8002300 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	4a14      	ldr	r2, [pc, #80]	@ (8002340 <TIM_OC4_SetConfig+0xc4>)
 80022f0:	4013      	ands	r3, r2
 80022f2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	695b      	ldr	r3, [r3, #20]
 80022f8:	019b      	lsls	r3, r3, #6
 80022fa:	697a      	ldr	r2, [r7, #20]
 80022fc:	4313      	orrs	r3, r2
 80022fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	697a      	ldr	r2, [r7, #20]
 8002304:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	68fa      	ldr	r2, [r7, #12]
 800230a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	685a      	ldr	r2, [r3, #4]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	693a      	ldr	r2, [r7, #16]
 8002318:	621a      	str	r2, [r3, #32]
}
 800231a:	46c0      	nop			@ (mov r8, r8)
 800231c:	46bd      	mov	sp, r7
 800231e:	b006      	add	sp, #24
 8002320:	bd80      	pop	{r7, pc}
 8002322:	46c0      	nop			@ (mov r8, r8)
 8002324:	ffffefff 	.word	0xffffefff
 8002328:	feff8fff 	.word	0xfeff8fff
 800232c:	fffffcff 	.word	0xfffffcff
 8002330:	ffffdfff 	.word	0xffffdfff
 8002334:	40012c00 	.word	0x40012c00
 8002338:	40014400 	.word	0x40014400
 800233c:	40014800 	.word	0x40014800
 8002340:	ffffbfff 	.word	0xffffbfff

08002344 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b086      	sub	sp, #24
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
 800234c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6a1b      	ldr	r3, [r3, #32]
 8002352:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6a1b      	ldr	r3, [r3, #32]
 8002358:	4a21      	ldr	r2, [pc, #132]	@ (80023e0 <TIM_OC5_SetConfig+0x9c>)
 800235a:	401a      	ands	r2, r3
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800236a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	4a1d      	ldr	r2, [pc, #116]	@ (80023e4 <TIM_OC5_SetConfig+0xa0>)
 8002370:	4013      	ands	r3, r2
 8002372:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	68fa      	ldr	r2, [r7, #12]
 800237a:	4313      	orrs	r3, r2
 800237c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	4a19      	ldr	r2, [pc, #100]	@ (80023e8 <TIM_OC5_SetConfig+0xa4>)
 8002382:	4013      	ands	r3, r2
 8002384:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	689b      	ldr	r3, [r3, #8]
 800238a:	041b      	lsls	r3, r3, #16
 800238c:	693a      	ldr	r2, [r7, #16]
 800238e:	4313      	orrs	r3, r2
 8002390:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	4a15      	ldr	r2, [pc, #84]	@ (80023ec <TIM_OC5_SetConfig+0xa8>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d007      	beq.n	80023aa <TIM_OC5_SetConfig+0x66>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	4a14      	ldr	r2, [pc, #80]	@ (80023f0 <TIM_OC5_SetConfig+0xac>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d003      	beq.n	80023aa <TIM_OC5_SetConfig+0x66>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	4a13      	ldr	r2, [pc, #76]	@ (80023f4 <TIM_OC5_SetConfig+0xb0>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d109      	bne.n	80023be <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	4a0c      	ldr	r2, [pc, #48]	@ (80023e0 <TIM_OC5_SetConfig+0x9c>)
 80023ae:	4013      	ands	r3, r2
 80023b0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	695b      	ldr	r3, [r3, #20]
 80023b6:	021b      	lsls	r3, r3, #8
 80023b8:	697a      	ldr	r2, [r7, #20]
 80023ba:	4313      	orrs	r3, r2
 80023bc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	697a      	ldr	r2, [r7, #20]
 80023c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	68fa      	ldr	r2, [r7, #12]
 80023c8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	685a      	ldr	r2, [r3, #4]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	693a      	ldr	r2, [r7, #16]
 80023d6:	621a      	str	r2, [r3, #32]
}
 80023d8:	46c0      	nop			@ (mov r8, r8)
 80023da:	46bd      	mov	sp, r7
 80023dc:	b006      	add	sp, #24
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	fffeffff 	.word	0xfffeffff
 80023e4:	fffeff8f 	.word	0xfffeff8f
 80023e8:	fffdffff 	.word	0xfffdffff
 80023ec:	40012c00 	.word	0x40012c00
 80023f0:	40014400 	.word	0x40014400
 80023f4:	40014800 	.word	0x40014800

080023f8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b086      	sub	sp, #24
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
 8002400:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6a1b      	ldr	r3, [r3, #32]
 8002406:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6a1b      	ldr	r3, [r3, #32]
 800240c:	4a22      	ldr	r2, [pc, #136]	@ (8002498 <TIM_OC6_SetConfig+0xa0>)
 800240e:	401a      	ands	r2, r3
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800241e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	4a1e      	ldr	r2, [pc, #120]	@ (800249c <TIM_OC6_SetConfig+0xa4>)
 8002424:	4013      	ands	r3, r2
 8002426:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	021b      	lsls	r3, r3, #8
 800242e:	68fa      	ldr	r2, [r7, #12]
 8002430:	4313      	orrs	r3, r2
 8002432:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	4a1a      	ldr	r2, [pc, #104]	@ (80024a0 <TIM_OC6_SetConfig+0xa8>)
 8002438:	4013      	ands	r3, r2
 800243a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	689b      	ldr	r3, [r3, #8]
 8002440:	051b      	lsls	r3, r3, #20
 8002442:	693a      	ldr	r2, [r7, #16]
 8002444:	4313      	orrs	r3, r2
 8002446:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	4a16      	ldr	r2, [pc, #88]	@ (80024a4 <TIM_OC6_SetConfig+0xac>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d007      	beq.n	8002460 <TIM_OC6_SetConfig+0x68>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	4a15      	ldr	r2, [pc, #84]	@ (80024a8 <TIM_OC6_SetConfig+0xb0>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d003      	beq.n	8002460 <TIM_OC6_SetConfig+0x68>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	4a14      	ldr	r2, [pc, #80]	@ (80024ac <TIM_OC6_SetConfig+0xb4>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d109      	bne.n	8002474 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	4a13      	ldr	r2, [pc, #76]	@ (80024b0 <TIM_OC6_SetConfig+0xb8>)
 8002464:	4013      	ands	r3, r2
 8002466:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	695b      	ldr	r3, [r3, #20]
 800246c:	029b      	lsls	r3, r3, #10
 800246e:	697a      	ldr	r2, [r7, #20]
 8002470:	4313      	orrs	r3, r2
 8002472:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	697a      	ldr	r2, [r7, #20]
 8002478:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	68fa      	ldr	r2, [r7, #12]
 800247e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	685a      	ldr	r2, [r3, #4]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	693a      	ldr	r2, [r7, #16]
 800248c:	621a      	str	r2, [r3, #32]
}
 800248e:	46c0      	nop			@ (mov r8, r8)
 8002490:	46bd      	mov	sp, r7
 8002492:	b006      	add	sp, #24
 8002494:	bd80      	pop	{r7, pc}
 8002496:	46c0      	nop			@ (mov r8, r8)
 8002498:	ffefffff 	.word	0xffefffff
 800249c:	feff8fff 	.word	0xfeff8fff
 80024a0:	ffdfffff 	.word	0xffdfffff
 80024a4:	40012c00 	.word	0x40012c00
 80024a8:	40014400 	.word	0x40014400
 80024ac:	40014800 	.word	0x40014800
 80024b0:	fffbffff 	.word	0xfffbffff

080024b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b086      	sub	sp, #24
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	60f8      	str	r0, [r7, #12]
 80024bc:	60b9      	str	r1, [r7, #8]
 80024be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	6a1b      	ldr	r3, [r3, #32]
 80024c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	6a1b      	ldr	r3, [r3, #32]
 80024ca:	2201      	movs	r2, #1
 80024cc:	4393      	bics	r3, r2
 80024ce:	001a      	movs	r2, r3
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	699b      	ldr	r3, [r3, #24]
 80024d8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	22f0      	movs	r2, #240	@ 0xf0
 80024de:	4393      	bics	r3, r2
 80024e0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	011b      	lsls	r3, r3, #4
 80024e6:	693a      	ldr	r2, [r7, #16]
 80024e8:	4313      	orrs	r3, r2
 80024ea:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	220a      	movs	r2, #10
 80024f0:	4393      	bics	r3, r2
 80024f2:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80024f4:	697a      	ldr	r2, [r7, #20]
 80024f6:	68bb      	ldr	r3, [r7, #8]
 80024f8:	4313      	orrs	r3, r2
 80024fa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	693a      	ldr	r2, [r7, #16]
 8002500:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	697a      	ldr	r2, [r7, #20]
 8002506:	621a      	str	r2, [r3, #32]
}
 8002508:	46c0      	nop			@ (mov r8, r8)
 800250a:	46bd      	mov	sp, r7
 800250c:	b006      	add	sp, #24
 800250e:	bd80      	pop	{r7, pc}

08002510 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b086      	sub	sp, #24
 8002514:	af00      	add	r7, sp, #0
 8002516:	60f8      	str	r0, [r7, #12]
 8002518:	60b9      	str	r1, [r7, #8]
 800251a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	6a1b      	ldr	r3, [r3, #32]
 8002520:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	6a1b      	ldr	r3, [r3, #32]
 8002526:	2210      	movs	r2, #16
 8002528:	4393      	bics	r3, r2
 800252a:	001a      	movs	r2, r3
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	699b      	ldr	r3, [r3, #24]
 8002534:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002536:	693b      	ldr	r3, [r7, #16]
 8002538:	4a0d      	ldr	r2, [pc, #52]	@ (8002570 <TIM_TI2_ConfigInputStage+0x60>)
 800253a:	4013      	ands	r3, r2
 800253c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	031b      	lsls	r3, r3, #12
 8002542:	693a      	ldr	r2, [r7, #16]
 8002544:	4313      	orrs	r3, r2
 8002546:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	22a0      	movs	r2, #160	@ 0xa0
 800254c:	4393      	bics	r3, r2
 800254e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	011b      	lsls	r3, r3, #4
 8002554:	697a      	ldr	r2, [r7, #20]
 8002556:	4313      	orrs	r3, r2
 8002558:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	693a      	ldr	r2, [r7, #16]
 800255e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	697a      	ldr	r2, [r7, #20]
 8002564:	621a      	str	r2, [r3, #32]
}
 8002566:	46c0      	nop			@ (mov r8, r8)
 8002568:	46bd      	mov	sp, r7
 800256a:	b006      	add	sp, #24
 800256c:	bd80      	pop	{r7, pc}
 800256e:	46c0      	nop			@ (mov r8, r8)
 8002570:	ffff0fff 	.word	0xffff0fff

08002574 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b084      	sub	sp, #16
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
 800257c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	4a08      	ldr	r2, [pc, #32]	@ (80025a8 <TIM_ITRx_SetConfig+0x34>)
 8002588:	4013      	ands	r3, r2
 800258a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800258c:	683a      	ldr	r2, [r7, #0]
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	4313      	orrs	r3, r2
 8002592:	2207      	movs	r2, #7
 8002594:	4313      	orrs	r3, r2
 8002596:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	68fa      	ldr	r2, [r7, #12]
 800259c:	609a      	str	r2, [r3, #8]
}
 800259e:	46c0      	nop			@ (mov r8, r8)
 80025a0:	46bd      	mov	sp, r7
 80025a2:	b004      	add	sp, #16
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	46c0      	nop			@ (mov r8, r8)
 80025a8:	ffcfff8f 	.word	0xffcfff8f

080025ac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b086      	sub	sp, #24
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	60f8      	str	r0, [r7, #12]
 80025b4:	60b9      	str	r1, [r7, #8]
 80025b6:	607a      	str	r2, [r7, #4]
 80025b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	4a09      	ldr	r2, [pc, #36]	@ (80025e8 <TIM_ETR_SetConfig+0x3c>)
 80025c4:	4013      	ands	r3, r2
 80025c6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	021a      	lsls	r2, r3, #8
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	431a      	orrs	r2, r3
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	4313      	orrs	r3, r2
 80025d4:	697a      	ldr	r2, [r7, #20]
 80025d6:	4313      	orrs	r3, r2
 80025d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	697a      	ldr	r2, [r7, #20]
 80025de:	609a      	str	r2, [r3, #8]
}
 80025e0:	46c0      	nop			@ (mov r8, r8)
 80025e2:	46bd      	mov	sp, r7
 80025e4:	b006      	add	sp, #24
 80025e6:	bd80      	pop	{r7, pc}
 80025e8:	ffff00ff 	.word	0xffff00ff

080025ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b084      	sub	sp, #16
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
 80025f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	223c      	movs	r2, #60	@ 0x3c
 80025fa:	5c9b      	ldrb	r3, [r3, r2]
 80025fc:	2b01      	cmp	r3, #1
 80025fe:	d101      	bne.n	8002604 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002600:	2302      	movs	r3, #2
 8002602:	e04a      	b.n	800269a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	223c      	movs	r2, #60	@ 0x3c
 8002608:	2101      	movs	r1, #1
 800260a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	223d      	movs	r2, #61	@ 0x3d
 8002610:	2102      	movs	r1, #2
 8002612:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	689b      	ldr	r3, [r3, #8]
 8002622:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a1e      	ldr	r2, [pc, #120]	@ (80026a4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d108      	bne.n	8002640 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	4a1d      	ldr	r2, [pc, #116]	@ (80026a8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8002632:	4013      	ands	r3, r2
 8002634:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	68fa      	ldr	r2, [r7, #12]
 800263c:	4313      	orrs	r3, r2
 800263e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	2270      	movs	r2, #112	@ 0x70
 8002644:	4393      	bics	r3, r2
 8002646:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	68fa      	ldr	r2, [r7, #12]
 800264e:	4313      	orrs	r3, r2
 8002650:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	68fa      	ldr	r2, [r7, #12]
 8002658:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a11      	ldr	r2, [pc, #68]	@ (80026a4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d004      	beq.n	800266e <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a10      	ldr	r2, [pc, #64]	@ (80026ac <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d10c      	bne.n	8002688 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	2280      	movs	r2, #128	@ 0x80
 8002672:	4393      	bics	r3, r2
 8002674:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	689b      	ldr	r3, [r3, #8]
 800267a:	68ba      	ldr	r2, [r7, #8]
 800267c:	4313      	orrs	r3, r2
 800267e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	68ba      	ldr	r2, [r7, #8]
 8002686:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	223d      	movs	r2, #61	@ 0x3d
 800268c:	2101      	movs	r1, #1
 800268e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	223c      	movs	r2, #60	@ 0x3c
 8002694:	2100      	movs	r1, #0
 8002696:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002698:	2300      	movs	r3, #0
}
 800269a:	0018      	movs	r0, r3
 800269c:	46bd      	mov	sp, r7
 800269e:	b004      	add	sp, #16
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	46c0      	nop			@ (mov r8, r8)
 80026a4:	40012c00 	.word	0x40012c00
 80026a8:	ff0fffff 	.word	0xff0fffff
 80026ac:	40000400 	.word	0x40000400

080026b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b082      	sub	sp, #8
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80026b8:	46c0      	nop			@ (mov r8, r8)
 80026ba:	46bd      	mov	sp, r7
 80026bc:	b002      	add	sp, #8
 80026be:	bd80      	pop	{r7, pc}

080026c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b082      	sub	sp, #8
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80026c8:	46c0      	nop			@ (mov r8, r8)
 80026ca:	46bd      	mov	sp, r7
 80026cc:	b002      	add	sp, #8
 80026ce:	bd80      	pop	{r7, pc}

080026d0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b082      	sub	sp, #8
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80026d8:	46c0      	nop			@ (mov r8, r8)
 80026da:	46bd      	mov	sp, r7
 80026dc:	b002      	add	sp, #8
 80026de:	bd80      	pop	{r7, pc}

080026e0 <memset>:
 80026e0:	0003      	movs	r3, r0
 80026e2:	1882      	adds	r2, r0, r2
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d100      	bne.n	80026ea <memset+0xa>
 80026e8:	4770      	bx	lr
 80026ea:	7019      	strb	r1, [r3, #0]
 80026ec:	3301      	adds	r3, #1
 80026ee:	e7f9      	b.n	80026e4 <memset+0x4>

080026f0 <__libc_init_array>:
 80026f0:	b570      	push	{r4, r5, r6, lr}
 80026f2:	2600      	movs	r6, #0
 80026f4:	4c0c      	ldr	r4, [pc, #48]	@ (8002728 <__libc_init_array+0x38>)
 80026f6:	4d0d      	ldr	r5, [pc, #52]	@ (800272c <__libc_init_array+0x3c>)
 80026f8:	1b64      	subs	r4, r4, r5
 80026fa:	10a4      	asrs	r4, r4, #2
 80026fc:	42a6      	cmp	r6, r4
 80026fe:	d109      	bne.n	8002714 <__libc_init_array+0x24>
 8002700:	2600      	movs	r6, #0
 8002702:	f000 f819 	bl	8002738 <_init>
 8002706:	4c0a      	ldr	r4, [pc, #40]	@ (8002730 <__libc_init_array+0x40>)
 8002708:	4d0a      	ldr	r5, [pc, #40]	@ (8002734 <__libc_init_array+0x44>)
 800270a:	1b64      	subs	r4, r4, r5
 800270c:	10a4      	asrs	r4, r4, #2
 800270e:	42a6      	cmp	r6, r4
 8002710:	d105      	bne.n	800271e <__libc_init_array+0x2e>
 8002712:	bd70      	pop	{r4, r5, r6, pc}
 8002714:	00b3      	lsls	r3, r6, #2
 8002716:	58eb      	ldr	r3, [r5, r3]
 8002718:	4798      	blx	r3
 800271a:	3601      	adds	r6, #1
 800271c:	e7ee      	b.n	80026fc <__libc_init_array+0xc>
 800271e:	00b3      	lsls	r3, r6, #2
 8002720:	58eb      	ldr	r3, [r5, r3]
 8002722:	4798      	blx	r3
 8002724:	3601      	adds	r6, #1
 8002726:	e7f2      	b.n	800270e <__libc_init_array+0x1e>
 8002728:	080027e4 	.word	0x080027e4
 800272c:	080027e4 	.word	0x080027e4
 8002730:	080027e8 	.word	0x080027e8
 8002734:	080027e4 	.word	0x080027e4

08002738 <_init>:
 8002738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800273a:	46c0      	nop			@ (mov r8, r8)
 800273c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800273e:	bc08      	pop	{r3}
 8002740:	469e      	mov	lr, r3
 8002742:	4770      	bx	lr

08002744 <_fini>:
 8002744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002746:	46c0      	nop			@ (mov r8, r8)
 8002748:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800274a:	bc08      	pop	{r3}
 800274c:	469e      	mov	lr, r3
 800274e:	4770      	bx	lr
