
ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e80  080000b8  080000b8  000010b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  08004f38  08004f38  00005f38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ffc  08004ffc  0000705c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08004ffc  08004ffc  0000705c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08004ffc  08004ffc  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ffc  08004ffc  00005ffc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005000  08005000  00006000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08005004  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000400  2000005c  08005060  0000705c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000045c  08005060  0000745c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bffd  00000000  00000000  00007084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ee0  00000000  00000000  00013081  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d60  00000000  00000000  00014f68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a59  00000000  00000000  00015cc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000abfb  00000000  00000000  00016721  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00004055  00000000  00000000  0002131c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  00025371  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00003464  00000000  00000000  000253b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 00000060  00000000  00000000  00028818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	@ (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	@ (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	@ (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000005c 	.word	0x2000005c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08004f20 	.word	0x08004f20

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	@ (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	@ (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	@ (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			@ (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000060 	.word	0x20000060
 80000fc:	08004f20 	.word	0x08004f20

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	@ 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f8f0 	bl	80003e8 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			@ (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__divsi3>:
 8000214:	4603      	mov	r3, r0
 8000216:	430b      	orrs	r3, r1
 8000218:	d47f      	bmi.n	800031a <__divsi3+0x106>
 800021a:	2200      	movs	r2, #0
 800021c:	0843      	lsrs	r3, r0, #1
 800021e:	428b      	cmp	r3, r1
 8000220:	d374      	bcc.n	800030c <__divsi3+0xf8>
 8000222:	0903      	lsrs	r3, r0, #4
 8000224:	428b      	cmp	r3, r1
 8000226:	d35f      	bcc.n	80002e8 <__divsi3+0xd4>
 8000228:	0a03      	lsrs	r3, r0, #8
 800022a:	428b      	cmp	r3, r1
 800022c:	d344      	bcc.n	80002b8 <__divsi3+0xa4>
 800022e:	0b03      	lsrs	r3, r0, #12
 8000230:	428b      	cmp	r3, r1
 8000232:	d328      	bcc.n	8000286 <__divsi3+0x72>
 8000234:	0c03      	lsrs	r3, r0, #16
 8000236:	428b      	cmp	r3, r1
 8000238:	d30d      	bcc.n	8000256 <__divsi3+0x42>
 800023a:	22ff      	movs	r2, #255	@ 0xff
 800023c:	0209      	lsls	r1, r1, #8
 800023e:	ba12      	rev	r2, r2
 8000240:	0c03      	lsrs	r3, r0, #16
 8000242:	428b      	cmp	r3, r1
 8000244:	d302      	bcc.n	800024c <__divsi3+0x38>
 8000246:	1212      	asrs	r2, r2, #8
 8000248:	0209      	lsls	r1, r1, #8
 800024a:	d065      	beq.n	8000318 <__divsi3+0x104>
 800024c:	0b03      	lsrs	r3, r0, #12
 800024e:	428b      	cmp	r3, r1
 8000250:	d319      	bcc.n	8000286 <__divsi3+0x72>
 8000252:	e000      	b.n	8000256 <__divsi3+0x42>
 8000254:	0a09      	lsrs	r1, r1, #8
 8000256:	0bc3      	lsrs	r3, r0, #15
 8000258:	428b      	cmp	r3, r1
 800025a:	d301      	bcc.n	8000260 <__divsi3+0x4c>
 800025c:	03cb      	lsls	r3, r1, #15
 800025e:	1ac0      	subs	r0, r0, r3
 8000260:	4152      	adcs	r2, r2
 8000262:	0b83      	lsrs	r3, r0, #14
 8000264:	428b      	cmp	r3, r1
 8000266:	d301      	bcc.n	800026c <__divsi3+0x58>
 8000268:	038b      	lsls	r3, r1, #14
 800026a:	1ac0      	subs	r0, r0, r3
 800026c:	4152      	adcs	r2, r2
 800026e:	0b43      	lsrs	r3, r0, #13
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x64>
 8000274:	034b      	lsls	r3, r1, #13
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b03      	lsrs	r3, r0, #12
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x70>
 8000280:	030b      	lsls	r3, r1, #12
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0ac3      	lsrs	r3, r0, #11
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x7c>
 800028c:	02cb      	lsls	r3, r1, #11
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0a83      	lsrs	r3, r0, #10
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x88>
 8000298:	028b      	lsls	r3, r1, #10
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0a43      	lsrs	r3, r0, #9
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x94>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a03      	lsrs	r3, r0, #8
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0xa0>
 80002b0:	020b      	lsls	r3, r1, #8
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	d2cd      	bcs.n	8000254 <__divsi3+0x40>
 80002b8:	09c3      	lsrs	r3, r0, #7
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d301      	bcc.n	80002c2 <__divsi3+0xae>
 80002be:	01cb      	lsls	r3, r1, #7
 80002c0:	1ac0      	subs	r0, r0, r3
 80002c2:	4152      	adcs	r2, r2
 80002c4:	0983      	lsrs	r3, r0, #6
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d301      	bcc.n	80002ce <__divsi3+0xba>
 80002ca:	018b      	lsls	r3, r1, #6
 80002cc:	1ac0      	subs	r0, r0, r3
 80002ce:	4152      	adcs	r2, r2
 80002d0:	0943      	lsrs	r3, r0, #5
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xc6>
 80002d6:	014b      	lsls	r3, r1, #5
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0903      	lsrs	r3, r0, #4
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xd2>
 80002e2:	010b      	lsls	r3, r1, #4
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	08c3      	lsrs	r3, r0, #3
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xde>
 80002ee:	00cb      	lsls	r3, r1, #3
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0883      	lsrs	r3, r0, #2
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xea>
 80002fa:	008b      	lsls	r3, r1, #2
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0843      	lsrs	r3, r0, #1
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xf6>
 8000306:	004b      	lsls	r3, r1, #1
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	1a41      	subs	r1, r0, r1
 800030e:	d200      	bcs.n	8000312 <__divsi3+0xfe>
 8000310:	4601      	mov	r1, r0
 8000312:	4152      	adcs	r2, r2
 8000314:	4610      	mov	r0, r2
 8000316:	4770      	bx	lr
 8000318:	e05d      	b.n	80003d6 <__divsi3+0x1c2>
 800031a:	0fca      	lsrs	r2, r1, #31
 800031c:	d000      	beq.n	8000320 <__divsi3+0x10c>
 800031e:	4249      	negs	r1, r1
 8000320:	1003      	asrs	r3, r0, #32
 8000322:	d300      	bcc.n	8000326 <__divsi3+0x112>
 8000324:	4240      	negs	r0, r0
 8000326:	4053      	eors	r3, r2
 8000328:	2200      	movs	r2, #0
 800032a:	469c      	mov	ip, r3
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d32d      	bcc.n	800038e <__divsi3+0x17a>
 8000332:	0a03      	lsrs	r3, r0, #8
 8000334:	428b      	cmp	r3, r1
 8000336:	d312      	bcc.n	800035e <__divsi3+0x14a>
 8000338:	22fc      	movs	r2, #252	@ 0xfc
 800033a:	0189      	lsls	r1, r1, #6
 800033c:	ba12      	rev	r2, r2
 800033e:	0a03      	lsrs	r3, r0, #8
 8000340:	428b      	cmp	r3, r1
 8000342:	d30c      	bcc.n	800035e <__divsi3+0x14a>
 8000344:	0189      	lsls	r1, r1, #6
 8000346:	1192      	asrs	r2, r2, #6
 8000348:	428b      	cmp	r3, r1
 800034a:	d308      	bcc.n	800035e <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d304      	bcc.n	800035e <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	d03a      	beq.n	80003ce <__divsi3+0x1ba>
 8000358:	1192      	asrs	r2, r2, #6
 800035a:	e000      	b.n	800035e <__divsi3+0x14a>
 800035c:	0989      	lsrs	r1, r1, #6
 800035e:	09c3      	lsrs	r3, r0, #7
 8000360:	428b      	cmp	r3, r1
 8000362:	d301      	bcc.n	8000368 <__divsi3+0x154>
 8000364:	01cb      	lsls	r3, r1, #7
 8000366:	1ac0      	subs	r0, r0, r3
 8000368:	4152      	adcs	r2, r2
 800036a:	0983      	lsrs	r3, r0, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d301      	bcc.n	8000374 <__divsi3+0x160>
 8000370:	018b      	lsls	r3, r1, #6
 8000372:	1ac0      	subs	r0, r0, r3
 8000374:	4152      	adcs	r2, r2
 8000376:	0943      	lsrs	r3, r0, #5
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x16c>
 800037c:	014b      	lsls	r3, r1, #5
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0903      	lsrs	r3, r0, #4
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x178>
 8000388:	010b      	lsls	r3, r1, #4
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	08c3      	lsrs	r3, r0, #3
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x184>
 8000394:	00cb      	lsls	r3, r1, #3
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0883      	lsrs	r3, r0, #2
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x190>
 80003a0:	008b      	lsls	r3, r1, #2
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	d2d9      	bcs.n	800035c <__divsi3+0x148>
 80003a8:	0843      	lsrs	r3, r0, #1
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d301      	bcc.n	80003b2 <__divsi3+0x19e>
 80003ae:	004b      	lsls	r3, r1, #1
 80003b0:	1ac0      	subs	r0, r0, r3
 80003b2:	4152      	adcs	r2, r2
 80003b4:	1a41      	subs	r1, r0, r1
 80003b6:	d200      	bcs.n	80003ba <__divsi3+0x1a6>
 80003b8:	4601      	mov	r1, r0
 80003ba:	4663      	mov	r3, ip
 80003bc:	4152      	adcs	r2, r2
 80003be:	105b      	asrs	r3, r3, #1
 80003c0:	4610      	mov	r0, r2
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x1b4>
 80003c4:	4240      	negs	r0, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d500      	bpl.n	80003cc <__divsi3+0x1b8>
 80003ca:	4249      	negs	r1, r1
 80003cc:	4770      	bx	lr
 80003ce:	4663      	mov	r3, ip
 80003d0:	105b      	asrs	r3, r3, #1
 80003d2:	d300      	bcc.n	80003d6 <__divsi3+0x1c2>
 80003d4:	4240      	negs	r0, r0
 80003d6:	b501      	push	{r0, lr}
 80003d8:	2000      	movs	r0, #0
 80003da:	f000 f805 	bl	80003e8 <__aeabi_idiv0>
 80003de:	bd02      	pop	{r1, pc}

080003e0 <__aeabi_idivmod>:
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d0f8      	beq.n	80003d6 <__divsi3+0x1c2>
 80003e4:	e716      	b.n	8000214 <__divsi3>
 80003e6:	4770      	bx	lr

080003e8 <__aeabi_idiv0>:
 80003e8:	4770      	bx	lr
 80003ea:	46c0      	nop			@ (mov r8, r8)

080003ec <__aeabi_cfrcmple>:
 80003ec:	4684      	mov	ip, r0
 80003ee:	0008      	movs	r0, r1
 80003f0:	4661      	mov	r1, ip
 80003f2:	e7ff      	b.n	80003f4 <__aeabi_cfcmpeq>

080003f4 <__aeabi_cfcmpeq>:
 80003f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80003f6:	f000 fbc3 	bl	8000b80 <__lesf2>
 80003fa:	2800      	cmp	r0, #0
 80003fc:	d401      	bmi.n	8000402 <__aeabi_cfcmpeq+0xe>
 80003fe:	2100      	movs	r1, #0
 8000400:	42c8      	cmn	r0, r1
 8000402:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000404 <__aeabi_fcmpeq>:
 8000404:	b510      	push	{r4, lr}
 8000406:	f000 fb4b 	bl	8000aa0 <__eqsf2>
 800040a:	4240      	negs	r0, r0
 800040c:	3001      	adds	r0, #1
 800040e:	bd10      	pop	{r4, pc}

08000410 <__aeabi_fcmplt>:
 8000410:	b510      	push	{r4, lr}
 8000412:	f000 fbb5 	bl	8000b80 <__lesf2>
 8000416:	2800      	cmp	r0, #0
 8000418:	db01      	blt.n	800041e <__aeabi_fcmplt+0xe>
 800041a:	2000      	movs	r0, #0
 800041c:	bd10      	pop	{r4, pc}
 800041e:	2001      	movs	r0, #1
 8000420:	bd10      	pop	{r4, pc}
 8000422:	46c0      	nop			@ (mov r8, r8)

08000424 <__aeabi_fcmple>:
 8000424:	b510      	push	{r4, lr}
 8000426:	f000 fbab 	bl	8000b80 <__lesf2>
 800042a:	2800      	cmp	r0, #0
 800042c:	dd01      	ble.n	8000432 <__aeabi_fcmple+0xe>
 800042e:	2000      	movs	r0, #0
 8000430:	bd10      	pop	{r4, pc}
 8000432:	2001      	movs	r0, #1
 8000434:	bd10      	pop	{r4, pc}
 8000436:	46c0      	nop			@ (mov r8, r8)

08000438 <__aeabi_fcmpgt>:
 8000438:	b510      	push	{r4, lr}
 800043a:	f000 fb59 	bl	8000af0 <__gesf2>
 800043e:	2800      	cmp	r0, #0
 8000440:	dc01      	bgt.n	8000446 <__aeabi_fcmpgt+0xe>
 8000442:	2000      	movs	r0, #0
 8000444:	bd10      	pop	{r4, pc}
 8000446:	2001      	movs	r0, #1
 8000448:	bd10      	pop	{r4, pc}
 800044a:	46c0      	nop			@ (mov r8, r8)

0800044c <__aeabi_fcmpge>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f000 fb4f 	bl	8000af0 <__gesf2>
 8000452:	2800      	cmp	r0, #0
 8000454:	da01      	bge.n	800045a <__aeabi_fcmpge+0xe>
 8000456:	2000      	movs	r0, #0
 8000458:	bd10      	pop	{r4, pc}
 800045a:	2001      	movs	r0, #1
 800045c:	bd10      	pop	{r4, pc}
 800045e:	46c0      	nop			@ (mov r8, r8)

08000460 <__aeabi_f2uiz>:
 8000460:	219e      	movs	r1, #158	@ 0x9e
 8000462:	b510      	push	{r4, lr}
 8000464:	05c9      	lsls	r1, r1, #23
 8000466:	1c04      	adds	r4, r0, #0
 8000468:	f7ff fff0 	bl	800044c <__aeabi_fcmpge>
 800046c:	2800      	cmp	r0, #0
 800046e:	d103      	bne.n	8000478 <__aeabi_f2uiz+0x18>
 8000470:	1c20      	adds	r0, r4, #0
 8000472:	f000 ffa1 	bl	80013b8 <__aeabi_f2iz>
 8000476:	bd10      	pop	{r4, pc}
 8000478:	219e      	movs	r1, #158	@ 0x9e
 800047a:	1c20      	adds	r0, r4, #0
 800047c:	05c9      	lsls	r1, r1, #23
 800047e:	f000 fd21 	bl	8000ec4 <__aeabi_fsub>
 8000482:	f000 ff99 	bl	80013b8 <__aeabi_f2iz>
 8000486:	2380      	movs	r3, #128	@ 0x80
 8000488:	061b      	lsls	r3, r3, #24
 800048a:	469c      	mov	ip, r3
 800048c:	4460      	add	r0, ip
 800048e:	e7f2      	b.n	8000476 <__aeabi_f2uiz+0x16>

08000490 <__aeabi_fadd>:
 8000490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000492:	024b      	lsls	r3, r1, #9
 8000494:	0a5a      	lsrs	r2, r3, #9
 8000496:	4694      	mov	ip, r2
 8000498:	004a      	lsls	r2, r1, #1
 800049a:	0fc9      	lsrs	r1, r1, #31
 800049c:	46ce      	mov	lr, r9
 800049e:	4647      	mov	r7, r8
 80004a0:	4689      	mov	r9, r1
 80004a2:	0045      	lsls	r5, r0, #1
 80004a4:	0246      	lsls	r6, r0, #9
 80004a6:	0e2d      	lsrs	r5, r5, #24
 80004a8:	0e12      	lsrs	r2, r2, #24
 80004aa:	b580      	push	{r7, lr}
 80004ac:	0999      	lsrs	r1, r3, #6
 80004ae:	0a77      	lsrs	r7, r6, #9
 80004b0:	0fc4      	lsrs	r4, r0, #31
 80004b2:	09b6      	lsrs	r6, r6, #6
 80004b4:	1aab      	subs	r3, r5, r2
 80004b6:	454c      	cmp	r4, r9
 80004b8:	d020      	beq.n	80004fc <__aeabi_fadd+0x6c>
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	dd0c      	ble.n	80004d8 <__aeabi_fadd+0x48>
 80004be:	2a00      	cmp	r2, #0
 80004c0:	d134      	bne.n	800052c <__aeabi_fadd+0x9c>
 80004c2:	2900      	cmp	r1, #0
 80004c4:	d02a      	beq.n	800051c <__aeabi_fadd+0x8c>
 80004c6:	1e5a      	subs	r2, r3, #1
 80004c8:	2b01      	cmp	r3, #1
 80004ca:	d100      	bne.n	80004ce <__aeabi_fadd+0x3e>
 80004cc:	e08f      	b.n	80005ee <__aeabi_fadd+0x15e>
 80004ce:	2bff      	cmp	r3, #255	@ 0xff
 80004d0:	d100      	bne.n	80004d4 <__aeabi_fadd+0x44>
 80004d2:	e0cd      	b.n	8000670 <__aeabi_fadd+0x1e0>
 80004d4:	0013      	movs	r3, r2
 80004d6:	e02f      	b.n	8000538 <__aeabi_fadd+0xa8>
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d060      	beq.n	800059e <__aeabi_fadd+0x10e>
 80004dc:	1b53      	subs	r3, r2, r5
 80004de:	2d00      	cmp	r5, #0
 80004e0:	d000      	beq.n	80004e4 <__aeabi_fadd+0x54>
 80004e2:	e0ee      	b.n	80006c2 <__aeabi_fadd+0x232>
 80004e4:	2e00      	cmp	r6, #0
 80004e6:	d100      	bne.n	80004ea <__aeabi_fadd+0x5a>
 80004e8:	e13e      	b.n	8000768 <__aeabi_fadd+0x2d8>
 80004ea:	1e5c      	subs	r4, r3, #1
 80004ec:	2b01      	cmp	r3, #1
 80004ee:	d100      	bne.n	80004f2 <__aeabi_fadd+0x62>
 80004f0:	e16b      	b.n	80007ca <__aeabi_fadd+0x33a>
 80004f2:	2bff      	cmp	r3, #255	@ 0xff
 80004f4:	d100      	bne.n	80004f8 <__aeabi_fadd+0x68>
 80004f6:	e0b9      	b.n	800066c <__aeabi_fadd+0x1dc>
 80004f8:	0023      	movs	r3, r4
 80004fa:	e0e7      	b.n	80006cc <__aeabi_fadd+0x23c>
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	dc00      	bgt.n	8000502 <__aeabi_fadd+0x72>
 8000500:	e0a4      	b.n	800064c <__aeabi_fadd+0x1bc>
 8000502:	2a00      	cmp	r2, #0
 8000504:	d069      	beq.n	80005da <__aeabi_fadd+0x14a>
 8000506:	2dff      	cmp	r5, #255	@ 0xff
 8000508:	d100      	bne.n	800050c <__aeabi_fadd+0x7c>
 800050a:	e0b1      	b.n	8000670 <__aeabi_fadd+0x1e0>
 800050c:	2280      	movs	r2, #128	@ 0x80
 800050e:	04d2      	lsls	r2, r2, #19
 8000510:	4311      	orrs	r1, r2
 8000512:	2b1b      	cmp	r3, #27
 8000514:	dc00      	bgt.n	8000518 <__aeabi_fadd+0x88>
 8000516:	e0e9      	b.n	80006ec <__aeabi_fadd+0x25c>
 8000518:	002b      	movs	r3, r5
 800051a:	3605      	adds	r6, #5
 800051c:	08f7      	lsrs	r7, r6, #3
 800051e:	2bff      	cmp	r3, #255	@ 0xff
 8000520:	d100      	bne.n	8000524 <__aeabi_fadd+0x94>
 8000522:	e0a5      	b.n	8000670 <__aeabi_fadd+0x1e0>
 8000524:	027a      	lsls	r2, r7, #9
 8000526:	0a52      	lsrs	r2, r2, #9
 8000528:	b2d8      	uxtb	r0, r3
 800052a:	e030      	b.n	800058e <__aeabi_fadd+0xfe>
 800052c:	2dff      	cmp	r5, #255	@ 0xff
 800052e:	d100      	bne.n	8000532 <__aeabi_fadd+0xa2>
 8000530:	e09e      	b.n	8000670 <__aeabi_fadd+0x1e0>
 8000532:	2280      	movs	r2, #128	@ 0x80
 8000534:	04d2      	lsls	r2, r2, #19
 8000536:	4311      	orrs	r1, r2
 8000538:	2001      	movs	r0, #1
 800053a:	2b1b      	cmp	r3, #27
 800053c:	dc08      	bgt.n	8000550 <__aeabi_fadd+0xc0>
 800053e:	0008      	movs	r0, r1
 8000540:	2220      	movs	r2, #32
 8000542:	40d8      	lsrs	r0, r3
 8000544:	1ad3      	subs	r3, r2, r3
 8000546:	4099      	lsls	r1, r3
 8000548:	000b      	movs	r3, r1
 800054a:	1e5a      	subs	r2, r3, #1
 800054c:	4193      	sbcs	r3, r2
 800054e:	4318      	orrs	r0, r3
 8000550:	1a36      	subs	r6, r6, r0
 8000552:	0173      	lsls	r3, r6, #5
 8000554:	d400      	bmi.n	8000558 <__aeabi_fadd+0xc8>
 8000556:	e071      	b.n	800063c <__aeabi_fadd+0x1ac>
 8000558:	01b6      	lsls	r6, r6, #6
 800055a:	09b7      	lsrs	r7, r6, #6
 800055c:	0038      	movs	r0, r7
 800055e:	f000 ffe1 	bl	8001524 <__clzsi2>
 8000562:	003b      	movs	r3, r7
 8000564:	3805      	subs	r0, #5
 8000566:	4083      	lsls	r3, r0
 8000568:	4285      	cmp	r5, r0
 800056a:	dd4d      	ble.n	8000608 <__aeabi_fadd+0x178>
 800056c:	4eb4      	ldr	r6, [pc, #720]	@ (8000840 <__aeabi_fadd+0x3b0>)
 800056e:	1a2d      	subs	r5, r5, r0
 8000570:	401e      	ands	r6, r3
 8000572:	075a      	lsls	r2, r3, #29
 8000574:	d068      	beq.n	8000648 <__aeabi_fadd+0x1b8>
 8000576:	220f      	movs	r2, #15
 8000578:	4013      	ands	r3, r2
 800057a:	2b04      	cmp	r3, #4
 800057c:	d064      	beq.n	8000648 <__aeabi_fadd+0x1b8>
 800057e:	3604      	adds	r6, #4
 8000580:	0173      	lsls	r3, r6, #5
 8000582:	d561      	bpl.n	8000648 <__aeabi_fadd+0x1b8>
 8000584:	1c68      	adds	r0, r5, #1
 8000586:	2dfe      	cmp	r5, #254	@ 0xfe
 8000588:	d154      	bne.n	8000634 <__aeabi_fadd+0x1a4>
 800058a:	20ff      	movs	r0, #255	@ 0xff
 800058c:	2200      	movs	r2, #0
 800058e:	05c0      	lsls	r0, r0, #23
 8000590:	4310      	orrs	r0, r2
 8000592:	07e4      	lsls	r4, r4, #31
 8000594:	4320      	orrs	r0, r4
 8000596:	bcc0      	pop	{r6, r7}
 8000598:	46b9      	mov	r9, r7
 800059a:	46b0      	mov	r8, r6
 800059c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800059e:	22fe      	movs	r2, #254	@ 0xfe
 80005a0:	4690      	mov	r8, r2
 80005a2:	1c68      	adds	r0, r5, #1
 80005a4:	0002      	movs	r2, r0
 80005a6:	4640      	mov	r0, r8
 80005a8:	4210      	tst	r0, r2
 80005aa:	d16b      	bne.n	8000684 <__aeabi_fadd+0x1f4>
 80005ac:	2d00      	cmp	r5, #0
 80005ae:	d000      	beq.n	80005b2 <__aeabi_fadd+0x122>
 80005b0:	e0dd      	b.n	800076e <__aeabi_fadd+0x2de>
 80005b2:	2e00      	cmp	r6, #0
 80005b4:	d100      	bne.n	80005b8 <__aeabi_fadd+0x128>
 80005b6:	e102      	b.n	80007be <__aeabi_fadd+0x32e>
 80005b8:	2900      	cmp	r1, #0
 80005ba:	d0b3      	beq.n	8000524 <__aeabi_fadd+0x94>
 80005bc:	2280      	movs	r2, #128	@ 0x80
 80005be:	1a77      	subs	r7, r6, r1
 80005c0:	04d2      	lsls	r2, r2, #19
 80005c2:	4217      	tst	r7, r2
 80005c4:	d100      	bne.n	80005c8 <__aeabi_fadd+0x138>
 80005c6:	e136      	b.n	8000836 <__aeabi_fadd+0x3a6>
 80005c8:	464c      	mov	r4, r9
 80005ca:	1b8e      	subs	r6, r1, r6
 80005cc:	d061      	beq.n	8000692 <__aeabi_fadd+0x202>
 80005ce:	2001      	movs	r0, #1
 80005d0:	4216      	tst	r6, r2
 80005d2:	d130      	bne.n	8000636 <__aeabi_fadd+0x1a6>
 80005d4:	2300      	movs	r3, #0
 80005d6:	08f7      	lsrs	r7, r6, #3
 80005d8:	e7a4      	b.n	8000524 <__aeabi_fadd+0x94>
 80005da:	2900      	cmp	r1, #0
 80005dc:	d09e      	beq.n	800051c <__aeabi_fadd+0x8c>
 80005de:	1e5a      	subs	r2, r3, #1
 80005e0:	2b01      	cmp	r3, #1
 80005e2:	d100      	bne.n	80005e6 <__aeabi_fadd+0x156>
 80005e4:	e0ca      	b.n	800077c <__aeabi_fadd+0x2ec>
 80005e6:	2bff      	cmp	r3, #255	@ 0xff
 80005e8:	d042      	beq.n	8000670 <__aeabi_fadd+0x1e0>
 80005ea:	0013      	movs	r3, r2
 80005ec:	e791      	b.n	8000512 <__aeabi_fadd+0x82>
 80005ee:	1a71      	subs	r1, r6, r1
 80005f0:	014b      	lsls	r3, r1, #5
 80005f2:	d400      	bmi.n	80005f6 <__aeabi_fadd+0x166>
 80005f4:	e0d1      	b.n	800079a <__aeabi_fadd+0x30a>
 80005f6:	018f      	lsls	r7, r1, #6
 80005f8:	09bf      	lsrs	r7, r7, #6
 80005fa:	0038      	movs	r0, r7
 80005fc:	f000 ff92 	bl	8001524 <__clzsi2>
 8000600:	003b      	movs	r3, r7
 8000602:	3805      	subs	r0, #5
 8000604:	4083      	lsls	r3, r0
 8000606:	2501      	movs	r5, #1
 8000608:	2220      	movs	r2, #32
 800060a:	1b40      	subs	r0, r0, r5
 800060c:	3001      	adds	r0, #1
 800060e:	1a12      	subs	r2, r2, r0
 8000610:	001e      	movs	r6, r3
 8000612:	4093      	lsls	r3, r2
 8000614:	40c6      	lsrs	r6, r0
 8000616:	1e5a      	subs	r2, r3, #1
 8000618:	4193      	sbcs	r3, r2
 800061a:	431e      	orrs	r6, r3
 800061c:	d039      	beq.n	8000692 <__aeabi_fadd+0x202>
 800061e:	0773      	lsls	r3, r6, #29
 8000620:	d100      	bne.n	8000624 <__aeabi_fadd+0x194>
 8000622:	e11b      	b.n	800085c <__aeabi_fadd+0x3cc>
 8000624:	230f      	movs	r3, #15
 8000626:	2500      	movs	r5, #0
 8000628:	4033      	ands	r3, r6
 800062a:	2b04      	cmp	r3, #4
 800062c:	d1a7      	bne.n	800057e <__aeabi_fadd+0xee>
 800062e:	2001      	movs	r0, #1
 8000630:	0172      	lsls	r2, r6, #5
 8000632:	d57c      	bpl.n	800072e <__aeabi_fadd+0x29e>
 8000634:	b2c0      	uxtb	r0, r0
 8000636:	01b2      	lsls	r2, r6, #6
 8000638:	0a52      	lsrs	r2, r2, #9
 800063a:	e7a8      	b.n	800058e <__aeabi_fadd+0xfe>
 800063c:	0773      	lsls	r3, r6, #29
 800063e:	d003      	beq.n	8000648 <__aeabi_fadd+0x1b8>
 8000640:	230f      	movs	r3, #15
 8000642:	4033      	ands	r3, r6
 8000644:	2b04      	cmp	r3, #4
 8000646:	d19a      	bne.n	800057e <__aeabi_fadd+0xee>
 8000648:	002b      	movs	r3, r5
 800064a:	e767      	b.n	800051c <__aeabi_fadd+0x8c>
 800064c:	2b00      	cmp	r3, #0
 800064e:	d023      	beq.n	8000698 <__aeabi_fadd+0x208>
 8000650:	1b53      	subs	r3, r2, r5
 8000652:	2d00      	cmp	r5, #0
 8000654:	d17b      	bne.n	800074e <__aeabi_fadd+0x2be>
 8000656:	2e00      	cmp	r6, #0
 8000658:	d100      	bne.n	800065c <__aeabi_fadd+0x1cc>
 800065a:	e086      	b.n	800076a <__aeabi_fadd+0x2da>
 800065c:	1e5d      	subs	r5, r3, #1
 800065e:	2b01      	cmp	r3, #1
 8000660:	d100      	bne.n	8000664 <__aeabi_fadd+0x1d4>
 8000662:	e08b      	b.n	800077c <__aeabi_fadd+0x2ec>
 8000664:	2bff      	cmp	r3, #255	@ 0xff
 8000666:	d002      	beq.n	800066e <__aeabi_fadd+0x1de>
 8000668:	002b      	movs	r3, r5
 800066a:	e075      	b.n	8000758 <__aeabi_fadd+0x2c8>
 800066c:	464c      	mov	r4, r9
 800066e:	4667      	mov	r7, ip
 8000670:	2f00      	cmp	r7, #0
 8000672:	d100      	bne.n	8000676 <__aeabi_fadd+0x1e6>
 8000674:	e789      	b.n	800058a <__aeabi_fadd+0xfa>
 8000676:	2280      	movs	r2, #128	@ 0x80
 8000678:	03d2      	lsls	r2, r2, #15
 800067a:	433a      	orrs	r2, r7
 800067c:	0252      	lsls	r2, r2, #9
 800067e:	20ff      	movs	r0, #255	@ 0xff
 8000680:	0a52      	lsrs	r2, r2, #9
 8000682:	e784      	b.n	800058e <__aeabi_fadd+0xfe>
 8000684:	1a77      	subs	r7, r6, r1
 8000686:	017b      	lsls	r3, r7, #5
 8000688:	d46b      	bmi.n	8000762 <__aeabi_fadd+0x2d2>
 800068a:	2f00      	cmp	r7, #0
 800068c:	d000      	beq.n	8000690 <__aeabi_fadd+0x200>
 800068e:	e765      	b.n	800055c <__aeabi_fadd+0xcc>
 8000690:	2400      	movs	r4, #0
 8000692:	2000      	movs	r0, #0
 8000694:	2200      	movs	r2, #0
 8000696:	e77a      	b.n	800058e <__aeabi_fadd+0xfe>
 8000698:	22fe      	movs	r2, #254	@ 0xfe
 800069a:	1c6b      	adds	r3, r5, #1
 800069c:	421a      	tst	r2, r3
 800069e:	d149      	bne.n	8000734 <__aeabi_fadd+0x2a4>
 80006a0:	2d00      	cmp	r5, #0
 80006a2:	d000      	beq.n	80006a6 <__aeabi_fadd+0x216>
 80006a4:	e09f      	b.n	80007e6 <__aeabi_fadd+0x356>
 80006a6:	2e00      	cmp	r6, #0
 80006a8:	d100      	bne.n	80006ac <__aeabi_fadd+0x21c>
 80006aa:	e0ba      	b.n	8000822 <__aeabi_fadd+0x392>
 80006ac:	2900      	cmp	r1, #0
 80006ae:	d100      	bne.n	80006b2 <__aeabi_fadd+0x222>
 80006b0:	e0cf      	b.n	8000852 <__aeabi_fadd+0x3c2>
 80006b2:	1872      	adds	r2, r6, r1
 80006b4:	0153      	lsls	r3, r2, #5
 80006b6:	d400      	bmi.n	80006ba <__aeabi_fadd+0x22a>
 80006b8:	e0cd      	b.n	8000856 <__aeabi_fadd+0x3c6>
 80006ba:	0192      	lsls	r2, r2, #6
 80006bc:	2001      	movs	r0, #1
 80006be:	0a52      	lsrs	r2, r2, #9
 80006c0:	e765      	b.n	800058e <__aeabi_fadd+0xfe>
 80006c2:	2aff      	cmp	r2, #255	@ 0xff
 80006c4:	d0d2      	beq.n	800066c <__aeabi_fadd+0x1dc>
 80006c6:	2080      	movs	r0, #128	@ 0x80
 80006c8:	04c0      	lsls	r0, r0, #19
 80006ca:	4306      	orrs	r6, r0
 80006cc:	2001      	movs	r0, #1
 80006ce:	2b1b      	cmp	r3, #27
 80006d0:	dc08      	bgt.n	80006e4 <__aeabi_fadd+0x254>
 80006d2:	0030      	movs	r0, r6
 80006d4:	2420      	movs	r4, #32
 80006d6:	40d8      	lsrs	r0, r3
 80006d8:	1ae3      	subs	r3, r4, r3
 80006da:	409e      	lsls	r6, r3
 80006dc:	0033      	movs	r3, r6
 80006de:	1e5c      	subs	r4, r3, #1
 80006e0:	41a3      	sbcs	r3, r4
 80006e2:	4318      	orrs	r0, r3
 80006e4:	464c      	mov	r4, r9
 80006e6:	0015      	movs	r5, r2
 80006e8:	1a0e      	subs	r6, r1, r0
 80006ea:	e732      	b.n	8000552 <__aeabi_fadd+0xc2>
 80006ec:	0008      	movs	r0, r1
 80006ee:	2220      	movs	r2, #32
 80006f0:	40d8      	lsrs	r0, r3
 80006f2:	1ad3      	subs	r3, r2, r3
 80006f4:	4099      	lsls	r1, r3
 80006f6:	000b      	movs	r3, r1
 80006f8:	1e5a      	subs	r2, r3, #1
 80006fa:	4193      	sbcs	r3, r2
 80006fc:	4303      	orrs	r3, r0
 80006fe:	18f6      	adds	r6, r6, r3
 8000700:	0173      	lsls	r3, r6, #5
 8000702:	d59b      	bpl.n	800063c <__aeabi_fadd+0x1ac>
 8000704:	3501      	adds	r5, #1
 8000706:	2dff      	cmp	r5, #255	@ 0xff
 8000708:	d100      	bne.n	800070c <__aeabi_fadd+0x27c>
 800070a:	e73e      	b.n	800058a <__aeabi_fadd+0xfa>
 800070c:	2301      	movs	r3, #1
 800070e:	494d      	ldr	r1, [pc, #308]	@ (8000844 <__aeabi_fadd+0x3b4>)
 8000710:	0872      	lsrs	r2, r6, #1
 8000712:	4033      	ands	r3, r6
 8000714:	400a      	ands	r2, r1
 8000716:	431a      	orrs	r2, r3
 8000718:	0016      	movs	r6, r2
 800071a:	0753      	lsls	r3, r2, #29
 800071c:	d004      	beq.n	8000728 <__aeabi_fadd+0x298>
 800071e:	230f      	movs	r3, #15
 8000720:	4013      	ands	r3, r2
 8000722:	2b04      	cmp	r3, #4
 8000724:	d000      	beq.n	8000728 <__aeabi_fadd+0x298>
 8000726:	e72a      	b.n	800057e <__aeabi_fadd+0xee>
 8000728:	0173      	lsls	r3, r6, #5
 800072a:	d500      	bpl.n	800072e <__aeabi_fadd+0x29e>
 800072c:	e72a      	b.n	8000584 <__aeabi_fadd+0xf4>
 800072e:	002b      	movs	r3, r5
 8000730:	08f7      	lsrs	r7, r6, #3
 8000732:	e6f7      	b.n	8000524 <__aeabi_fadd+0x94>
 8000734:	2bff      	cmp	r3, #255	@ 0xff
 8000736:	d100      	bne.n	800073a <__aeabi_fadd+0x2aa>
 8000738:	e727      	b.n	800058a <__aeabi_fadd+0xfa>
 800073a:	1871      	adds	r1, r6, r1
 800073c:	0849      	lsrs	r1, r1, #1
 800073e:	074a      	lsls	r2, r1, #29
 8000740:	d02f      	beq.n	80007a2 <__aeabi_fadd+0x312>
 8000742:	220f      	movs	r2, #15
 8000744:	400a      	ands	r2, r1
 8000746:	2a04      	cmp	r2, #4
 8000748:	d02b      	beq.n	80007a2 <__aeabi_fadd+0x312>
 800074a:	1d0e      	adds	r6, r1, #4
 800074c:	e6e6      	b.n	800051c <__aeabi_fadd+0x8c>
 800074e:	2aff      	cmp	r2, #255	@ 0xff
 8000750:	d08d      	beq.n	800066e <__aeabi_fadd+0x1de>
 8000752:	2080      	movs	r0, #128	@ 0x80
 8000754:	04c0      	lsls	r0, r0, #19
 8000756:	4306      	orrs	r6, r0
 8000758:	2b1b      	cmp	r3, #27
 800075a:	dd24      	ble.n	80007a6 <__aeabi_fadd+0x316>
 800075c:	0013      	movs	r3, r2
 800075e:	1d4e      	adds	r6, r1, #5
 8000760:	e6dc      	b.n	800051c <__aeabi_fadd+0x8c>
 8000762:	464c      	mov	r4, r9
 8000764:	1b8f      	subs	r7, r1, r6
 8000766:	e6f9      	b.n	800055c <__aeabi_fadd+0xcc>
 8000768:	464c      	mov	r4, r9
 800076a:	000e      	movs	r6, r1
 800076c:	e6d6      	b.n	800051c <__aeabi_fadd+0x8c>
 800076e:	2e00      	cmp	r6, #0
 8000770:	d149      	bne.n	8000806 <__aeabi_fadd+0x376>
 8000772:	2900      	cmp	r1, #0
 8000774:	d068      	beq.n	8000848 <__aeabi_fadd+0x3b8>
 8000776:	4667      	mov	r7, ip
 8000778:	464c      	mov	r4, r9
 800077a:	e77c      	b.n	8000676 <__aeabi_fadd+0x1e6>
 800077c:	1870      	adds	r0, r6, r1
 800077e:	0143      	lsls	r3, r0, #5
 8000780:	d574      	bpl.n	800086c <__aeabi_fadd+0x3dc>
 8000782:	4930      	ldr	r1, [pc, #192]	@ (8000844 <__aeabi_fadd+0x3b4>)
 8000784:	0840      	lsrs	r0, r0, #1
 8000786:	4001      	ands	r1, r0
 8000788:	0743      	lsls	r3, r0, #29
 800078a:	d009      	beq.n	80007a0 <__aeabi_fadd+0x310>
 800078c:	230f      	movs	r3, #15
 800078e:	4003      	ands	r3, r0
 8000790:	2b04      	cmp	r3, #4
 8000792:	d005      	beq.n	80007a0 <__aeabi_fadd+0x310>
 8000794:	2302      	movs	r3, #2
 8000796:	1d0e      	adds	r6, r1, #4
 8000798:	e6c0      	b.n	800051c <__aeabi_fadd+0x8c>
 800079a:	2301      	movs	r3, #1
 800079c:	08cf      	lsrs	r7, r1, #3
 800079e:	e6c1      	b.n	8000524 <__aeabi_fadd+0x94>
 80007a0:	2302      	movs	r3, #2
 80007a2:	08cf      	lsrs	r7, r1, #3
 80007a4:	e6be      	b.n	8000524 <__aeabi_fadd+0x94>
 80007a6:	2520      	movs	r5, #32
 80007a8:	0030      	movs	r0, r6
 80007aa:	40d8      	lsrs	r0, r3
 80007ac:	1aeb      	subs	r3, r5, r3
 80007ae:	409e      	lsls	r6, r3
 80007b0:	0033      	movs	r3, r6
 80007b2:	1e5d      	subs	r5, r3, #1
 80007b4:	41ab      	sbcs	r3, r5
 80007b6:	4303      	orrs	r3, r0
 80007b8:	0015      	movs	r5, r2
 80007ba:	185e      	adds	r6, r3, r1
 80007bc:	e7a0      	b.n	8000700 <__aeabi_fadd+0x270>
 80007be:	2900      	cmp	r1, #0
 80007c0:	d100      	bne.n	80007c4 <__aeabi_fadd+0x334>
 80007c2:	e765      	b.n	8000690 <__aeabi_fadd+0x200>
 80007c4:	464c      	mov	r4, r9
 80007c6:	4667      	mov	r7, ip
 80007c8:	e6ac      	b.n	8000524 <__aeabi_fadd+0x94>
 80007ca:	1b8f      	subs	r7, r1, r6
 80007cc:	017b      	lsls	r3, r7, #5
 80007ce:	d52e      	bpl.n	800082e <__aeabi_fadd+0x39e>
 80007d0:	01bf      	lsls	r7, r7, #6
 80007d2:	09bf      	lsrs	r7, r7, #6
 80007d4:	0038      	movs	r0, r7
 80007d6:	f000 fea5 	bl	8001524 <__clzsi2>
 80007da:	003b      	movs	r3, r7
 80007dc:	3805      	subs	r0, #5
 80007de:	4083      	lsls	r3, r0
 80007e0:	464c      	mov	r4, r9
 80007e2:	3501      	adds	r5, #1
 80007e4:	e710      	b.n	8000608 <__aeabi_fadd+0x178>
 80007e6:	2e00      	cmp	r6, #0
 80007e8:	d100      	bne.n	80007ec <__aeabi_fadd+0x35c>
 80007ea:	e740      	b.n	800066e <__aeabi_fadd+0x1de>
 80007ec:	2900      	cmp	r1, #0
 80007ee:	d100      	bne.n	80007f2 <__aeabi_fadd+0x362>
 80007f0:	e741      	b.n	8000676 <__aeabi_fadd+0x1e6>
 80007f2:	2380      	movs	r3, #128	@ 0x80
 80007f4:	03db      	lsls	r3, r3, #15
 80007f6:	429f      	cmp	r7, r3
 80007f8:	d200      	bcs.n	80007fc <__aeabi_fadd+0x36c>
 80007fa:	e73c      	b.n	8000676 <__aeabi_fadd+0x1e6>
 80007fc:	459c      	cmp	ip, r3
 80007fe:	d300      	bcc.n	8000802 <__aeabi_fadd+0x372>
 8000800:	e739      	b.n	8000676 <__aeabi_fadd+0x1e6>
 8000802:	4667      	mov	r7, ip
 8000804:	e737      	b.n	8000676 <__aeabi_fadd+0x1e6>
 8000806:	2900      	cmp	r1, #0
 8000808:	d100      	bne.n	800080c <__aeabi_fadd+0x37c>
 800080a:	e734      	b.n	8000676 <__aeabi_fadd+0x1e6>
 800080c:	2380      	movs	r3, #128	@ 0x80
 800080e:	03db      	lsls	r3, r3, #15
 8000810:	429f      	cmp	r7, r3
 8000812:	d200      	bcs.n	8000816 <__aeabi_fadd+0x386>
 8000814:	e72f      	b.n	8000676 <__aeabi_fadd+0x1e6>
 8000816:	459c      	cmp	ip, r3
 8000818:	d300      	bcc.n	800081c <__aeabi_fadd+0x38c>
 800081a:	e72c      	b.n	8000676 <__aeabi_fadd+0x1e6>
 800081c:	464c      	mov	r4, r9
 800081e:	4667      	mov	r7, ip
 8000820:	e729      	b.n	8000676 <__aeabi_fadd+0x1e6>
 8000822:	2900      	cmp	r1, #0
 8000824:	d100      	bne.n	8000828 <__aeabi_fadd+0x398>
 8000826:	e734      	b.n	8000692 <__aeabi_fadd+0x202>
 8000828:	2300      	movs	r3, #0
 800082a:	08cf      	lsrs	r7, r1, #3
 800082c:	e67a      	b.n	8000524 <__aeabi_fadd+0x94>
 800082e:	464c      	mov	r4, r9
 8000830:	2301      	movs	r3, #1
 8000832:	08ff      	lsrs	r7, r7, #3
 8000834:	e676      	b.n	8000524 <__aeabi_fadd+0x94>
 8000836:	2f00      	cmp	r7, #0
 8000838:	d100      	bne.n	800083c <__aeabi_fadd+0x3ac>
 800083a:	e729      	b.n	8000690 <__aeabi_fadd+0x200>
 800083c:	08ff      	lsrs	r7, r7, #3
 800083e:	e671      	b.n	8000524 <__aeabi_fadd+0x94>
 8000840:	fbffffff 	.word	0xfbffffff
 8000844:	7dffffff 	.word	0x7dffffff
 8000848:	2280      	movs	r2, #128	@ 0x80
 800084a:	2400      	movs	r4, #0
 800084c:	20ff      	movs	r0, #255	@ 0xff
 800084e:	03d2      	lsls	r2, r2, #15
 8000850:	e69d      	b.n	800058e <__aeabi_fadd+0xfe>
 8000852:	2300      	movs	r3, #0
 8000854:	e666      	b.n	8000524 <__aeabi_fadd+0x94>
 8000856:	2300      	movs	r3, #0
 8000858:	08d7      	lsrs	r7, r2, #3
 800085a:	e663      	b.n	8000524 <__aeabi_fadd+0x94>
 800085c:	2001      	movs	r0, #1
 800085e:	0172      	lsls	r2, r6, #5
 8000860:	d500      	bpl.n	8000864 <__aeabi_fadd+0x3d4>
 8000862:	e6e7      	b.n	8000634 <__aeabi_fadd+0x1a4>
 8000864:	0031      	movs	r1, r6
 8000866:	2300      	movs	r3, #0
 8000868:	08cf      	lsrs	r7, r1, #3
 800086a:	e65b      	b.n	8000524 <__aeabi_fadd+0x94>
 800086c:	2301      	movs	r3, #1
 800086e:	08c7      	lsrs	r7, r0, #3
 8000870:	e658      	b.n	8000524 <__aeabi_fadd+0x94>
 8000872:	46c0      	nop			@ (mov r8, r8)

08000874 <__aeabi_fdiv>:
 8000874:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000876:	4646      	mov	r6, r8
 8000878:	464f      	mov	r7, r9
 800087a:	46d6      	mov	lr, sl
 800087c:	0245      	lsls	r5, r0, #9
 800087e:	b5c0      	push	{r6, r7, lr}
 8000880:	0fc3      	lsrs	r3, r0, #31
 8000882:	0047      	lsls	r7, r0, #1
 8000884:	4698      	mov	r8, r3
 8000886:	1c0e      	adds	r6, r1, #0
 8000888:	0a6d      	lsrs	r5, r5, #9
 800088a:	0e3f      	lsrs	r7, r7, #24
 800088c:	d05b      	beq.n	8000946 <__aeabi_fdiv+0xd2>
 800088e:	2fff      	cmp	r7, #255	@ 0xff
 8000890:	d021      	beq.n	80008d6 <__aeabi_fdiv+0x62>
 8000892:	2380      	movs	r3, #128	@ 0x80
 8000894:	00ed      	lsls	r5, r5, #3
 8000896:	04db      	lsls	r3, r3, #19
 8000898:	431d      	orrs	r5, r3
 800089a:	2300      	movs	r3, #0
 800089c:	4699      	mov	r9, r3
 800089e:	469a      	mov	sl, r3
 80008a0:	3f7f      	subs	r7, #127	@ 0x7f
 80008a2:	0274      	lsls	r4, r6, #9
 80008a4:	0073      	lsls	r3, r6, #1
 80008a6:	0a64      	lsrs	r4, r4, #9
 80008a8:	0e1b      	lsrs	r3, r3, #24
 80008aa:	0ff6      	lsrs	r6, r6, #31
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d020      	beq.n	80008f2 <__aeabi_fdiv+0x7e>
 80008b0:	2bff      	cmp	r3, #255	@ 0xff
 80008b2:	d043      	beq.n	800093c <__aeabi_fdiv+0xc8>
 80008b4:	2280      	movs	r2, #128	@ 0x80
 80008b6:	2000      	movs	r0, #0
 80008b8:	00e4      	lsls	r4, r4, #3
 80008ba:	04d2      	lsls	r2, r2, #19
 80008bc:	4314      	orrs	r4, r2
 80008be:	3b7f      	subs	r3, #127	@ 0x7f
 80008c0:	4642      	mov	r2, r8
 80008c2:	1aff      	subs	r7, r7, r3
 80008c4:	464b      	mov	r3, r9
 80008c6:	4072      	eors	r2, r6
 80008c8:	2b0f      	cmp	r3, #15
 80008ca:	d900      	bls.n	80008ce <__aeabi_fdiv+0x5a>
 80008cc:	e09d      	b.n	8000a0a <__aeabi_fdiv+0x196>
 80008ce:	4971      	ldr	r1, [pc, #452]	@ (8000a94 <__aeabi_fdiv+0x220>)
 80008d0:	009b      	lsls	r3, r3, #2
 80008d2:	58cb      	ldr	r3, [r1, r3]
 80008d4:	469f      	mov	pc, r3
 80008d6:	2d00      	cmp	r5, #0
 80008d8:	d15a      	bne.n	8000990 <__aeabi_fdiv+0x11c>
 80008da:	2308      	movs	r3, #8
 80008dc:	4699      	mov	r9, r3
 80008de:	3b06      	subs	r3, #6
 80008e0:	0274      	lsls	r4, r6, #9
 80008e2:	469a      	mov	sl, r3
 80008e4:	0073      	lsls	r3, r6, #1
 80008e6:	27ff      	movs	r7, #255	@ 0xff
 80008e8:	0a64      	lsrs	r4, r4, #9
 80008ea:	0e1b      	lsrs	r3, r3, #24
 80008ec:	0ff6      	lsrs	r6, r6, #31
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d1de      	bne.n	80008b0 <__aeabi_fdiv+0x3c>
 80008f2:	2c00      	cmp	r4, #0
 80008f4:	d13b      	bne.n	800096e <__aeabi_fdiv+0xfa>
 80008f6:	2301      	movs	r3, #1
 80008f8:	4642      	mov	r2, r8
 80008fa:	4649      	mov	r1, r9
 80008fc:	4072      	eors	r2, r6
 80008fe:	4319      	orrs	r1, r3
 8000900:	290e      	cmp	r1, #14
 8000902:	d818      	bhi.n	8000936 <__aeabi_fdiv+0xc2>
 8000904:	4864      	ldr	r0, [pc, #400]	@ (8000a98 <__aeabi_fdiv+0x224>)
 8000906:	0089      	lsls	r1, r1, #2
 8000908:	5841      	ldr	r1, [r0, r1]
 800090a:	468f      	mov	pc, r1
 800090c:	4653      	mov	r3, sl
 800090e:	2b02      	cmp	r3, #2
 8000910:	d100      	bne.n	8000914 <__aeabi_fdiv+0xa0>
 8000912:	e0b8      	b.n	8000a86 <__aeabi_fdiv+0x212>
 8000914:	2b03      	cmp	r3, #3
 8000916:	d06e      	beq.n	80009f6 <__aeabi_fdiv+0x182>
 8000918:	4642      	mov	r2, r8
 800091a:	002c      	movs	r4, r5
 800091c:	2b01      	cmp	r3, #1
 800091e:	d140      	bne.n	80009a2 <__aeabi_fdiv+0x12e>
 8000920:	2000      	movs	r0, #0
 8000922:	2400      	movs	r4, #0
 8000924:	05c0      	lsls	r0, r0, #23
 8000926:	4320      	orrs	r0, r4
 8000928:	07d2      	lsls	r2, r2, #31
 800092a:	4310      	orrs	r0, r2
 800092c:	bce0      	pop	{r5, r6, r7}
 800092e:	46ba      	mov	sl, r7
 8000930:	46b1      	mov	r9, r6
 8000932:	46a8      	mov	r8, r5
 8000934:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000936:	20ff      	movs	r0, #255	@ 0xff
 8000938:	2400      	movs	r4, #0
 800093a:	e7f3      	b.n	8000924 <__aeabi_fdiv+0xb0>
 800093c:	2c00      	cmp	r4, #0
 800093e:	d120      	bne.n	8000982 <__aeabi_fdiv+0x10e>
 8000940:	2302      	movs	r3, #2
 8000942:	3fff      	subs	r7, #255	@ 0xff
 8000944:	e7d8      	b.n	80008f8 <__aeabi_fdiv+0x84>
 8000946:	2d00      	cmp	r5, #0
 8000948:	d105      	bne.n	8000956 <__aeabi_fdiv+0xe2>
 800094a:	2304      	movs	r3, #4
 800094c:	4699      	mov	r9, r3
 800094e:	3b03      	subs	r3, #3
 8000950:	2700      	movs	r7, #0
 8000952:	469a      	mov	sl, r3
 8000954:	e7a5      	b.n	80008a2 <__aeabi_fdiv+0x2e>
 8000956:	0028      	movs	r0, r5
 8000958:	f000 fde4 	bl	8001524 <__clzsi2>
 800095c:	2776      	movs	r7, #118	@ 0x76
 800095e:	1f43      	subs	r3, r0, #5
 8000960:	409d      	lsls	r5, r3
 8000962:	2300      	movs	r3, #0
 8000964:	427f      	negs	r7, r7
 8000966:	4699      	mov	r9, r3
 8000968:	469a      	mov	sl, r3
 800096a:	1a3f      	subs	r7, r7, r0
 800096c:	e799      	b.n	80008a2 <__aeabi_fdiv+0x2e>
 800096e:	0020      	movs	r0, r4
 8000970:	f000 fdd8 	bl	8001524 <__clzsi2>
 8000974:	1f43      	subs	r3, r0, #5
 8000976:	409c      	lsls	r4, r3
 8000978:	2376      	movs	r3, #118	@ 0x76
 800097a:	425b      	negs	r3, r3
 800097c:	1a1b      	subs	r3, r3, r0
 800097e:	2000      	movs	r0, #0
 8000980:	e79e      	b.n	80008c0 <__aeabi_fdiv+0x4c>
 8000982:	2303      	movs	r3, #3
 8000984:	464a      	mov	r2, r9
 8000986:	431a      	orrs	r2, r3
 8000988:	4691      	mov	r9, r2
 800098a:	2003      	movs	r0, #3
 800098c:	33fc      	adds	r3, #252	@ 0xfc
 800098e:	e797      	b.n	80008c0 <__aeabi_fdiv+0x4c>
 8000990:	230c      	movs	r3, #12
 8000992:	4699      	mov	r9, r3
 8000994:	3b09      	subs	r3, #9
 8000996:	27ff      	movs	r7, #255	@ 0xff
 8000998:	469a      	mov	sl, r3
 800099a:	e782      	b.n	80008a2 <__aeabi_fdiv+0x2e>
 800099c:	2803      	cmp	r0, #3
 800099e:	d02c      	beq.n	80009fa <__aeabi_fdiv+0x186>
 80009a0:	0032      	movs	r2, r6
 80009a2:	0038      	movs	r0, r7
 80009a4:	307f      	adds	r0, #127	@ 0x7f
 80009a6:	2800      	cmp	r0, #0
 80009a8:	dd47      	ble.n	8000a3a <__aeabi_fdiv+0x1c6>
 80009aa:	0763      	lsls	r3, r4, #29
 80009ac:	d004      	beq.n	80009b8 <__aeabi_fdiv+0x144>
 80009ae:	230f      	movs	r3, #15
 80009b0:	4023      	ands	r3, r4
 80009b2:	2b04      	cmp	r3, #4
 80009b4:	d000      	beq.n	80009b8 <__aeabi_fdiv+0x144>
 80009b6:	3404      	adds	r4, #4
 80009b8:	0123      	lsls	r3, r4, #4
 80009ba:	d503      	bpl.n	80009c4 <__aeabi_fdiv+0x150>
 80009bc:	0038      	movs	r0, r7
 80009be:	4b37      	ldr	r3, [pc, #220]	@ (8000a9c <__aeabi_fdiv+0x228>)
 80009c0:	3080      	adds	r0, #128	@ 0x80
 80009c2:	401c      	ands	r4, r3
 80009c4:	28fe      	cmp	r0, #254	@ 0xfe
 80009c6:	dcb6      	bgt.n	8000936 <__aeabi_fdiv+0xc2>
 80009c8:	01a4      	lsls	r4, r4, #6
 80009ca:	0a64      	lsrs	r4, r4, #9
 80009cc:	b2c0      	uxtb	r0, r0
 80009ce:	e7a9      	b.n	8000924 <__aeabi_fdiv+0xb0>
 80009d0:	2480      	movs	r4, #128	@ 0x80
 80009d2:	2200      	movs	r2, #0
 80009d4:	20ff      	movs	r0, #255	@ 0xff
 80009d6:	03e4      	lsls	r4, r4, #15
 80009d8:	e7a4      	b.n	8000924 <__aeabi_fdiv+0xb0>
 80009da:	2380      	movs	r3, #128	@ 0x80
 80009dc:	03db      	lsls	r3, r3, #15
 80009de:	421d      	tst	r5, r3
 80009e0:	d001      	beq.n	80009e6 <__aeabi_fdiv+0x172>
 80009e2:	421c      	tst	r4, r3
 80009e4:	d00b      	beq.n	80009fe <__aeabi_fdiv+0x18a>
 80009e6:	2480      	movs	r4, #128	@ 0x80
 80009e8:	03e4      	lsls	r4, r4, #15
 80009ea:	432c      	orrs	r4, r5
 80009ec:	0264      	lsls	r4, r4, #9
 80009ee:	4642      	mov	r2, r8
 80009f0:	20ff      	movs	r0, #255	@ 0xff
 80009f2:	0a64      	lsrs	r4, r4, #9
 80009f4:	e796      	b.n	8000924 <__aeabi_fdiv+0xb0>
 80009f6:	4646      	mov	r6, r8
 80009f8:	002c      	movs	r4, r5
 80009fa:	2380      	movs	r3, #128	@ 0x80
 80009fc:	03db      	lsls	r3, r3, #15
 80009fe:	431c      	orrs	r4, r3
 8000a00:	0264      	lsls	r4, r4, #9
 8000a02:	0032      	movs	r2, r6
 8000a04:	20ff      	movs	r0, #255	@ 0xff
 8000a06:	0a64      	lsrs	r4, r4, #9
 8000a08:	e78c      	b.n	8000924 <__aeabi_fdiv+0xb0>
 8000a0a:	016d      	lsls	r5, r5, #5
 8000a0c:	0160      	lsls	r0, r4, #5
 8000a0e:	4285      	cmp	r5, r0
 8000a10:	d22d      	bcs.n	8000a6e <__aeabi_fdiv+0x1fa>
 8000a12:	231b      	movs	r3, #27
 8000a14:	2400      	movs	r4, #0
 8000a16:	3f01      	subs	r7, #1
 8000a18:	2601      	movs	r6, #1
 8000a1a:	0029      	movs	r1, r5
 8000a1c:	0064      	lsls	r4, r4, #1
 8000a1e:	006d      	lsls	r5, r5, #1
 8000a20:	2900      	cmp	r1, #0
 8000a22:	db01      	blt.n	8000a28 <__aeabi_fdiv+0x1b4>
 8000a24:	4285      	cmp	r5, r0
 8000a26:	d301      	bcc.n	8000a2c <__aeabi_fdiv+0x1b8>
 8000a28:	1a2d      	subs	r5, r5, r0
 8000a2a:	4334      	orrs	r4, r6
 8000a2c:	3b01      	subs	r3, #1
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d1f3      	bne.n	8000a1a <__aeabi_fdiv+0x1a6>
 8000a32:	1e6b      	subs	r3, r5, #1
 8000a34:	419d      	sbcs	r5, r3
 8000a36:	432c      	orrs	r4, r5
 8000a38:	e7b3      	b.n	80009a2 <__aeabi_fdiv+0x12e>
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	1a1b      	subs	r3, r3, r0
 8000a3e:	2b1b      	cmp	r3, #27
 8000a40:	dd00      	ble.n	8000a44 <__aeabi_fdiv+0x1d0>
 8000a42:	e76d      	b.n	8000920 <__aeabi_fdiv+0xac>
 8000a44:	0021      	movs	r1, r4
 8000a46:	379e      	adds	r7, #158	@ 0x9e
 8000a48:	40d9      	lsrs	r1, r3
 8000a4a:	40bc      	lsls	r4, r7
 8000a4c:	000b      	movs	r3, r1
 8000a4e:	1e61      	subs	r1, r4, #1
 8000a50:	418c      	sbcs	r4, r1
 8000a52:	4323      	orrs	r3, r4
 8000a54:	0759      	lsls	r1, r3, #29
 8000a56:	d004      	beq.n	8000a62 <__aeabi_fdiv+0x1ee>
 8000a58:	210f      	movs	r1, #15
 8000a5a:	4019      	ands	r1, r3
 8000a5c:	2904      	cmp	r1, #4
 8000a5e:	d000      	beq.n	8000a62 <__aeabi_fdiv+0x1ee>
 8000a60:	3304      	adds	r3, #4
 8000a62:	0159      	lsls	r1, r3, #5
 8000a64:	d413      	bmi.n	8000a8e <__aeabi_fdiv+0x21a>
 8000a66:	019b      	lsls	r3, r3, #6
 8000a68:	2000      	movs	r0, #0
 8000a6a:	0a5c      	lsrs	r4, r3, #9
 8000a6c:	e75a      	b.n	8000924 <__aeabi_fdiv+0xb0>
 8000a6e:	231a      	movs	r3, #26
 8000a70:	2401      	movs	r4, #1
 8000a72:	1a2d      	subs	r5, r5, r0
 8000a74:	e7d0      	b.n	8000a18 <__aeabi_fdiv+0x1a4>
 8000a76:	1e98      	subs	r0, r3, #2
 8000a78:	4243      	negs	r3, r0
 8000a7a:	4158      	adcs	r0, r3
 8000a7c:	4240      	negs	r0, r0
 8000a7e:	0032      	movs	r2, r6
 8000a80:	2400      	movs	r4, #0
 8000a82:	b2c0      	uxtb	r0, r0
 8000a84:	e74e      	b.n	8000924 <__aeabi_fdiv+0xb0>
 8000a86:	4642      	mov	r2, r8
 8000a88:	20ff      	movs	r0, #255	@ 0xff
 8000a8a:	2400      	movs	r4, #0
 8000a8c:	e74a      	b.n	8000924 <__aeabi_fdiv+0xb0>
 8000a8e:	2001      	movs	r0, #1
 8000a90:	2400      	movs	r4, #0
 8000a92:	e747      	b.n	8000924 <__aeabi_fdiv+0xb0>
 8000a94:	08004f38 	.word	0x08004f38
 8000a98:	08004f78 	.word	0x08004f78
 8000a9c:	f7ffffff 	.word	0xf7ffffff

08000aa0 <__eqsf2>:
 8000aa0:	b570      	push	{r4, r5, r6, lr}
 8000aa2:	0042      	lsls	r2, r0, #1
 8000aa4:	024e      	lsls	r6, r1, #9
 8000aa6:	004c      	lsls	r4, r1, #1
 8000aa8:	0245      	lsls	r5, r0, #9
 8000aaa:	0a6d      	lsrs	r5, r5, #9
 8000aac:	0e12      	lsrs	r2, r2, #24
 8000aae:	0fc3      	lsrs	r3, r0, #31
 8000ab0:	0a76      	lsrs	r6, r6, #9
 8000ab2:	0e24      	lsrs	r4, r4, #24
 8000ab4:	0fc9      	lsrs	r1, r1, #31
 8000ab6:	2aff      	cmp	r2, #255	@ 0xff
 8000ab8:	d010      	beq.n	8000adc <__eqsf2+0x3c>
 8000aba:	2cff      	cmp	r4, #255	@ 0xff
 8000abc:	d00c      	beq.n	8000ad8 <__eqsf2+0x38>
 8000abe:	2001      	movs	r0, #1
 8000ac0:	42a2      	cmp	r2, r4
 8000ac2:	d10a      	bne.n	8000ada <__eqsf2+0x3a>
 8000ac4:	42b5      	cmp	r5, r6
 8000ac6:	d108      	bne.n	8000ada <__eqsf2+0x3a>
 8000ac8:	428b      	cmp	r3, r1
 8000aca:	d00f      	beq.n	8000aec <__eqsf2+0x4c>
 8000acc:	2a00      	cmp	r2, #0
 8000ace:	d104      	bne.n	8000ada <__eqsf2+0x3a>
 8000ad0:	0028      	movs	r0, r5
 8000ad2:	1e43      	subs	r3, r0, #1
 8000ad4:	4198      	sbcs	r0, r3
 8000ad6:	e000      	b.n	8000ada <__eqsf2+0x3a>
 8000ad8:	2001      	movs	r0, #1
 8000ada:	bd70      	pop	{r4, r5, r6, pc}
 8000adc:	2001      	movs	r0, #1
 8000ade:	2cff      	cmp	r4, #255	@ 0xff
 8000ae0:	d1fb      	bne.n	8000ada <__eqsf2+0x3a>
 8000ae2:	4335      	orrs	r5, r6
 8000ae4:	d1f9      	bne.n	8000ada <__eqsf2+0x3a>
 8000ae6:	404b      	eors	r3, r1
 8000ae8:	0018      	movs	r0, r3
 8000aea:	e7f6      	b.n	8000ada <__eqsf2+0x3a>
 8000aec:	2000      	movs	r0, #0
 8000aee:	e7f4      	b.n	8000ada <__eqsf2+0x3a>

08000af0 <__gesf2>:
 8000af0:	b530      	push	{r4, r5, lr}
 8000af2:	0042      	lsls	r2, r0, #1
 8000af4:	0244      	lsls	r4, r0, #9
 8000af6:	024d      	lsls	r5, r1, #9
 8000af8:	0fc3      	lsrs	r3, r0, #31
 8000afa:	0048      	lsls	r0, r1, #1
 8000afc:	0a64      	lsrs	r4, r4, #9
 8000afe:	0e12      	lsrs	r2, r2, #24
 8000b00:	0a6d      	lsrs	r5, r5, #9
 8000b02:	0e00      	lsrs	r0, r0, #24
 8000b04:	0fc9      	lsrs	r1, r1, #31
 8000b06:	2aff      	cmp	r2, #255	@ 0xff
 8000b08:	d018      	beq.n	8000b3c <__gesf2+0x4c>
 8000b0a:	28ff      	cmp	r0, #255	@ 0xff
 8000b0c:	d00a      	beq.n	8000b24 <__gesf2+0x34>
 8000b0e:	2a00      	cmp	r2, #0
 8000b10:	d11e      	bne.n	8000b50 <__gesf2+0x60>
 8000b12:	2800      	cmp	r0, #0
 8000b14:	d10a      	bne.n	8000b2c <__gesf2+0x3c>
 8000b16:	2d00      	cmp	r5, #0
 8000b18:	d029      	beq.n	8000b6e <__gesf2+0x7e>
 8000b1a:	2c00      	cmp	r4, #0
 8000b1c:	d12d      	bne.n	8000b7a <__gesf2+0x8a>
 8000b1e:	0048      	lsls	r0, r1, #1
 8000b20:	3801      	subs	r0, #1
 8000b22:	bd30      	pop	{r4, r5, pc}
 8000b24:	2d00      	cmp	r5, #0
 8000b26:	d125      	bne.n	8000b74 <__gesf2+0x84>
 8000b28:	2a00      	cmp	r2, #0
 8000b2a:	d101      	bne.n	8000b30 <__gesf2+0x40>
 8000b2c:	2c00      	cmp	r4, #0
 8000b2e:	d0f6      	beq.n	8000b1e <__gesf2+0x2e>
 8000b30:	428b      	cmp	r3, r1
 8000b32:	d019      	beq.n	8000b68 <__gesf2+0x78>
 8000b34:	2001      	movs	r0, #1
 8000b36:	425b      	negs	r3, r3
 8000b38:	4318      	orrs	r0, r3
 8000b3a:	e7f2      	b.n	8000b22 <__gesf2+0x32>
 8000b3c:	2c00      	cmp	r4, #0
 8000b3e:	d119      	bne.n	8000b74 <__gesf2+0x84>
 8000b40:	28ff      	cmp	r0, #255	@ 0xff
 8000b42:	d1f7      	bne.n	8000b34 <__gesf2+0x44>
 8000b44:	2d00      	cmp	r5, #0
 8000b46:	d115      	bne.n	8000b74 <__gesf2+0x84>
 8000b48:	2000      	movs	r0, #0
 8000b4a:	428b      	cmp	r3, r1
 8000b4c:	d1f2      	bne.n	8000b34 <__gesf2+0x44>
 8000b4e:	e7e8      	b.n	8000b22 <__gesf2+0x32>
 8000b50:	2800      	cmp	r0, #0
 8000b52:	d0ef      	beq.n	8000b34 <__gesf2+0x44>
 8000b54:	428b      	cmp	r3, r1
 8000b56:	d1ed      	bne.n	8000b34 <__gesf2+0x44>
 8000b58:	4282      	cmp	r2, r0
 8000b5a:	dceb      	bgt.n	8000b34 <__gesf2+0x44>
 8000b5c:	db04      	blt.n	8000b68 <__gesf2+0x78>
 8000b5e:	42ac      	cmp	r4, r5
 8000b60:	d8e8      	bhi.n	8000b34 <__gesf2+0x44>
 8000b62:	2000      	movs	r0, #0
 8000b64:	42ac      	cmp	r4, r5
 8000b66:	d2dc      	bcs.n	8000b22 <__gesf2+0x32>
 8000b68:	0058      	lsls	r0, r3, #1
 8000b6a:	3801      	subs	r0, #1
 8000b6c:	e7d9      	b.n	8000b22 <__gesf2+0x32>
 8000b6e:	2c00      	cmp	r4, #0
 8000b70:	d0d7      	beq.n	8000b22 <__gesf2+0x32>
 8000b72:	e7df      	b.n	8000b34 <__gesf2+0x44>
 8000b74:	2002      	movs	r0, #2
 8000b76:	4240      	negs	r0, r0
 8000b78:	e7d3      	b.n	8000b22 <__gesf2+0x32>
 8000b7a:	428b      	cmp	r3, r1
 8000b7c:	d1da      	bne.n	8000b34 <__gesf2+0x44>
 8000b7e:	e7ee      	b.n	8000b5e <__gesf2+0x6e>

08000b80 <__lesf2>:
 8000b80:	b530      	push	{r4, r5, lr}
 8000b82:	0042      	lsls	r2, r0, #1
 8000b84:	0244      	lsls	r4, r0, #9
 8000b86:	024d      	lsls	r5, r1, #9
 8000b88:	0fc3      	lsrs	r3, r0, #31
 8000b8a:	0048      	lsls	r0, r1, #1
 8000b8c:	0a64      	lsrs	r4, r4, #9
 8000b8e:	0e12      	lsrs	r2, r2, #24
 8000b90:	0a6d      	lsrs	r5, r5, #9
 8000b92:	0e00      	lsrs	r0, r0, #24
 8000b94:	0fc9      	lsrs	r1, r1, #31
 8000b96:	2aff      	cmp	r2, #255	@ 0xff
 8000b98:	d017      	beq.n	8000bca <__lesf2+0x4a>
 8000b9a:	28ff      	cmp	r0, #255	@ 0xff
 8000b9c:	d00a      	beq.n	8000bb4 <__lesf2+0x34>
 8000b9e:	2a00      	cmp	r2, #0
 8000ba0:	d11b      	bne.n	8000bda <__lesf2+0x5a>
 8000ba2:	2800      	cmp	r0, #0
 8000ba4:	d10a      	bne.n	8000bbc <__lesf2+0x3c>
 8000ba6:	2d00      	cmp	r5, #0
 8000ba8:	d01d      	beq.n	8000be6 <__lesf2+0x66>
 8000baa:	2c00      	cmp	r4, #0
 8000bac:	d12d      	bne.n	8000c0a <__lesf2+0x8a>
 8000bae:	0048      	lsls	r0, r1, #1
 8000bb0:	3801      	subs	r0, #1
 8000bb2:	e011      	b.n	8000bd8 <__lesf2+0x58>
 8000bb4:	2d00      	cmp	r5, #0
 8000bb6:	d10e      	bne.n	8000bd6 <__lesf2+0x56>
 8000bb8:	2a00      	cmp	r2, #0
 8000bba:	d101      	bne.n	8000bc0 <__lesf2+0x40>
 8000bbc:	2c00      	cmp	r4, #0
 8000bbe:	d0f6      	beq.n	8000bae <__lesf2+0x2e>
 8000bc0:	428b      	cmp	r3, r1
 8000bc2:	d10c      	bne.n	8000bde <__lesf2+0x5e>
 8000bc4:	0058      	lsls	r0, r3, #1
 8000bc6:	3801      	subs	r0, #1
 8000bc8:	e006      	b.n	8000bd8 <__lesf2+0x58>
 8000bca:	2c00      	cmp	r4, #0
 8000bcc:	d103      	bne.n	8000bd6 <__lesf2+0x56>
 8000bce:	28ff      	cmp	r0, #255	@ 0xff
 8000bd0:	d105      	bne.n	8000bde <__lesf2+0x5e>
 8000bd2:	2d00      	cmp	r5, #0
 8000bd4:	d015      	beq.n	8000c02 <__lesf2+0x82>
 8000bd6:	2002      	movs	r0, #2
 8000bd8:	bd30      	pop	{r4, r5, pc}
 8000bda:	2800      	cmp	r0, #0
 8000bdc:	d106      	bne.n	8000bec <__lesf2+0x6c>
 8000bde:	2001      	movs	r0, #1
 8000be0:	425b      	negs	r3, r3
 8000be2:	4318      	orrs	r0, r3
 8000be4:	e7f8      	b.n	8000bd8 <__lesf2+0x58>
 8000be6:	2c00      	cmp	r4, #0
 8000be8:	d0f6      	beq.n	8000bd8 <__lesf2+0x58>
 8000bea:	e7f8      	b.n	8000bde <__lesf2+0x5e>
 8000bec:	428b      	cmp	r3, r1
 8000bee:	d1f6      	bne.n	8000bde <__lesf2+0x5e>
 8000bf0:	4282      	cmp	r2, r0
 8000bf2:	dcf4      	bgt.n	8000bde <__lesf2+0x5e>
 8000bf4:	dbe6      	blt.n	8000bc4 <__lesf2+0x44>
 8000bf6:	42ac      	cmp	r4, r5
 8000bf8:	d8f1      	bhi.n	8000bde <__lesf2+0x5e>
 8000bfa:	2000      	movs	r0, #0
 8000bfc:	42ac      	cmp	r4, r5
 8000bfe:	d2eb      	bcs.n	8000bd8 <__lesf2+0x58>
 8000c00:	e7e0      	b.n	8000bc4 <__lesf2+0x44>
 8000c02:	2000      	movs	r0, #0
 8000c04:	428b      	cmp	r3, r1
 8000c06:	d1ea      	bne.n	8000bde <__lesf2+0x5e>
 8000c08:	e7e6      	b.n	8000bd8 <__lesf2+0x58>
 8000c0a:	428b      	cmp	r3, r1
 8000c0c:	d1e7      	bne.n	8000bde <__lesf2+0x5e>
 8000c0e:	e7f2      	b.n	8000bf6 <__lesf2+0x76>

08000c10 <__aeabi_fmul>:
 8000c10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c12:	464f      	mov	r7, r9
 8000c14:	4646      	mov	r6, r8
 8000c16:	46d6      	mov	lr, sl
 8000c18:	0044      	lsls	r4, r0, #1
 8000c1a:	b5c0      	push	{r6, r7, lr}
 8000c1c:	0246      	lsls	r6, r0, #9
 8000c1e:	1c0f      	adds	r7, r1, #0
 8000c20:	0a76      	lsrs	r6, r6, #9
 8000c22:	0e24      	lsrs	r4, r4, #24
 8000c24:	0fc5      	lsrs	r5, r0, #31
 8000c26:	2c00      	cmp	r4, #0
 8000c28:	d100      	bne.n	8000c2c <__aeabi_fmul+0x1c>
 8000c2a:	e0da      	b.n	8000de2 <__aeabi_fmul+0x1d2>
 8000c2c:	2cff      	cmp	r4, #255	@ 0xff
 8000c2e:	d074      	beq.n	8000d1a <__aeabi_fmul+0x10a>
 8000c30:	2380      	movs	r3, #128	@ 0x80
 8000c32:	00f6      	lsls	r6, r6, #3
 8000c34:	04db      	lsls	r3, r3, #19
 8000c36:	431e      	orrs	r6, r3
 8000c38:	2300      	movs	r3, #0
 8000c3a:	4699      	mov	r9, r3
 8000c3c:	469a      	mov	sl, r3
 8000c3e:	3c7f      	subs	r4, #127	@ 0x7f
 8000c40:	027b      	lsls	r3, r7, #9
 8000c42:	0a5b      	lsrs	r3, r3, #9
 8000c44:	4698      	mov	r8, r3
 8000c46:	007b      	lsls	r3, r7, #1
 8000c48:	0e1b      	lsrs	r3, r3, #24
 8000c4a:	0fff      	lsrs	r7, r7, #31
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d074      	beq.n	8000d3a <__aeabi_fmul+0x12a>
 8000c50:	2bff      	cmp	r3, #255	@ 0xff
 8000c52:	d100      	bne.n	8000c56 <__aeabi_fmul+0x46>
 8000c54:	e08e      	b.n	8000d74 <__aeabi_fmul+0x164>
 8000c56:	4642      	mov	r2, r8
 8000c58:	2180      	movs	r1, #128	@ 0x80
 8000c5a:	00d2      	lsls	r2, r2, #3
 8000c5c:	04c9      	lsls	r1, r1, #19
 8000c5e:	4311      	orrs	r1, r2
 8000c60:	3b7f      	subs	r3, #127	@ 0x7f
 8000c62:	002a      	movs	r2, r5
 8000c64:	18e4      	adds	r4, r4, r3
 8000c66:	464b      	mov	r3, r9
 8000c68:	407a      	eors	r2, r7
 8000c6a:	4688      	mov	r8, r1
 8000c6c:	b2d2      	uxtb	r2, r2
 8000c6e:	2b0a      	cmp	r3, #10
 8000c70:	dc75      	bgt.n	8000d5e <__aeabi_fmul+0x14e>
 8000c72:	464b      	mov	r3, r9
 8000c74:	2000      	movs	r0, #0
 8000c76:	2b02      	cmp	r3, #2
 8000c78:	dd0f      	ble.n	8000c9a <__aeabi_fmul+0x8a>
 8000c7a:	4649      	mov	r1, r9
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	408b      	lsls	r3, r1
 8000c80:	21a6      	movs	r1, #166	@ 0xa6
 8000c82:	00c9      	lsls	r1, r1, #3
 8000c84:	420b      	tst	r3, r1
 8000c86:	d169      	bne.n	8000d5c <__aeabi_fmul+0x14c>
 8000c88:	2190      	movs	r1, #144	@ 0x90
 8000c8a:	0089      	lsls	r1, r1, #2
 8000c8c:	420b      	tst	r3, r1
 8000c8e:	d000      	beq.n	8000c92 <__aeabi_fmul+0x82>
 8000c90:	e100      	b.n	8000e94 <__aeabi_fmul+0x284>
 8000c92:	2188      	movs	r1, #136	@ 0x88
 8000c94:	4219      	tst	r1, r3
 8000c96:	d000      	beq.n	8000c9a <__aeabi_fmul+0x8a>
 8000c98:	e0f5      	b.n	8000e86 <__aeabi_fmul+0x276>
 8000c9a:	4641      	mov	r1, r8
 8000c9c:	0409      	lsls	r1, r1, #16
 8000c9e:	0c09      	lsrs	r1, r1, #16
 8000ca0:	4643      	mov	r3, r8
 8000ca2:	0008      	movs	r0, r1
 8000ca4:	0c35      	lsrs	r5, r6, #16
 8000ca6:	0436      	lsls	r6, r6, #16
 8000ca8:	0c1b      	lsrs	r3, r3, #16
 8000caa:	0c36      	lsrs	r6, r6, #16
 8000cac:	4370      	muls	r0, r6
 8000cae:	4369      	muls	r1, r5
 8000cb0:	435e      	muls	r6, r3
 8000cb2:	435d      	muls	r5, r3
 8000cb4:	1876      	adds	r6, r6, r1
 8000cb6:	0c03      	lsrs	r3, r0, #16
 8000cb8:	199b      	adds	r3, r3, r6
 8000cba:	4299      	cmp	r1, r3
 8000cbc:	d903      	bls.n	8000cc6 <__aeabi_fmul+0xb6>
 8000cbe:	2180      	movs	r1, #128	@ 0x80
 8000cc0:	0249      	lsls	r1, r1, #9
 8000cc2:	468c      	mov	ip, r1
 8000cc4:	4465      	add	r5, ip
 8000cc6:	0400      	lsls	r0, r0, #16
 8000cc8:	0419      	lsls	r1, r3, #16
 8000cca:	0c00      	lsrs	r0, r0, #16
 8000ccc:	1809      	adds	r1, r1, r0
 8000cce:	018e      	lsls	r6, r1, #6
 8000cd0:	1e70      	subs	r0, r6, #1
 8000cd2:	4186      	sbcs	r6, r0
 8000cd4:	0c1b      	lsrs	r3, r3, #16
 8000cd6:	0e89      	lsrs	r1, r1, #26
 8000cd8:	195b      	adds	r3, r3, r5
 8000cda:	430e      	orrs	r6, r1
 8000cdc:	019b      	lsls	r3, r3, #6
 8000cde:	431e      	orrs	r6, r3
 8000ce0:	011b      	lsls	r3, r3, #4
 8000ce2:	d46c      	bmi.n	8000dbe <__aeabi_fmul+0x1ae>
 8000ce4:	0023      	movs	r3, r4
 8000ce6:	337f      	adds	r3, #127	@ 0x7f
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	dc00      	bgt.n	8000cee <__aeabi_fmul+0xde>
 8000cec:	e0b1      	b.n	8000e52 <__aeabi_fmul+0x242>
 8000cee:	0015      	movs	r5, r2
 8000cf0:	0771      	lsls	r1, r6, #29
 8000cf2:	d00b      	beq.n	8000d0c <__aeabi_fmul+0xfc>
 8000cf4:	200f      	movs	r0, #15
 8000cf6:	0021      	movs	r1, r4
 8000cf8:	4030      	ands	r0, r6
 8000cfa:	2804      	cmp	r0, #4
 8000cfc:	d006      	beq.n	8000d0c <__aeabi_fmul+0xfc>
 8000cfe:	3604      	adds	r6, #4
 8000d00:	0132      	lsls	r2, r6, #4
 8000d02:	d503      	bpl.n	8000d0c <__aeabi_fmul+0xfc>
 8000d04:	4b6e      	ldr	r3, [pc, #440]	@ (8000ec0 <__aeabi_fmul+0x2b0>)
 8000d06:	401e      	ands	r6, r3
 8000d08:	000b      	movs	r3, r1
 8000d0a:	3380      	adds	r3, #128	@ 0x80
 8000d0c:	2bfe      	cmp	r3, #254	@ 0xfe
 8000d0e:	dd00      	ble.n	8000d12 <__aeabi_fmul+0x102>
 8000d10:	e0bd      	b.n	8000e8e <__aeabi_fmul+0x27e>
 8000d12:	01b2      	lsls	r2, r6, #6
 8000d14:	0a52      	lsrs	r2, r2, #9
 8000d16:	b2db      	uxtb	r3, r3
 8000d18:	e048      	b.n	8000dac <__aeabi_fmul+0x19c>
 8000d1a:	2e00      	cmp	r6, #0
 8000d1c:	d000      	beq.n	8000d20 <__aeabi_fmul+0x110>
 8000d1e:	e092      	b.n	8000e46 <__aeabi_fmul+0x236>
 8000d20:	2308      	movs	r3, #8
 8000d22:	4699      	mov	r9, r3
 8000d24:	3b06      	subs	r3, #6
 8000d26:	469a      	mov	sl, r3
 8000d28:	027b      	lsls	r3, r7, #9
 8000d2a:	0a5b      	lsrs	r3, r3, #9
 8000d2c:	4698      	mov	r8, r3
 8000d2e:	007b      	lsls	r3, r7, #1
 8000d30:	24ff      	movs	r4, #255	@ 0xff
 8000d32:	0e1b      	lsrs	r3, r3, #24
 8000d34:	0fff      	lsrs	r7, r7, #31
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d18a      	bne.n	8000c50 <__aeabi_fmul+0x40>
 8000d3a:	4642      	mov	r2, r8
 8000d3c:	2a00      	cmp	r2, #0
 8000d3e:	d164      	bne.n	8000e0a <__aeabi_fmul+0x1fa>
 8000d40:	4649      	mov	r1, r9
 8000d42:	3201      	adds	r2, #1
 8000d44:	4311      	orrs	r1, r2
 8000d46:	4689      	mov	r9, r1
 8000d48:	290a      	cmp	r1, #10
 8000d4a:	dc08      	bgt.n	8000d5e <__aeabi_fmul+0x14e>
 8000d4c:	407d      	eors	r5, r7
 8000d4e:	2001      	movs	r0, #1
 8000d50:	b2ea      	uxtb	r2, r5
 8000d52:	2902      	cmp	r1, #2
 8000d54:	dc91      	bgt.n	8000c7a <__aeabi_fmul+0x6a>
 8000d56:	0015      	movs	r5, r2
 8000d58:	2200      	movs	r2, #0
 8000d5a:	e027      	b.n	8000dac <__aeabi_fmul+0x19c>
 8000d5c:	0015      	movs	r5, r2
 8000d5e:	4653      	mov	r3, sl
 8000d60:	2b02      	cmp	r3, #2
 8000d62:	d100      	bne.n	8000d66 <__aeabi_fmul+0x156>
 8000d64:	e093      	b.n	8000e8e <__aeabi_fmul+0x27e>
 8000d66:	2b03      	cmp	r3, #3
 8000d68:	d01a      	beq.n	8000da0 <__aeabi_fmul+0x190>
 8000d6a:	2b01      	cmp	r3, #1
 8000d6c:	d12c      	bne.n	8000dc8 <__aeabi_fmul+0x1b8>
 8000d6e:	2300      	movs	r3, #0
 8000d70:	2200      	movs	r2, #0
 8000d72:	e01b      	b.n	8000dac <__aeabi_fmul+0x19c>
 8000d74:	4643      	mov	r3, r8
 8000d76:	34ff      	adds	r4, #255	@ 0xff
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d055      	beq.n	8000e28 <__aeabi_fmul+0x218>
 8000d7c:	2103      	movs	r1, #3
 8000d7e:	464b      	mov	r3, r9
 8000d80:	430b      	orrs	r3, r1
 8000d82:	0019      	movs	r1, r3
 8000d84:	2b0a      	cmp	r3, #10
 8000d86:	dc00      	bgt.n	8000d8a <__aeabi_fmul+0x17a>
 8000d88:	e092      	b.n	8000eb0 <__aeabi_fmul+0x2a0>
 8000d8a:	2b0f      	cmp	r3, #15
 8000d8c:	d000      	beq.n	8000d90 <__aeabi_fmul+0x180>
 8000d8e:	e08c      	b.n	8000eaa <__aeabi_fmul+0x29a>
 8000d90:	2280      	movs	r2, #128	@ 0x80
 8000d92:	03d2      	lsls	r2, r2, #15
 8000d94:	4216      	tst	r6, r2
 8000d96:	d003      	beq.n	8000da0 <__aeabi_fmul+0x190>
 8000d98:	4643      	mov	r3, r8
 8000d9a:	4213      	tst	r3, r2
 8000d9c:	d100      	bne.n	8000da0 <__aeabi_fmul+0x190>
 8000d9e:	e07d      	b.n	8000e9c <__aeabi_fmul+0x28c>
 8000da0:	2280      	movs	r2, #128	@ 0x80
 8000da2:	03d2      	lsls	r2, r2, #15
 8000da4:	4332      	orrs	r2, r6
 8000da6:	0252      	lsls	r2, r2, #9
 8000da8:	0a52      	lsrs	r2, r2, #9
 8000daa:	23ff      	movs	r3, #255	@ 0xff
 8000dac:	05d8      	lsls	r0, r3, #23
 8000dae:	07ed      	lsls	r5, r5, #31
 8000db0:	4310      	orrs	r0, r2
 8000db2:	4328      	orrs	r0, r5
 8000db4:	bce0      	pop	{r5, r6, r7}
 8000db6:	46ba      	mov	sl, r7
 8000db8:	46b1      	mov	r9, r6
 8000dba:	46a8      	mov	r8, r5
 8000dbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	0015      	movs	r5, r2
 8000dc2:	0871      	lsrs	r1, r6, #1
 8000dc4:	401e      	ands	r6, r3
 8000dc6:	430e      	orrs	r6, r1
 8000dc8:	0023      	movs	r3, r4
 8000dca:	3380      	adds	r3, #128	@ 0x80
 8000dcc:	1c61      	adds	r1, r4, #1
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	dd41      	ble.n	8000e56 <__aeabi_fmul+0x246>
 8000dd2:	0772      	lsls	r2, r6, #29
 8000dd4:	d094      	beq.n	8000d00 <__aeabi_fmul+0xf0>
 8000dd6:	220f      	movs	r2, #15
 8000dd8:	4032      	ands	r2, r6
 8000dda:	2a04      	cmp	r2, #4
 8000ddc:	d000      	beq.n	8000de0 <__aeabi_fmul+0x1d0>
 8000dde:	e78e      	b.n	8000cfe <__aeabi_fmul+0xee>
 8000de0:	e78e      	b.n	8000d00 <__aeabi_fmul+0xf0>
 8000de2:	2e00      	cmp	r6, #0
 8000de4:	d105      	bne.n	8000df2 <__aeabi_fmul+0x1e2>
 8000de6:	2304      	movs	r3, #4
 8000de8:	4699      	mov	r9, r3
 8000dea:	3b03      	subs	r3, #3
 8000dec:	2400      	movs	r4, #0
 8000dee:	469a      	mov	sl, r3
 8000df0:	e726      	b.n	8000c40 <__aeabi_fmul+0x30>
 8000df2:	0030      	movs	r0, r6
 8000df4:	f000 fb96 	bl	8001524 <__clzsi2>
 8000df8:	2476      	movs	r4, #118	@ 0x76
 8000dfa:	1f43      	subs	r3, r0, #5
 8000dfc:	409e      	lsls	r6, r3
 8000dfe:	2300      	movs	r3, #0
 8000e00:	4264      	negs	r4, r4
 8000e02:	4699      	mov	r9, r3
 8000e04:	469a      	mov	sl, r3
 8000e06:	1a24      	subs	r4, r4, r0
 8000e08:	e71a      	b.n	8000c40 <__aeabi_fmul+0x30>
 8000e0a:	4640      	mov	r0, r8
 8000e0c:	f000 fb8a 	bl	8001524 <__clzsi2>
 8000e10:	464b      	mov	r3, r9
 8000e12:	1a24      	subs	r4, r4, r0
 8000e14:	3c76      	subs	r4, #118	@ 0x76
 8000e16:	2b0a      	cmp	r3, #10
 8000e18:	dca1      	bgt.n	8000d5e <__aeabi_fmul+0x14e>
 8000e1a:	4643      	mov	r3, r8
 8000e1c:	3805      	subs	r0, #5
 8000e1e:	4083      	lsls	r3, r0
 8000e20:	407d      	eors	r5, r7
 8000e22:	4698      	mov	r8, r3
 8000e24:	b2ea      	uxtb	r2, r5
 8000e26:	e724      	b.n	8000c72 <__aeabi_fmul+0x62>
 8000e28:	464a      	mov	r2, r9
 8000e2a:	3302      	adds	r3, #2
 8000e2c:	4313      	orrs	r3, r2
 8000e2e:	002a      	movs	r2, r5
 8000e30:	407a      	eors	r2, r7
 8000e32:	b2d2      	uxtb	r2, r2
 8000e34:	2b0a      	cmp	r3, #10
 8000e36:	dc92      	bgt.n	8000d5e <__aeabi_fmul+0x14e>
 8000e38:	4649      	mov	r1, r9
 8000e3a:	0015      	movs	r5, r2
 8000e3c:	2900      	cmp	r1, #0
 8000e3e:	d026      	beq.n	8000e8e <__aeabi_fmul+0x27e>
 8000e40:	4699      	mov	r9, r3
 8000e42:	2002      	movs	r0, #2
 8000e44:	e719      	b.n	8000c7a <__aeabi_fmul+0x6a>
 8000e46:	230c      	movs	r3, #12
 8000e48:	4699      	mov	r9, r3
 8000e4a:	3b09      	subs	r3, #9
 8000e4c:	24ff      	movs	r4, #255	@ 0xff
 8000e4e:	469a      	mov	sl, r3
 8000e50:	e6f6      	b.n	8000c40 <__aeabi_fmul+0x30>
 8000e52:	0015      	movs	r5, r2
 8000e54:	0021      	movs	r1, r4
 8000e56:	2201      	movs	r2, #1
 8000e58:	1ad3      	subs	r3, r2, r3
 8000e5a:	2b1b      	cmp	r3, #27
 8000e5c:	dd00      	ble.n	8000e60 <__aeabi_fmul+0x250>
 8000e5e:	e786      	b.n	8000d6e <__aeabi_fmul+0x15e>
 8000e60:	319e      	adds	r1, #158	@ 0x9e
 8000e62:	0032      	movs	r2, r6
 8000e64:	408e      	lsls	r6, r1
 8000e66:	40da      	lsrs	r2, r3
 8000e68:	1e73      	subs	r3, r6, #1
 8000e6a:	419e      	sbcs	r6, r3
 8000e6c:	4332      	orrs	r2, r6
 8000e6e:	0753      	lsls	r3, r2, #29
 8000e70:	d004      	beq.n	8000e7c <__aeabi_fmul+0x26c>
 8000e72:	230f      	movs	r3, #15
 8000e74:	4013      	ands	r3, r2
 8000e76:	2b04      	cmp	r3, #4
 8000e78:	d000      	beq.n	8000e7c <__aeabi_fmul+0x26c>
 8000e7a:	3204      	adds	r2, #4
 8000e7c:	0153      	lsls	r3, r2, #5
 8000e7e:	d510      	bpl.n	8000ea2 <__aeabi_fmul+0x292>
 8000e80:	2301      	movs	r3, #1
 8000e82:	2200      	movs	r2, #0
 8000e84:	e792      	b.n	8000dac <__aeabi_fmul+0x19c>
 8000e86:	003d      	movs	r5, r7
 8000e88:	4646      	mov	r6, r8
 8000e8a:	4682      	mov	sl, r0
 8000e8c:	e767      	b.n	8000d5e <__aeabi_fmul+0x14e>
 8000e8e:	23ff      	movs	r3, #255	@ 0xff
 8000e90:	2200      	movs	r2, #0
 8000e92:	e78b      	b.n	8000dac <__aeabi_fmul+0x19c>
 8000e94:	2280      	movs	r2, #128	@ 0x80
 8000e96:	2500      	movs	r5, #0
 8000e98:	03d2      	lsls	r2, r2, #15
 8000e9a:	e786      	b.n	8000daa <__aeabi_fmul+0x19a>
 8000e9c:	003d      	movs	r5, r7
 8000e9e:	431a      	orrs	r2, r3
 8000ea0:	e783      	b.n	8000daa <__aeabi_fmul+0x19a>
 8000ea2:	0192      	lsls	r2, r2, #6
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	0a52      	lsrs	r2, r2, #9
 8000ea8:	e780      	b.n	8000dac <__aeabi_fmul+0x19c>
 8000eaa:	003d      	movs	r5, r7
 8000eac:	4646      	mov	r6, r8
 8000eae:	e777      	b.n	8000da0 <__aeabi_fmul+0x190>
 8000eb0:	002a      	movs	r2, r5
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	407a      	eors	r2, r7
 8000eb6:	408b      	lsls	r3, r1
 8000eb8:	2003      	movs	r0, #3
 8000eba:	b2d2      	uxtb	r2, r2
 8000ebc:	e6e9      	b.n	8000c92 <__aeabi_fmul+0x82>
 8000ebe:	46c0      	nop			@ (mov r8, r8)
 8000ec0:	f7ffffff 	.word	0xf7ffffff

08000ec4 <__aeabi_fsub>:
 8000ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ec6:	4647      	mov	r7, r8
 8000ec8:	46ce      	mov	lr, r9
 8000eca:	0243      	lsls	r3, r0, #9
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	0a5f      	lsrs	r7, r3, #9
 8000ed0:	099b      	lsrs	r3, r3, #6
 8000ed2:	0045      	lsls	r5, r0, #1
 8000ed4:	004a      	lsls	r2, r1, #1
 8000ed6:	469c      	mov	ip, r3
 8000ed8:	024b      	lsls	r3, r1, #9
 8000eda:	0fc4      	lsrs	r4, r0, #31
 8000edc:	0fce      	lsrs	r6, r1, #31
 8000ede:	0e2d      	lsrs	r5, r5, #24
 8000ee0:	0a58      	lsrs	r0, r3, #9
 8000ee2:	0e12      	lsrs	r2, r2, #24
 8000ee4:	0999      	lsrs	r1, r3, #6
 8000ee6:	2aff      	cmp	r2, #255	@ 0xff
 8000ee8:	d06b      	beq.n	8000fc2 <__aeabi_fsub+0xfe>
 8000eea:	2301      	movs	r3, #1
 8000eec:	405e      	eors	r6, r3
 8000eee:	1aab      	subs	r3, r5, r2
 8000ef0:	42b4      	cmp	r4, r6
 8000ef2:	d04b      	beq.n	8000f8c <__aeabi_fsub+0xc8>
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	dc00      	bgt.n	8000efa <__aeabi_fsub+0x36>
 8000ef8:	e0ff      	b.n	80010fa <__aeabi_fsub+0x236>
 8000efa:	2a00      	cmp	r2, #0
 8000efc:	d100      	bne.n	8000f00 <__aeabi_fsub+0x3c>
 8000efe:	e088      	b.n	8001012 <__aeabi_fsub+0x14e>
 8000f00:	2dff      	cmp	r5, #255	@ 0xff
 8000f02:	d100      	bne.n	8000f06 <__aeabi_fsub+0x42>
 8000f04:	e0ef      	b.n	80010e6 <__aeabi_fsub+0x222>
 8000f06:	2280      	movs	r2, #128	@ 0x80
 8000f08:	04d2      	lsls	r2, r2, #19
 8000f0a:	4311      	orrs	r1, r2
 8000f0c:	2001      	movs	r0, #1
 8000f0e:	2b1b      	cmp	r3, #27
 8000f10:	dc08      	bgt.n	8000f24 <__aeabi_fsub+0x60>
 8000f12:	0008      	movs	r0, r1
 8000f14:	2220      	movs	r2, #32
 8000f16:	40d8      	lsrs	r0, r3
 8000f18:	1ad3      	subs	r3, r2, r3
 8000f1a:	4099      	lsls	r1, r3
 8000f1c:	000b      	movs	r3, r1
 8000f1e:	1e5a      	subs	r2, r3, #1
 8000f20:	4193      	sbcs	r3, r2
 8000f22:	4318      	orrs	r0, r3
 8000f24:	4663      	mov	r3, ip
 8000f26:	1a1b      	subs	r3, r3, r0
 8000f28:	469c      	mov	ip, r3
 8000f2a:	4663      	mov	r3, ip
 8000f2c:	015b      	lsls	r3, r3, #5
 8000f2e:	d400      	bmi.n	8000f32 <__aeabi_fsub+0x6e>
 8000f30:	e0cd      	b.n	80010ce <__aeabi_fsub+0x20a>
 8000f32:	4663      	mov	r3, ip
 8000f34:	019f      	lsls	r7, r3, #6
 8000f36:	09bf      	lsrs	r7, r7, #6
 8000f38:	0038      	movs	r0, r7
 8000f3a:	f000 faf3 	bl	8001524 <__clzsi2>
 8000f3e:	003b      	movs	r3, r7
 8000f40:	3805      	subs	r0, #5
 8000f42:	4083      	lsls	r3, r0
 8000f44:	4285      	cmp	r5, r0
 8000f46:	dc00      	bgt.n	8000f4a <__aeabi_fsub+0x86>
 8000f48:	e0a2      	b.n	8001090 <__aeabi_fsub+0x1cc>
 8000f4a:	4ab7      	ldr	r2, [pc, #732]	@ (8001228 <__aeabi_fsub+0x364>)
 8000f4c:	1a2d      	subs	r5, r5, r0
 8000f4e:	401a      	ands	r2, r3
 8000f50:	4694      	mov	ip, r2
 8000f52:	075a      	lsls	r2, r3, #29
 8000f54:	d100      	bne.n	8000f58 <__aeabi_fsub+0x94>
 8000f56:	e0c3      	b.n	80010e0 <__aeabi_fsub+0x21c>
 8000f58:	220f      	movs	r2, #15
 8000f5a:	4013      	ands	r3, r2
 8000f5c:	2b04      	cmp	r3, #4
 8000f5e:	d100      	bne.n	8000f62 <__aeabi_fsub+0x9e>
 8000f60:	e0be      	b.n	80010e0 <__aeabi_fsub+0x21c>
 8000f62:	2304      	movs	r3, #4
 8000f64:	4698      	mov	r8, r3
 8000f66:	44c4      	add	ip, r8
 8000f68:	4663      	mov	r3, ip
 8000f6a:	015b      	lsls	r3, r3, #5
 8000f6c:	d400      	bmi.n	8000f70 <__aeabi_fsub+0xac>
 8000f6e:	e0b7      	b.n	80010e0 <__aeabi_fsub+0x21c>
 8000f70:	1c68      	adds	r0, r5, #1
 8000f72:	2dfe      	cmp	r5, #254	@ 0xfe
 8000f74:	d000      	beq.n	8000f78 <__aeabi_fsub+0xb4>
 8000f76:	e0a5      	b.n	80010c4 <__aeabi_fsub+0x200>
 8000f78:	20ff      	movs	r0, #255	@ 0xff
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	05c0      	lsls	r0, r0, #23
 8000f7e:	4310      	orrs	r0, r2
 8000f80:	07e4      	lsls	r4, r4, #31
 8000f82:	4320      	orrs	r0, r4
 8000f84:	bcc0      	pop	{r6, r7}
 8000f86:	46b9      	mov	r9, r7
 8000f88:	46b0      	mov	r8, r6
 8000f8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	dc00      	bgt.n	8000f92 <__aeabi_fsub+0xce>
 8000f90:	e1eb      	b.n	800136a <__aeabi_fsub+0x4a6>
 8000f92:	2a00      	cmp	r2, #0
 8000f94:	d046      	beq.n	8001024 <__aeabi_fsub+0x160>
 8000f96:	2dff      	cmp	r5, #255	@ 0xff
 8000f98:	d100      	bne.n	8000f9c <__aeabi_fsub+0xd8>
 8000f9a:	e0a4      	b.n	80010e6 <__aeabi_fsub+0x222>
 8000f9c:	2280      	movs	r2, #128	@ 0x80
 8000f9e:	04d2      	lsls	r2, r2, #19
 8000fa0:	4311      	orrs	r1, r2
 8000fa2:	2b1b      	cmp	r3, #27
 8000fa4:	dc00      	bgt.n	8000fa8 <__aeabi_fsub+0xe4>
 8000fa6:	e0fb      	b.n	80011a0 <__aeabi_fsub+0x2dc>
 8000fa8:	2305      	movs	r3, #5
 8000faa:	4698      	mov	r8, r3
 8000fac:	002b      	movs	r3, r5
 8000fae:	44c4      	add	ip, r8
 8000fb0:	4662      	mov	r2, ip
 8000fb2:	08d7      	lsrs	r7, r2, #3
 8000fb4:	2bff      	cmp	r3, #255	@ 0xff
 8000fb6:	d100      	bne.n	8000fba <__aeabi_fsub+0xf6>
 8000fb8:	e095      	b.n	80010e6 <__aeabi_fsub+0x222>
 8000fba:	027a      	lsls	r2, r7, #9
 8000fbc:	0a52      	lsrs	r2, r2, #9
 8000fbe:	b2d8      	uxtb	r0, r3
 8000fc0:	e7dc      	b.n	8000f7c <__aeabi_fsub+0xb8>
 8000fc2:	002b      	movs	r3, r5
 8000fc4:	3bff      	subs	r3, #255	@ 0xff
 8000fc6:	4699      	mov	r9, r3
 8000fc8:	2900      	cmp	r1, #0
 8000fca:	d118      	bne.n	8000ffe <__aeabi_fsub+0x13a>
 8000fcc:	2301      	movs	r3, #1
 8000fce:	405e      	eors	r6, r3
 8000fd0:	42b4      	cmp	r4, r6
 8000fd2:	d100      	bne.n	8000fd6 <__aeabi_fsub+0x112>
 8000fd4:	e0ca      	b.n	800116c <__aeabi_fsub+0x2a8>
 8000fd6:	464b      	mov	r3, r9
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d02d      	beq.n	8001038 <__aeabi_fsub+0x174>
 8000fdc:	2d00      	cmp	r5, #0
 8000fde:	d000      	beq.n	8000fe2 <__aeabi_fsub+0x11e>
 8000fe0:	e13c      	b.n	800125c <__aeabi_fsub+0x398>
 8000fe2:	23ff      	movs	r3, #255	@ 0xff
 8000fe4:	4664      	mov	r4, ip
 8000fe6:	2c00      	cmp	r4, #0
 8000fe8:	d100      	bne.n	8000fec <__aeabi_fsub+0x128>
 8000fea:	e15f      	b.n	80012ac <__aeabi_fsub+0x3e8>
 8000fec:	1e5d      	subs	r5, r3, #1
 8000fee:	2b01      	cmp	r3, #1
 8000ff0:	d100      	bne.n	8000ff4 <__aeabi_fsub+0x130>
 8000ff2:	e174      	b.n	80012de <__aeabi_fsub+0x41a>
 8000ff4:	0034      	movs	r4, r6
 8000ff6:	2bff      	cmp	r3, #255	@ 0xff
 8000ff8:	d074      	beq.n	80010e4 <__aeabi_fsub+0x220>
 8000ffa:	002b      	movs	r3, r5
 8000ffc:	e103      	b.n	8001206 <__aeabi_fsub+0x342>
 8000ffe:	42b4      	cmp	r4, r6
 8001000:	d100      	bne.n	8001004 <__aeabi_fsub+0x140>
 8001002:	e09c      	b.n	800113e <__aeabi_fsub+0x27a>
 8001004:	2b00      	cmp	r3, #0
 8001006:	d017      	beq.n	8001038 <__aeabi_fsub+0x174>
 8001008:	2d00      	cmp	r5, #0
 800100a:	d0ea      	beq.n	8000fe2 <__aeabi_fsub+0x11e>
 800100c:	0007      	movs	r7, r0
 800100e:	0034      	movs	r4, r6
 8001010:	e06c      	b.n	80010ec <__aeabi_fsub+0x228>
 8001012:	2900      	cmp	r1, #0
 8001014:	d0cc      	beq.n	8000fb0 <__aeabi_fsub+0xec>
 8001016:	1e5a      	subs	r2, r3, #1
 8001018:	2b01      	cmp	r3, #1
 800101a:	d02b      	beq.n	8001074 <__aeabi_fsub+0x1b0>
 800101c:	2bff      	cmp	r3, #255	@ 0xff
 800101e:	d062      	beq.n	80010e6 <__aeabi_fsub+0x222>
 8001020:	0013      	movs	r3, r2
 8001022:	e773      	b.n	8000f0c <__aeabi_fsub+0x48>
 8001024:	2900      	cmp	r1, #0
 8001026:	d0c3      	beq.n	8000fb0 <__aeabi_fsub+0xec>
 8001028:	1e5a      	subs	r2, r3, #1
 800102a:	2b01      	cmp	r3, #1
 800102c:	d100      	bne.n	8001030 <__aeabi_fsub+0x16c>
 800102e:	e11e      	b.n	800126e <__aeabi_fsub+0x3aa>
 8001030:	2bff      	cmp	r3, #255	@ 0xff
 8001032:	d058      	beq.n	80010e6 <__aeabi_fsub+0x222>
 8001034:	0013      	movs	r3, r2
 8001036:	e7b4      	b.n	8000fa2 <__aeabi_fsub+0xde>
 8001038:	22fe      	movs	r2, #254	@ 0xfe
 800103a:	1c6b      	adds	r3, r5, #1
 800103c:	421a      	tst	r2, r3
 800103e:	d10d      	bne.n	800105c <__aeabi_fsub+0x198>
 8001040:	2d00      	cmp	r5, #0
 8001042:	d060      	beq.n	8001106 <__aeabi_fsub+0x242>
 8001044:	4663      	mov	r3, ip
 8001046:	2b00      	cmp	r3, #0
 8001048:	d000      	beq.n	800104c <__aeabi_fsub+0x188>
 800104a:	e120      	b.n	800128e <__aeabi_fsub+0x3ca>
 800104c:	2900      	cmp	r1, #0
 800104e:	d000      	beq.n	8001052 <__aeabi_fsub+0x18e>
 8001050:	e128      	b.n	80012a4 <__aeabi_fsub+0x3e0>
 8001052:	2280      	movs	r2, #128	@ 0x80
 8001054:	2400      	movs	r4, #0
 8001056:	20ff      	movs	r0, #255	@ 0xff
 8001058:	03d2      	lsls	r2, r2, #15
 800105a:	e78f      	b.n	8000f7c <__aeabi_fsub+0xb8>
 800105c:	4663      	mov	r3, ip
 800105e:	1a5f      	subs	r7, r3, r1
 8001060:	017b      	lsls	r3, r7, #5
 8001062:	d500      	bpl.n	8001066 <__aeabi_fsub+0x1a2>
 8001064:	e0fe      	b.n	8001264 <__aeabi_fsub+0x3a0>
 8001066:	2f00      	cmp	r7, #0
 8001068:	d000      	beq.n	800106c <__aeabi_fsub+0x1a8>
 800106a:	e765      	b.n	8000f38 <__aeabi_fsub+0x74>
 800106c:	2400      	movs	r4, #0
 800106e:	2000      	movs	r0, #0
 8001070:	2200      	movs	r2, #0
 8001072:	e783      	b.n	8000f7c <__aeabi_fsub+0xb8>
 8001074:	4663      	mov	r3, ip
 8001076:	1a59      	subs	r1, r3, r1
 8001078:	014b      	lsls	r3, r1, #5
 800107a:	d400      	bmi.n	800107e <__aeabi_fsub+0x1ba>
 800107c:	e119      	b.n	80012b2 <__aeabi_fsub+0x3ee>
 800107e:	018f      	lsls	r7, r1, #6
 8001080:	09bf      	lsrs	r7, r7, #6
 8001082:	0038      	movs	r0, r7
 8001084:	f000 fa4e 	bl	8001524 <__clzsi2>
 8001088:	003b      	movs	r3, r7
 800108a:	3805      	subs	r0, #5
 800108c:	4083      	lsls	r3, r0
 800108e:	2501      	movs	r5, #1
 8001090:	2220      	movs	r2, #32
 8001092:	1b40      	subs	r0, r0, r5
 8001094:	3001      	adds	r0, #1
 8001096:	1a12      	subs	r2, r2, r0
 8001098:	0019      	movs	r1, r3
 800109a:	4093      	lsls	r3, r2
 800109c:	40c1      	lsrs	r1, r0
 800109e:	1e5a      	subs	r2, r3, #1
 80010a0:	4193      	sbcs	r3, r2
 80010a2:	4319      	orrs	r1, r3
 80010a4:	468c      	mov	ip, r1
 80010a6:	1e0b      	subs	r3, r1, #0
 80010a8:	d0e1      	beq.n	800106e <__aeabi_fsub+0x1aa>
 80010aa:	075b      	lsls	r3, r3, #29
 80010ac:	d100      	bne.n	80010b0 <__aeabi_fsub+0x1ec>
 80010ae:	e152      	b.n	8001356 <__aeabi_fsub+0x492>
 80010b0:	230f      	movs	r3, #15
 80010b2:	2500      	movs	r5, #0
 80010b4:	400b      	ands	r3, r1
 80010b6:	2b04      	cmp	r3, #4
 80010b8:	d000      	beq.n	80010bc <__aeabi_fsub+0x1f8>
 80010ba:	e752      	b.n	8000f62 <__aeabi_fsub+0x9e>
 80010bc:	2001      	movs	r0, #1
 80010be:	014a      	lsls	r2, r1, #5
 80010c0:	d400      	bmi.n	80010c4 <__aeabi_fsub+0x200>
 80010c2:	e092      	b.n	80011ea <__aeabi_fsub+0x326>
 80010c4:	b2c0      	uxtb	r0, r0
 80010c6:	4663      	mov	r3, ip
 80010c8:	019a      	lsls	r2, r3, #6
 80010ca:	0a52      	lsrs	r2, r2, #9
 80010cc:	e756      	b.n	8000f7c <__aeabi_fsub+0xb8>
 80010ce:	4663      	mov	r3, ip
 80010d0:	075b      	lsls	r3, r3, #29
 80010d2:	d005      	beq.n	80010e0 <__aeabi_fsub+0x21c>
 80010d4:	230f      	movs	r3, #15
 80010d6:	4662      	mov	r2, ip
 80010d8:	4013      	ands	r3, r2
 80010da:	2b04      	cmp	r3, #4
 80010dc:	d000      	beq.n	80010e0 <__aeabi_fsub+0x21c>
 80010de:	e740      	b.n	8000f62 <__aeabi_fsub+0x9e>
 80010e0:	002b      	movs	r3, r5
 80010e2:	e765      	b.n	8000fb0 <__aeabi_fsub+0xec>
 80010e4:	0007      	movs	r7, r0
 80010e6:	2f00      	cmp	r7, #0
 80010e8:	d100      	bne.n	80010ec <__aeabi_fsub+0x228>
 80010ea:	e745      	b.n	8000f78 <__aeabi_fsub+0xb4>
 80010ec:	2280      	movs	r2, #128	@ 0x80
 80010ee:	03d2      	lsls	r2, r2, #15
 80010f0:	433a      	orrs	r2, r7
 80010f2:	0252      	lsls	r2, r2, #9
 80010f4:	20ff      	movs	r0, #255	@ 0xff
 80010f6:	0a52      	lsrs	r2, r2, #9
 80010f8:	e740      	b.n	8000f7c <__aeabi_fsub+0xb8>
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d179      	bne.n	80011f2 <__aeabi_fsub+0x32e>
 80010fe:	22fe      	movs	r2, #254	@ 0xfe
 8001100:	1c6b      	adds	r3, r5, #1
 8001102:	421a      	tst	r2, r3
 8001104:	d1aa      	bne.n	800105c <__aeabi_fsub+0x198>
 8001106:	4663      	mov	r3, ip
 8001108:	2b00      	cmp	r3, #0
 800110a:	d100      	bne.n	800110e <__aeabi_fsub+0x24a>
 800110c:	e0f5      	b.n	80012fa <__aeabi_fsub+0x436>
 800110e:	2900      	cmp	r1, #0
 8001110:	d100      	bne.n	8001114 <__aeabi_fsub+0x250>
 8001112:	e0d1      	b.n	80012b8 <__aeabi_fsub+0x3f4>
 8001114:	1a5f      	subs	r7, r3, r1
 8001116:	2380      	movs	r3, #128	@ 0x80
 8001118:	04db      	lsls	r3, r3, #19
 800111a:	421f      	tst	r7, r3
 800111c:	d100      	bne.n	8001120 <__aeabi_fsub+0x25c>
 800111e:	e10e      	b.n	800133e <__aeabi_fsub+0x47a>
 8001120:	4662      	mov	r2, ip
 8001122:	2401      	movs	r4, #1
 8001124:	1a8a      	subs	r2, r1, r2
 8001126:	4694      	mov	ip, r2
 8001128:	2000      	movs	r0, #0
 800112a:	4034      	ands	r4, r6
 800112c:	2a00      	cmp	r2, #0
 800112e:	d100      	bne.n	8001132 <__aeabi_fsub+0x26e>
 8001130:	e724      	b.n	8000f7c <__aeabi_fsub+0xb8>
 8001132:	2001      	movs	r0, #1
 8001134:	421a      	tst	r2, r3
 8001136:	d1c6      	bne.n	80010c6 <__aeabi_fsub+0x202>
 8001138:	2300      	movs	r3, #0
 800113a:	08d7      	lsrs	r7, r2, #3
 800113c:	e73d      	b.n	8000fba <__aeabi_fsub+0xf6>
 800113e:	2b00      	cmp	r3, #0
 8001140:	d017      	beq.n	8001172 <__aeabi_fsub+0x2ae>
 8001142:	2d00      	cmp	r5, #0
 8001144:	d000      	beq.n	8001148 <__aeabi_fsub+0x284>
 8001146:	e0af      	b.n	80012a8 <__aeabi_fsub+0x3e4>
 8001148:	23ff      	movs	r3, #255	@ 0xff
 800114a:	4665      	mov	r5, ip
 800114c:	2d00      	cmp	r5, #0
 800114e:	d100      	bne.n	8001152 <__aeabi_fsub+0x28e>
 8001150:	e0ad      	b.n	80012ae <__aeabi_fsub+0x3ea>
 8001152:	1e5e      	subs	r6, r3, #1
 8001154:	2b01      	cmp	r3, #1
 8001156:	d100      	bne.n	800115a <__aeabi_fsub+0x296>
 8001158:	e089      	b.n	800126e <__aeabi_fsub+0x3aa>
 800115a:	2bff      	cmp	r3, #255	@ 0xff
 800115c:	d0c2      	beq.n	80010e4 <__aeabi_fsub+0x220>
 800115e:	2e1b      	cmp	r6, #27
 8001160:	dc00      	bgt.n	8001164 <__aeabi_fsub+0x2a0>
 8001162:	e0ab      	b.n	80012bc <__aeabi_fsub+0x3f8>
 8001164:	1d4b      	adds	r3, r1, #5
 8001166:	469c      	mov	ip, r3
 8001168:	0013      	movs	r3, r2
 800116a:	e721      	b.n	8000fb0 <__aeabi_fsub+0xec>
 800116c:	464b      	mov	r3, r9
 800116e:	2b00      	cmp	r3, #0
 8001170:	d170      	bne.n	8001254 <__aeabi_fsub+0x390>
 8001172:	22fe      	movs	r2, #254	@ 0xfe
 8001174:	1c6b      	adds	r3, r5, #1
 8001176:	421a      	tst	r2, r3
 8001178:	d15e      	bne.n	8001238 <__aeabi_fsub+0x374>
 800117a:	2d00      	cmp	r5, #0
 800117c:	d000      	beq.n	8001180 <__aeabi_fsub+0x2bc>
 800117e:	e0c3      	b.n	8001308 <__aeabi_fsub+0x444>
 8001180:	4663      	mov	r3, ip
 8001182:	2b00      	cmp	r3, #0
 8001184:	d100      	bne.n	8001188 <__aeabi_fsub+0x2c4>
 8001186:	e0d0      	b.n	800132a <__aeabi_fsub+0x466>
 8001188:	2900      	cmp	r1, #0
 800118a:	d100      	bne.n	800118e <__aeabi_fsub+0x2ca>
 800118c:	e094      	b.n	80012b8 <__aeabi_fsub+0x3f4>
 800118e:	000a      	movs	r2, r1
 8001190:	4462      	add	r2, ip
 8001192:	0153      	lsls	r3, r2, #5
 8001194:	d400      	bmi.n	8001198 <__aeabi_fsub+0x2d4>
 8001196:	e0d8      	b.n	800134a <__aeabi_fsub+0x486>
 8001198:	0192      	lsls	r2, r2, #6
 800119a:	2001      	movs	r0, #1
 800119c:	0a52      	lsrs	r2, r2, #9
 800119e:	e6ed      	b.n	8000f7c <__aeabi_fsub+0xb8>
 80011a0:	0008      	movs	r0, r1
 80011a2:	2220      	movs	r2, #32
 80011a4:	40d8      	lsrs	r0, r3
 80011a6:	1ad3      	subs	r3, r2, r3
 80011a8:	4099      	lsls	r1, r3
 80011aa:	000b      	movs	r3, r1
 80011ac:	1e5a      	subs	r2, r3, #1
 80011ae:	4193      	sbcs	r3, r2
 80011b0:	4303      	orrs	r3, r0
 80011b2:	449c      	add	ip, r3
 80011b4:	4663      	mov	r3, ip
 80011b6:	015b      	lsls	r3, r3, #5
 80011b8:	d589      	bpl.n	80010ce <__aeabi_fsub+0x20a>
 80011ba:	3501      	adds	r5, #1
 80011bc:	2dff      	cmp	r5, #255	@ 0xff
 80011be:	d100      	bne.n	80011c2 <__aeabi_fsub+0x2fe>
 80011c0:	e6da      	b.n	8000f78 <__aeabi_fsub+0xb4>
 80011c2:	4662      	mov	r2, ip
 80011c4:	2301      	movs	r3, #1
 80011c6:	4919      	ldr	r1, [pc, #100]	@ (800122c <__aeabi_fsub+0x368>)
 80011c8:	4013      	ands	r3, r2
 80011ca:	0852      	lsrs	r2, r2, #1
 80011cc:	400a      	ands	r2, r1
 80011ce:	431a      	orrs	r2, r3
 80011d0:	0013      	movs	r3, r2
 80011d2:	4694      	mov	ip, r2
 80011d4:	075b      	lsls	r3, r3, #29
 80011d6:	d004      	beq.n	80011e2 <__aeabi_fsub+0x31e>
 80011d8:	230f      	movs	r3, #15
 80011da:	4013      	ands	r3, r2
 80011dc:	2b04      	cmp	r3, #4
 80011de:	d000      	beq.n	80011e2 <__aeabi_fsub+0x31e>
 80011e0:	e6bf      	b.n	8000f62 <__aeabi_fsub+0x9e>
 80011e2:	4663      	mov	r3, ip
 80011e4:	015b      	lsls	r3, r3, #5
 80011e6:	d500      	bpl.n	80011ea <__aeabi_fsub+0x326>
 80011e8:	e6c2      	b.n	8000f70 <__aeabi_fsub+0xac>
 80011ea:	4663      	mov	r3, ip
 80011ec:	08df      	lsrs	r7, r3, #3
 80011ee:	002b      	movs	r3, r5
 80011f0:	e6e3      	b.n	8000fba <__aeabi_fsub+0xf6>
 80011f2:	1b53      	subs	r3, r2, r5
 80011f4:	2d00      	cmp	r5, #0
 80011f6:	d100      	bne.n	80011fa <__aeabi_fsub+0x336>
 80011f8:	e6f4      	b.n	8000fe4 <__aeabi_fsub+0x120>
 80011fa:	2080      	movs	r0, #128	@ 0x80
 80011fc:	4664      	mov	r4, ip
 80011fe:	04c0      	lsls	r0, r0, #19
 8001200:	4304      	orrs	r4, r0
 8001202:	46a4      	mov	ip, r4
 8001204:	0034      	movs	r4, r6
 8001206:	2001      	movs	r0, #1
 8001208:	2b1b      	cmp	r3, #27
 800120a:	dc09      	bgt.n	8001220 <__aeabi_fsub+0x35c>
 800120c:	2520      	movs	r5, #32
 800120e:	4660      	mov	r0, ip
 8001210:	40d8      	lsrs	r0, r3
 8001212:	1aeb      	subs	r3, r5, r3
 8001214:	4665      	mov	r5, ip
 8001216:	409d      	lsls	r5, r3
 8001218:	002b      	movs	r3, r5
 800121a:	1e5d      	subs	r5, r3, #1
 800121c:	41ab      	sbcs	r3, r5
 800121e:	4318      	orrs	r0, r3
 8001220:	1a0b      	subs	r3, r1, r0
 8001222:	469c      	mov	ip, r3
 8001224:	0015      	movs	r5, r2
 8001226:	e680      	b.n	8000f2a <__aeabi_fsub+0x66>
 8001228:	fbffffff 	.word	0xfbffffff
 800122c:	7dffffff 	.word	0x7dffffff
 8001230:	22fe      	movs	r2, #254	@ 0xfe
 8001232:	1c6b      	adds	r3, r5, #1
 8001234:	4213      	tst	r3, r2
 8001236:	d0a3      	beq.n	8001180 <__aeabi_fsub+0x2bc>
 8001238:	2bff      	cmp	r3, #255	@ 0xff
 800123a:	d100      	bne.n	800123e <__aeabi_fsub+0x37a>
 800123c:	e69c      	b.n	8000f78 <__aeabi_fsub+0xb4>
 800123e:	4461      	add	r1, ip
 8001240:	0849      	lsrs	r1, r1, #1
 8001242:	074a      	lsls	r2, r1, #29
 8001244:	d049      	beq.n	80012da <__aeabi_fsub+0x416>
 8001246:	220f      	movs	r2, #15
 8001248:	400a      	ands	r2, r1
 800124a:	2a04      	cmp	r2, #4
 800124c:	d045      	beq.n	80012da <__aeabi_fsub+0x416>
 800124e:	1d0a      	adds	r2, r1, #4
 8001250:	4694      	mov	ip, r2
 8001252:	e6ad      	b.n	8000fb0 <__aeabi_fsub+0xec>
 8001254:	2d00      	cmp	r5, #0
 8001256:	d100      	bne.n	800125a <__aeabi_fsub+0x396>
 8001258:	e776      	b.n	8001148 <__aeabi_fsub+0x284>
 800125a:	e68d      	b.n	8000f78 <__aeabi_fsub+0xb4>
 800125c:	0034      	movs	r4, r6
 800125e:	20ff      	movs	r0, #255	@ 0xff
 8001260:	2200      	movs	r2, #0
 8001262:	e68b      	b.n	8000f7c <__aeabi_fsub+0xb8>
 8001264:	4663      	mov	r3, ip
 8001266:	2401      	movs	r4, #1
 8001268:	1acf      	subs	r7, r1, r3
 800126a:	4034      	ands	r4, r6
 800126c:	e664      	b.n	8000f38 <__aeabi_fsub+0x74>
 800126e:	4461      	add	r1, ip
 8001270:	014b      	lsls	r3, r1, #5
 8001272:	d56d      	bpl.n	8001350 <__aeabi_fsub+0x48c>
 8001274:	0848      	lsrs	r0, r1, #1
 8001276:	4944      	ldr	r1, [pc, #272]	@ (8001388 <__aeabi_fsub+0x4c4>)
 8001278:	4001      	ands	r1, r0
 800127a:	0743      	lsls	r3, r0, #29
 800127c:	d02c      	beq.n	80012d8 <__aeabi_fsub+0x414>
 800127e:	230f      	movs	r3, #15
 8001280:	4003      	ands	r3, r0
 8001282:	2b04      	cmp	r3, #4
 8001284:	d028      	beq.n	80012d8 <__aeabi_fsub+0x414>
 8001286:	1d0b      	adds	r3, r1, #4
 8001288:	469c      	mov	ip, r3
 800128a:	2302      	movs	r3, #2
 800128c:	e690      	b.n	8000fb0 <__aeabi_fsub+0xec>
 800128e:	2900      	cmp	r1, #0
 8001290:	d100      	bne.n	8001294 <__aeabi_fsub+0x3d0>
 8001292:	e72b      	b.n	80010ec <__aeabi_fsub+0x228>
 8001294:	2380      	movs	r3, #128	@ 0x80
 8001296:	03db      	lsls	r3, r3, #15
 8001298:	429f      	cmp	r7, r3
 800129a:	d200      	bcs.n	800129e <__aeabi_fsub+0x3da>
 800129c:	e726      	b.n	80010ec <__aeabi_fsub+0x228>
 800129e:	4298      	cmp	r0, r3
 80012a0:	d300      	bcc.n	80012a4 <__aeabi_fsub+0x3e0>
 80012a2:	e723      	b.n	80010ec <__aeabi_fsub+0x228>
 80012a4:	2401      	movs	r4, #1
 80012a6:	4034      	ands	r4, r6
 80012a8:	0007      	movs	r7, r0
 80012aa:	e71f      	b.n	80010ec <__aeabi_fsub+0x228>
 80012ac:	0034      	movs	r4, r6
 80012ae:	468c      	mov	ip, r1
 80012b0:	e67e      	b.n	8000fb0 <__aeabi_fsub+0xec>
 80012b2:	2301      	movs	r3, #1
 80012b4:	08cf      	lsrs	r7, r1, #3
 80012b6:	e680      	b.n	8000fba <__aeabi_fsub+0xf6>
 80012b8:	2300      	movs	r3, #0
 80012ba:	e67e      	b.n	8000fba <__aeabi_fsub+0xf6>
 80012bc:	2020      	movs	r0, #32
 80012be:	4665      	mov	r5, ip
 80012c0:	1b80      	subs	r0, r0, r6
 80012c2:	4085      	lsls	r5, r0
 80012c4:	4663      	mov	r3, ip
 80012c6:	0028      	movs	r0, r5
 80012c8:	40f3      	lsrs	r3, r6
 80012ca:	1e45      	subs	r5, r0, #1
 80012cc:	41a8      	sbcs	r0, r5
 80012ce:	4303      	orrs	r3, r0
 80012d0:	469c      	mov	ip, r3
 80012d2:	0015      	movs	r5, r2
 80012d4:	448c      	add	ip, r1
 80012d6:	e76d      	b.n	80011b4 <__aeabi_fsub+0x2f0>
 80012d8:	2302      	movs	r3, #2
 80012da:	08cf      	lsrs	r7, r1, #3
 80012dc:	e66d      	b.n	8000fba <__aeabi_fsub+0xf6>
 80012de:	1b0f      	subs	r7, r1, r4
 80012e0:	017b      	lsls	r3, r7, #5
 80012e2:	d528      	bpl.n	8001336 <__aeabi_fsub+0x472>
 80012e4:	01bf      	lsls	r7, r7, #6
 80012e6:	09bf      	lsrs	r7, r7, #6
 80012e8:	0038      	movs	r0, r7
 80012ea:	f000 f91b 	bl	8001524 <__clzsi2>
 80012ee:	003b      	movs	r3, r7
 80012f0:	3805      	subs	r0, #5
 80012f2:	4083      	lsls	r3, r0
 80012f4:	0034      	movs	r4, r6
 80012f6:	2501      	movs	r5, #1
 80012f8:	e6ca      	b.n	8001090 <__aeabi_fsub+0x1cc>
 80012fa:	2900      	cmp	r1, #0
 80012fc:	d100      	bne.n	8001300 <__aeabi_fsub+0x43c>
 80012fe:	e6b5      	b.n	800106c <__aeabi_fsub+0x1a8>
 8001300:	2401      	movs	r4, #1
 8001302:	0007      	movs	r7, r0
 8001304:	4034      	ands	r4, r6
 8001306:	e658      	b.n	8000fba <__aeabi_fsub+0xf6>
 8001308:	4663      	mov	r3, ip
 800130a:	2b00      	cmp	r3, #0
 800130c:	d100      	bne.n	8001310 <__aeabi_fsub+0x44c>
 800130e:	e6e9      	b.n	80010e4 <__aeabi_fsub+0x220>
 8001310:	2900      	cmp	r1, #0
 8001312:	d100      	bne.n	8001316 <__aeabi_fsub+0x452>
 8001314:	e6ea      	b.n	80010ec <__aeabi_fsub+0x228>
 8001316:	2380      	movs	r3, #128	@ 0x80
 8001318:	03db      	lsls	r3, r3, #15
 800131a:	429f      	cmp	r7, r3
 800131c:	d200      	bcs.n	8001320 <__aeabi_fsub+0x45c>
 800131e:	e6e5      	b.n	80010ec <__aeabi_fsub+0x228>
 8001320:	4298      	cmp	r0, r3
 8001322:	d300      	bcc.n	8001326 <__aeabi_fsub+0x462>
 8001324:	e6e2      	b.n	80010ec <__aeabi_fsub+0x228>
 8001326:	0007      	movs	r7, r0
 8001328:	e6e0      	b.n	80010ec <__aeabi_fsub+0x228>
 800132a:	2900      	cmp	r1, #0
 800132c:	d100      	bne.n	8001330 <__aeabi_fsub+0x46c>
 800132e:	e69e      	b.n	800106e <__aeabi_fsub+0x1aa>
 8001330:	2300      	movs	r3, #0
 8001332:	08cf      	lsrs	r7, r1, #3
 8001334:	e641      	b.n	8000fba <__aeabi_fsub+0xf6>
 8001336:	0034      	movs	r4, r6
 8001338:	2301      	movs	r3, #1
 800133a:	08ff      	lsrs	r7, r7, #3
 800133c:	e63d      	b.n	8000fba <__aeabi_fsub+0xf6>
 800133e:	2f00      	cmp	r7, #0
 8001340:	d100      	bne.n	8001344 <__aeabi_fsub+0x480>
 8001342:	e693      	b.n	800106c <__aeabi_fsub+0x1a8>
 8001344:	2300      	movs	r3, #0
 8001346:	08ff      	lsrs	r7, r7, #3
 8001348:	e637      	b.n	8000fba <__aeabi_fsub+0xf6>
 800134a:	2300      	movs	r3, #0
 800134c:	08d7      	lsrs	r7, r2, #3
 800134e:	e634      	b.n	8000fba <__aeabi_fsub+0xf6>
 8001350:	2301      	movs	r3, #1
 8001352:	08cf      	lsrs	r7, r1, #3
 8001354:	e631      	b.n	8000fba <__aeabi_fsub+0xf6>
 8001356:	2280      	movs	r2, #128	@ 0x80
 8001358:	000b      	movs	r3, r1
 800135a:	04d2      	lsls	r2, r2, #19
 800135c:	2001      	movs	r0, #1
 800135e:	4013      	ands	r3, r2
 8001360:	4211      	tst	r1, r2
 8001362:	d000      	beq.n	8001366 <__aeabi_fsub+0x4a2>
 8001364:	e6ae      	b.n	80010c4 <__aeabi_fsub+0x200>
 8001366:	08cf      	lsrs	r7, r1, #3
 8001368:	e627      	b.n	8000fba <__aeabi_fsub+0xf6>
 800136a:	2b00      	cmp	r3, #0
 800136c:	d100      	bne.n	8001370 <__aeabi_fsub+0x4ac>
 800136e:	e75f      	b.n	8001230 <__aeabi_fsub+0x36c>
 8001370:	1b56      	subs	r6, r2, r5
 8001372:	2d00      	cmp	r5, #0
 8001374:	d101      	bne.n	800137a <__aeabi_fsub+0x4b6>
 8001376:	0033      	movs	r3, r6
 8001378:	e6e7      	b.n	800114a <__aeabi_fsub+0x286>
 800137a:	2380      	movs	r3, #128	@ 0x80
 800137c:	4660      	mov	r0, ip
 800137e:	04db      	lsls	r3, r3, #19
 8001380:	4318      	orrs	r0, r3
 8001382:	4684      	mov	ip, r0
 8001384:	e6eb      	b.n	800115e <__aeabi_fsub+0x29a>
 8001386:	46c0      	nop			@ (mov r8, r8)
 8001388:	7dffffff 	.word	0x7dffffff

0800138c <__aeabi_fcmpun>:
 800138c:	0243      	lsls	r3, r0, #9
 800138e:	024a      	lsls	r2, r1, #9
 8001390:	0040      	lsls	r0, r0, #1
 8001392:	0049      	lsls	r1, r1, #1
 8001394:	0a5b      	lsrs	r3, r3, #9
 8001396:	0a52      	lsrs	r2, r2, #9
 8001398:	0e09      	lsrs	r1, r1, #24
 800139a:	0e00      	lsrs	r0, r0, #24
 800139c:	28ff      	cmp	r0, #255	@ 0xff
 800139e:	d006      	beq.n	80013ae <__aeabi_fcmpun+0x22>
 80013a0:	2000      	movs	r0, #0
 80013a2:	29ff      	cmp	r1, #255	@ 0xff
 80013a4:	d102      	bne.n	80013ac <__aeabi_fcmpun+0x20>
 80013a6:	1e53      	subs	r3, r2, #1
 80013a8:	419a      	sbcs	r2, r3
 80013aa:	0010      	movs	r0, r2
 80013ac:	4770      	bx	lr
 80013ae:	38fe      	subs	r0, #254	@ 0xfe
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d1fb      	bne.n	80013ac <__aeabi_fcmpun+0x20>
 80013b4:	e7f4      	b.n	80013a0 <__aeabi_fcmpun+0x14>
 80013b6:	46c0      	nop			@ (mov r8, r8)

080013b8 <__aeabi_f2iz>:
 80013b8:	0241      	lsls	r1, r0, #9
 80013ba:	0042      	lsls	r2, r0, #1
 80013bc:	0fc3      	lsrs	r3, r0, #31
 80013be:	0a49      	lsrs	r1, r1, #9
 80013c0:	2000      	movs	r0, #0
 80013c2:	0e12      	lsrs	r2, r2, #24
 80013c4:	2a7e      	cmp	r2, #126	@ 0x7e
 80013c6:	dd03      	ble.n	80013d0 <__aeabi_f2iz+0x18>
 80013c8:	2a9d      	cmp	r2, #157	@ 0x9d
 80013ca:	dd02      	ble.n	80013d2 <__aeabi_f2iz+0x1a>
 80013cc:	4a09      	ldr	r2, [pc, #36]	@ (80013f4 <__aeabi_f2iz+0x3c>)
 80013ce:	1898      	adds	r0, r3, r2
 80013d0:	4770      	bx	lr
 80013d2:	2080      	movs	r0, #128	@ 0x80
 80013d4:	0400      	lsls	r0, r0, #16
 80013d6:	4301      	orrs	r1, r0
 80013d8:	2a95      	cmp	r2, #149	@ 0x95
 80013da:	dc07      	bgt.n	80013ec <__aeabi_f2iz+0x34>
 80013dc:	2096      	movs	r0, #150	@ 0x96
 80013de:	1a82      	subs	r2, r0, r2
 80013e0:	40d1      	lsrs	r1, r2
 80013e2:	4248      	negs	r0, r1
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d1f3      	bne.n	80013d0 <__aeabi_f2iz+0x18>
 80013e8:	0008      	movs	r0, r1
 80013ea:	e7f1      	b.n	80013d0 <__aeabi_f2iz+0x18>
 80013ec:	3a96      	subs	r2, #150	@ 0x96
 80013ee:	4091      	lsls	r1, r2
 80013f0:	e7f7      	b.n	80013e2 <__aeabi_f2iz+0x2a>
 80013f2:	46c0      	nop			@ (mov r8, r8)
 80013f4:	7fffffff 	.word	0x7fffffff

080013f8 <__aeabi_i2f>:
 80013f8:	b570      	push	{r4, r5, r6, lr}
 80013fa:	2800      	cmp	r0, #0
 80013fc:	d012      	beq.n	8001424 <__aeabi_i2f+0x2c>
 80013fe:	17c3      	asrs	r3, r0, #31
 8001400:	18c5      	adds	r5, r0, r3
 8001402:	405d      	eors	r5, r3
 8001404:	0fc4      	lsrs	r4, r0, #31
 8001406:	0028      	movs	r0, r5
 8001408:	f000 f88c 	bl	8001524 <__clzsi2>
 800140c:	239e      	movs	r3, #158	@ 0x9e
 800140e:	1a1b      	subs	r3, r3, r0
 8001410:	2b96      	cmp	r3, #150	@ 0x96
 8001412:	dc0f      	bgt.n	8001434 <__aeabi_i2f+0x3c>
 8001414:	2808      	cmp	r0, #8
 8001416:	d038      	beq.n	800148a <__aeabi_i2f+0x92>
 8001418:	3808      	subs	r0, #8
 800141a:	4085      	lsls	r5, r0
 800141c:	026d      	lsls	r5, r5, #9
 800141e:	0a6d      	lsrs	r5, r5, #9
 8001420:	b2d8      	uxtb	r0, r3
 8001422:	e002      	b.n	800142a <__aeabi_i2f+0x32>
 8001424:	2400      	movs	r4, #0
 8001426:	2000      	movs	r0, #0
 8001428:	2500      	movs	r5, #0
 800142a:	05c0      	lsls	r0, r0, #23
 800142c:	4328      	orrs	r0, r5
 800142e:	07e4      	lsls	r4, r4, #31
 8001430:	4320      	orrs	r0, r4
 8001432:	bd70      	pop	{r4, r5, r6, pc}
 8001434:	2b99      	cmp	r3, #153	@ 0x99
 8001436:	dc14      	bgt.n	8001462 <__aeabi_i2f+0x6a>
 8001438:	1f42      	subs	r2, r0, #5
 800143a:	4095      	lsls	r5, r2
 800143c:	002a      	movs	r2, r5
 800143e:	4915      	ldr	r1, [pc, #84]	@ (8001494 <__aeabi_i2f+0x9c>)
 8001440:	4011      	ands	r1, r2
 8001442:	0755      	lsls	r5, r2, #29
 8001444:	d01c      	beq.n	8001480 <__aeabi_i2f+0x88>
 8001446:	250f      	movs	r5, #15
 8001448:	402a      	ands	r2, r5
 800144a:	2a04      	cmp	r2, #4
 800144c:	d018      	beq.n	8001480 <__aeabi_i2f+0x88>
 800144e:	3104      	adds	r1, #4
 8001450:	08ca      	lsrs	r2, r1, #3
 8001452:	0149      	lsls	r1, r1, #5
 8001454:	d515      	bpl.n	8001482 <__aeabi_i2f+0x8a>
 8001456:	239f      	movs	r3, #159	@ 0x9f
 8001458:	0252      	lsls	r2, r2, #9
 800145a:	1a18      	subs	r0, r3, r0
 800145c:	0a55      	lsrs	r5, r2, #9
 800145e:	b2c0      	uxtb	r0, r0
 8001460:	e7e3      	b.n	800142a <__aeabi_i2f+0x32>
 8001462:	2205      	movs	r2, #5
 8001464:	0029      	movs	r1, r5
 8001466:	1a12      	subs	r2, r2, r0
 8001468:	40d1      	lsrs	r1, r2
 800146a:	0002      	movs	r2, r0
 800146c:	321b      	adds	r2, #27
 800146e:	4095      	lsls	r5, r2
 8001470:	002a      	movs	r2, r5
 8001472:	1e55      	subs	r5, r2, #1
 8001474:	41aa      	sbcs	r2, r5
 8001476:	430a      	orrs	r2, r1
 8001478:	4906      	ldr	r1, [pc, #24]	@ (8001494 <__aeabi_i2f+0x9c>)
 800147a:	4011      	ands	r1, r2
 800147c:	0755      	lsls	r5, r2, #29
 800147e:	d1e2      	bne.n	8001446 <__aeabi_i2f+0x4e>
 8001480:	08ca      	lsrs	r2, r1, #3
 8001482:	0252      	lsls	r2, r2, #9
 8001484:	0a55      	lsrs	r5, r2, #9
 8001486:	b2d8      	uxtb	r0, r3
 8001488:	e7cf      	b.n	800142a <__aeabi_i2f+0x32>
 800148a:	026d      	lsls	r5, r5, #9
 800148c:	0a6d      	lsrs	r5, r5, #9
 800148e:	308e      	adds	r0, #142	@ 0x8e
 8001490:	e7cb      	b.n	800142a <__aeabi_i2f+0x32>
 8001492:	46c0      	nop			@ (mov r8, r8)
 8001494:	fbffffff 	.word	0xfbffffff

08001498 <__aeabi_ui2f>:
 8001498:	b510      	push	{r4, lr}
 800149a:	1e04      	subs	r4, r0, #0
 800149c:	d00d      	beq.n	80014ba <__aeabi_ui2f+0x22>
 800149e:	f000 f841 	bl	8001524 <__clzsi2>
 80014a2:	239e      	movs	r3, #158	@ 0x9e
 80014a4:	1a1b      	subs	r3, r3, r0
 80014a6:	2b96      	cmp	r3, #150	@ 0x96
 80014a8:	dc0c      	bgt.n	80014c4 <__aeabi_ui2f+0x2c>
 80014aa:	2808      	cmp	r0, #8
 80014ac:	d034      	beq.n	8001518 <__aeabi_ui2f+0x80>
 80014ae:	3808      	subs	r0, #8
 80014b0:	4084      	lsls	r4, r0
 80014b2:	0264      	lsls	r4, r4, #9
 80014b4:	0a64      	lsrs	r4, r4, #9
 80014b6:	b2d8      	uxtb	r0, r3
 80014b8:	e001      	b.n	80014be <__aeabi_ui2f+0x26>
 80014ba:	2000      	movs	r0, #0
 80014bc:	2400      	movs	r4, #0
 80014be:	05c0      	lsls	r0, r0, #23
 80014c0:	4320      	orrs	r0, r4
 80014c2:	bd10      	pop	{r4, pc}
 80014c4:	2b99      	cmp	r3, #153	@ 0x99
 80014c6:	dc13      	bgt.n	80014f0 <__aeabi_ui2f+0x58>
 80014c8:	1f42      	subs	r2, r0, #5
 80014ca:	4094      	lsls	r4, r2
 80014cc:	4a14      	ldr	r2, [pc, #80]	@ (8001520 <__aeabi_ui2f+0x88>)
 80014ce:	4022      	ands	r2, r4
 80014d0:	0761      	lsls	r1, r4, #29
 80014d2:	d01c      	beq.n	800150e <__aeabi_ui2f+0x76>
 80014d4:	210f      	movs	r1, #15
 80014d6:	4021      	ands	r1, r4
 80014d8:	2904      	cmp	r1, #4
 80014da:	d018      	beq.n	800150e <__aeabi_ui2f+0x76>
 80014dc:	3204      	adds	r2, #4
 80014de:	08d4      	lsrs	r4, r2, #3
 80014e0:	0152      	lsls	r2, r2, #5
 80014e2:	d515      	bpl.n	8001510 <__aeabi_ui2f+0x78>
 80014e4:	239f      	movs	r3, #159	@ 0x9f
 80014e6:	0264      	lsls	r4, r4, #9
 80014e8:	1a18      	subs	r0, r3, r0
 80014ea:	0a64      	lsrs	r4, r4, #9
 80014ec:	b2c0      	uxtb	r0, r0
 80014ee:	e7e6      	b.n	80014be <__aeabi_ui2f+0x26>
 80014f0:	0002      	movs	r2, r0
 80014f2:	0021      	movs	r1, r4
 80014f4:	321b      	adds	r2, #27
 80014f6:	4091      	lsls	r1, r2
 80014f8:	000a      	movs	r2, r1
 80014fa:	1e51      	subs	r1, r2, #1
 80014fc:	418a      	sbcs	r2, r1
 80014fe:	2105      	movs	r1, #5
 8001500:	1a09      	subs	r1, r1, r0
 8001502:	40cc      	lsrs	r4, r1
 8001504:	4314      	orrs	r4, r2
 8001506:	4a06      	ldr	r2, [pc, #24]	@ (8001520 <__aeabi_ui2f+0x88>)
 8001508:	4022      	ands	r2, r4
 800150a:	0761      	lsls	r1, r4, #29
 800150c:	d1e2      	bne.n	80014d4 <__aeabi_ui2f+0x3c>
 800150e:	08d4      	lsrs	r4, r2, #3
 8001510:	0264      	lsls	r4, r4, #9
 8001512:	0a64      	lsrs	r4, r4, #9
 8001514:	b2d8      	uxtb	r0, r3
 8001516:	e7d2      	b.n	80014be <__aeabi_ui2f+0x26>
 8001518:	0264      	lsls	r4, r4, #9
 800151a:	0a64      	lsrs	r4, r4, #9
 800151c:	308e      	adds	r0, #142	@ 0x8e
 800151e:	e7ce      	b.n	80014be <__aeabi_ui2f+0x26>
 8001520:	fbffffff 	.word	0xfbffffff

08001524 <__clzsi2>:
 8001524:	211c      	movs	r1, #28
 8001526:	2301      	movs	r3, #1
 8001528:	041b      	lsls	r3, r3, #16
 800152a:	4298      	cmp	r0, r3
 800152c:	d301      	bcc.n	8001532 <__clzsi2+0xe>
 800152e:	0c00      	lsrs	r0, r0, #16
 8001530:	3910      	subs	r1, #16
 8001532:	0a1b      	lsrs	r3, r3, #8
 8001534:	4298      	cmp	r0, r3
 8001536:	d301      	bcc.n	800153c <__clzsi2+0x18>
 8001538:	0a00      	lsrs	r0, r0, #8
 800153a:	3908      	subs	r1, #8
 800153c:	091b      	lsrs	r3, r3, #4
 800153e:	4298      	cmp	r0, r3
 8001540:	d301      	bcc.n	8001546 <__clzsi2+0x22>
 8001542:	0900      	lsrs	r0, r0, #4
 8001544:	3904      	subs	r1, #4
 8001546:	a202      	add	r2, pc, #8	@ (adr r2, 8001550 <__clzsi2+0x2c>)
 8001548:	5c10      	ldrb	r0, [r2, r0]
 800154a:	1840      	adds	r0, r0, r1
 800154c:	4770      	bx	lr
 800154e:	46c0      	nop			@ (mov r8, r8)
 8001550:	02020304 	.word	0x02020304
 8001554:	01010101 	.word	0x01010101
	...

08001560 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001560:	b590      	push	{r4, r7, lr}
 8001562:	b089      	sub	sp, #36	@ 0x24
 8001564:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001566:	f000 fc4d 	bl	8001e04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800156a:	f000 f947 	bl	80017fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800156e:	f000 fa6d 	bl	8001a4c <MX_GPIO_Init>
  MX_DMA_Init();
 8001572:	f000 fa4d 	bl	8001a10 <MX_DMA_Init>
  MX_ADC1_Init();
 8001576:	f000 f989 	bl	800188c <MX_ADC1_Init>
  MX_TIM3_Init();
 800157a:	f000 f9f3 	bl	8001964 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
    HAL_ADCEx_Calibration_Start(&hadc1);
 800157e:	4b8f      	ldr	r3, [pc, #572]	@ (80017bc <main+0x25c>)
 8001580:	0018      	movs	r0, r3
 8001582:	f001 fe35 	bl	80031f0 <HAL_ADCEx_Calibration_Start>
    vrefint_cal = *VREFINT_CAL_ADDR;     // fabrika kalibrasyonunu al
 8001586:	4b8e      	ldr	r3, [pc, #568]	@ (80017c0 <main+0x260>)
 8001588:	881a      	ldrh	r2, [r3, #0]
 800158a:	4b8e      	ldr	r3, [pc, #568]	@ (80017c4 <main+0x264>)
 800158c:	801a      	strh	r2, [r3, #0]

    HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buf, ADC_BUF_LEN);
 800158e:	498e      	ldr	r1, [pc, #568]	@ (80017c8 <main+0x268>)
 8001590:	4b8a      	ldr	r3, [pc, #552]	@ (80017bc <main+0x25c>)
 8001592:	22c8      	movs	r2, #200	@ 0xc8
 8001594:	0018      	movs	r0, r3
 8001596:	f001 f8eb 	bl	8002770 <HAL_ADC_Start_DMA>
    HAL_TIM_Base_Start(&htim3);          // Timer3 başlat
 800159a:	4b8c      	ldr	r3, [pc, #560]	@ (80017cc <main+0x26c>)
 800159c:	0018      	movs	r0, r3
 800159e:	f003 f969 	bl	8004874 <HAL_TIM_Base_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    while (1)
    {
      if (adc_ready) {
 80015a2:	4b8b      	ldr	r3, [pc, #556]	@ (80017d0 <main+0x270>)
 80015a4:	781b      	ldrb	r3, [r3, #0]
 80015a6:	b2db      	uxtb	r3, r3
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d0fa      	beq.n	80015a2 <main+0x42>
        adc_ready = 0;
 80015ac:	4b88      	ldr	r3, [pc, #544]	@ (80017d0 <main+0x270>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	701a      	strb	r2, [r3, #0]

        // 1) RMS
        uint32_t sum_sq = 0;
 80015b2:	2300      	movs	r3, #0
 80015b4:	61fb      	str	r3, [r7, #28]
        int32_t  dc_offset = 0;
 80015b6:	2300      	movs	r3, #0
 80015b8:	61bb      	str	r3, [r7, #24]
        for (int i = 0; i < ADC_BUF_LEN; i++) dc_offset += adc_buf[i];
 80015ba:	2300      	movs	r3, #0
 80015bc:	617b      	str	r3, [r7, #20]
 80015be:	e00b      	b.n	80015d8 <main+0x78>
 80015c0:	4b81      	ldr	r3, [pc, #516]	@ (80017c8 <main+0x268>)
 80015c2:	697a      	ldr	r2, [r7, #20]
 80015c4:	0052      	lsls	r2, r2, #1
 80015c6:	5ad3      	ldrh	r3, [r2, r3]
 80015c8:	b29b      	uxth	r3, r3
 80015ca:	001a      	movs	r2, r3
 80015cc:	69bb      	ldr	r3, [r7, #24]
 80015ce:	189b      	adds	r3, r3, r2
 80015d0:	61bb      	str	r3, [r7, #24]
 80015d2:	697b      	ldr	r3, [r7, #20]
 80015d4:	3301      	adds	r3, #1
 80015d6:	617b      	str	r3, [r7, #20]
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	2bc7      	cmp	r3, #199	@ 0xc7
 80015dc:	ddf0      	ble.n	80015c0 <main+0x60>
        dc_offset /= ADC_BUF_LEN;
 80015de:	69bb      	ldr	r3, [r7, #24]
 80015e0:	21c8      	movs	r1, #200	@ 0xc8
 80015e2:	0018      	movs	r0, r3
 80015e4:	f7fe fe16 	bl	8000214 <__divsi3>
 80015e8:	0003      	movs	r3, r0
 80015ea:	61bb      	str	r3, [r7, #24]
        for (int i = 0; i < ADC_BUF_LEN; i++) {
 80015ec:	2300      	movs	r3, #0
 80015ee:	613b      	str	r3, [r7, #16]
 80015f0:	e011      	b.n	8001616 <main+0xb6>
          int32_t s = adc_buf[i] - dc_offset;
 80015f2:	4b75      	ldr	r3, [pc, #468]	@ (80017c8 <main+0x268>)
 80015f4:	693a      	ldr	r2, [r7, #16]
 80015f6:	0052      	lsls	r2, r2, #1
 80015f8:	5ad3      	ldrh	r3, [r2, r3]
 80015fa:	b29b      	uxth	r3, r3
 80015fc:	001a      	movs	r2, r3
 80015fe:	69bb      	ldr	r3, [r7, #24]
 8001600:	1ad3      	subs	r3, r2, r3
 8001602:	603b      	str	r3, [r7, #0]
          sum_sq += s * s;
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	435b      	muls	r3, r3
 8001608:	001a      	movs	r2, r3
 800160a:	69fb      	ldr	r3, [r7, #28]
 800160c:	189b      	adds	r3, r3, r2
 800160e:	61fb      	str	r3, [r7, #28]
        for (int i = 0; i < ADC_BUF_LEN; i++) {
 8001610:	693b      	ldr	r3, [r7, #16]
 8001612:	3301      	adds	r3, #1
 8001614:	613b      	str	r3, [r7, #16]
 8001616:	693b      	ldr	r3, [r7, #16]
 8001618:	2bc7      	cmp	r3, #199	@ 0xc7
 800161a:	ddea      	ble.n	80015f2 <main+0x92>
        }
        rms_value = (uint16_t)(sqrtf((float)sum_sq / ADC_BUF_LEN));
 800161c:	69f8      	ldr	r0, [r7, #28]
 800161e:	f7ff ff3b 	bl	8001498 <__aeabi_ui2f>
 8001622:	1c03      	adds	r3, r0, #0
 8001624:	496b      	ldr	r1, [pc, #428]	@ (80017d4 <main+0x274>)
 8001626:	1c18      	adds	r0, r3, #0
 8001628:	f7ff f924 	bl	8000874 <__aeabi_fdiv>
 800162c:	1c03      	adds	r3, r0, #0
 800162e:	1c18      	adds	r0, r3, #0
 8001630:	f003 fbe6 	bl	8004e00 <sqrtf>
 8001634:	1c03      	adds	r3, r0, #0
 8001636:	1c18      	adds	r0, r3, #0
 8001638:	f7fe ff12 	bl	8000460 <__aeabi_f2uiz>
 800163c:	0003      	movs	r3, r0
 800163e:	b29a      	uxth	r2, r3
 8001640:	4b65      	ldr	r3, [pc, #404]	@ (80017d8 <main+0x278>)
 8001642:	801a      	strh	r2, [r3, #0]

        // 2) VREFINT → Vdda hesabı (her tamponda 1 kez)
        uint16_t vref_adc = ReadVrefintOnce();
 8001644:	1dbc      	adds	r4, r7, #6
 8001646:	f000 fa61 	bl	8001b0c <ReadVrefintOnce>
 800164a:	0003      	movs	r3, r0
 800164c:	8023      	strh	r3, [r4, #0]

        // Fabrika kalibrasyon tekniği: Vdda ≈ 3.0V * (VREFINT_CAL / vref_adc)
        // (Nominal Vdda’yı 3.0 aldıysak)
        float Vdda = 3.0f * ((float)vrefint_cal / (float)vref_adc);
 800164e:	4b5d      	ldr	r3, [pc, #372]	@ (80017c4 <main+0x264>)
 8001650:	881b      	ldrh	r3, [r3, #0]
 8001652:	0018      	movs	r0, r3
 8001654:	f7ff ff20 	bl	8001498 <__aeabi_ui2f>
 8001658:	1c04      	adds	r4, r0, #0
 800165a:	1dbb      	adds	r3, r7, #6
 800165c:	881b      	ldrh	r3, [r3, #0]
 800165e:	0018      	movs	r0, r3
 8001660:	f7ff ff1a 	bl	8001498 <__aeabi_ui2f>
 8001664:	1c03      	adds	r3, r0, #0
 8001666:	1c19      	adds	r1, r3, #0
 8001668:	1c20      	adds	r0, r4, #0
 800166a:	f7ff f903 	bl	8000874 <__aeabi_fdiv>
 800166e:	1c03      	adds	r3, r0, #0
 8001670:	495a      	ldr	r1, [pc, #360]	@ (80017dc <main+0x27c>)
 8001672:	1c18      	adds	r0, r3, #0
 8001674:	f7ff facc 	bl	8000c10 <__aeabi_fmul>
 8001678:	1c03      	adds	r3, r0, #0
 800167a:	60fb      	str	r3, [r7, #12]
        // Eğer fabrika kalibrasyon adresi yoksa tipik yönteme düş:
        if (vrefint_cal == 0xFFFF || vrefint_cal == 0x0000) {
 800167c:	4b51      	ldr	r3, [pc, #324]	@ (80017c4 <main+0x264>)
 800167e:	881b      	ldrh	r3, [r3, #0]
 8001680:	4a57      	ldr	r2, [pc, #348]	@ (80017e0 <main+0x280>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d003      	beq.n	800168e <main+0x12e>
 8001686:	4b4f      	ldr	r3, [pc, #316]	@ (80017c4 <main+0x264>)
 8001688:	881b      	ldrh	r3, [r3, #0]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d10b      	bne.n	80016a6 <main+0x146>
          Vdda = (VREFINT_TYP * 4095.0f) / (float)vref_adc;
 800168e:	1dbb      	adds	r3, r7, #6
 8001690:	881b      	ldrh	r3, [r3, #0]
 8001692:	0018      	movs	r0, r3
 8001694:	f7ff ff00 	bl	8001498 <__aeabi_ui2f>
 8001698:	1c03      	adds	r3, r0, #0
 800169a:	1c19      	adds	r1, r3, #0
 800169c:	4851      	ldr	r0, [pc, #324]	@ (80017e4 <main+0x284>)
 800169e:	f7ff f8e9 	bl	8000874 <__aeabi_fdiv>
 80016a2:	1c03      	adds	r3, r0, #0
 80016a4:	60fb      	str	r3, [r7, #12]
        }

        // 3) Voltaja çevir + Vdda kompanzasyonu
        float vrms_real = 0.0f;
 80016a6:	2300      	movs	r3, #0
 80016a8:	60bb      	str	r3, [r7, #8]
        if (rms_value > 50) {
 80016aa:	4b4b      	ldr	r3, [pc, #300]	@ (80017d8 <main+0x278>)
 80016ac:	881b      	ldrh	r3, [r3, #0]
 80016ae:	b29b      	uxth	r3, r3
 80016b0:	2b32      	cmp	r3, #50	@ 0x32
 80016b2:	d917      	bls.n	80016e4 <main+0x184>
          vrms_real = rms_value * CAL_FACTOR * (Vdda / 3.0f);
 80016b4:	4b48      	ldr	r3, [pc, #288]	@ (80017d8 <main+0x278>)
 80016b6:	881b      	ldrh	r3, [r3, #0]
 80016b8:	b29b      	uxth	r3, r3
 80016ba:	0018      	movs	r0, r3
 80016bc:	f7ff fe9c 	bl	80013f8 <__aeabi_i2f>
 80016c0:	1c03      	adds	r3, r0, #0
 80016c2:	4949      	ldr	r1, [pc, #292]	@ (80017e8 <main+0x288>)
 80016c4:	1c18      	adds	r0, r3, #0
 80016c6:	f7ff faa3 	bl	8000c10 <__aeabi_fmul>
 80016ca:	1c03      	adds	r3, r0, #0
 80016cc:	1c1c      	adds	r4, r3, #0
 80016ce:	4943      	ldr	r1, [pc, #268]	@ (80017dc <main+0x27c>)
 80016d0:	68f8      	ldr	r0, [r7, #12]
 80016d2:	f7ff f8cf 	bl	8000874 <__aeabi_fdiv>
 80016d6:	1c03      	adds	r3, r0, #0
 80016d8:	1c19      	adds	r1, r3, #0
 80016da:	1c20      	adds	r0, r4, #0
 80016dc:	f7ff fa98 	bl	8000c10 <__aeabi_fmul>
 80016e0:	1c03      	adds	r3, r0, #0
 80016e2:	60bb      	str	r3, [r7, #8]
        }

        // 4) IIR filtre
        vrms_filtered += IIR_ALPHA * (vrms_real - vrms_filtered);
 80016e4:	4b41      	ldr	r3, [pc, #260]	@ (80017ec <main+0x28c>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	1c19      	adds	r1, r3, #0
 80016ea:	68b8      	ldr	r0, [r7, #8]
 80016ec:	f7ff fbea 	bl	8000ec4 <__aeabi_fsub>
 80016f0:	1c03      	adds	r3, r0, #0
 80016f2:	493f      	ldr	r1, [pc, #252]	@ (80017f0 <main+0x290>)
 80016f4:	1c18      	adds	r0, r3, #0
 80016f6:	f7ff fa8b 	bl	8000c10 <__aeabi_fmul>
 80016fa:	1c03      	adds	r3, r0, #0
 80016fc:	1c1a      	adds	r2, r3, #0
 80016fe:	4b3b      	ldr	r3, [pc, #236]	@ (80017ec <main+0x28c>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	1c19      	adds	r1, r3, #0
 8001704:	1c10      	adds	r0, r2, #0
 8001706:	f7fe fec3 	bl	8000490 <__aeabi_fadd>
 800170a:	1c03      	adds	r3, r0, #0
 800170c:	1c1a      	adds	r2, r3, #0
 800170e:	4b37      	ldr	r3, [pc, #220]	@ (80017ec <main+0x28c>)
 8001710:	601a      	str	r2, [r3, #0]

        // 5) LED mantığı
        if (vrms_filtered < 100.0f) {
 8001712:	4b36      	ldr	r3, [pc, #216]	@ (80017ec <main+0x28c>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4937      	ldr	r1, [pc, #220]	@ (80017f4 <main+0x294>)
 8001718:	1c18      	adds	r0, r3, #0
 800171a:	f7fe fe79 	bl	8000410 <__aeabi_fcmplt>
 800171e:	1e03      	subs	r3, r0, #0
 8001720:	d016      	beq.n	8001750 <main+0x1f0>
          HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001722:	2380      	movs	r3, #128	@ 0x80
 8001724:	0119      	lsls	r1, r3, #4
 8001726:	23a0      	movs	r3, #160	@ 0xa0
 8001728:	05db      	lsls	r3, r3, #23
 800172a:	2201      	movs	r2, #1
 800172c:	0018      	movs	r0, r3
 800172e:	f002 fb51 	bl	8003dd4 <HAL_GPIO_WritePin>
          HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001732:	2380      	movs	r3, #128	@ 0x80
 8001734:	0159      	lsls	r1, r3, #5
 8001736:	23a0      	movs	r3, #160	@ 0xa0
 8001738:	05db      	lsls	r3, r3, #23
 800173a:	2200      	movs	r2, #0
 800173c:	0018      	movs	r0, r3
 800173e:	f002 fb49 	bl	8003dd4 <HAL_GPIO_WritePin>
          HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3,  GPIO_PIN_RESET);
 8001742:	4b2d      	ldr	r3, [pc, #180]	@ (80017f8 <main+0x298>)
 8001744:	2200      	movs	r2, #0
 8001746:	2108      	movs	r1, #8
 8001748:	0018      	movs	r0, r3
 800174a:	f002 fb43 	bl	8003dd4 <HAL_GPIO_WritePin>
 800174e:	e728      	b.n	80015a2 <main+0x42>
        } else if (vrms_filtered < 200.0f) {
 8001750:	4b26      	ldr	r3, [pc, #152]	@ (80017ec <main+0x28c>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	491f      	ldr	r1, [pc, #124]	@ (80017d4 <main+0x274>)
 8001756:	1c18      	adds	r0, r3, #0
 8001758:	f7fe fe5a 	bl	8000410 <__aeabi_fcmplt>
 800175c:	1e03      	subs	r3, r0, #0
 800175e:	d016      	beq.n	800178e <main+0x22e>
          HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001760:	2380      	movs	r3, #128	@ 0x80
 8001762:	0119      	lsls	r1, r3, #4
 8001764:	23a0      	movs	r3, #160	@ 0xa0
 8001766:	05db      	lsls	r3, r3, #23
 8001768:	2200      	movs	r2, #0
 800176a:	0018      	movs	r0, r3
 800176c:	f002 fb32 	bl	8003dd4 <HAL_GPIO_WritePin>
          HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8001770:	2380      	movs	r3, #128	@ 0x80
 8001772:	0159      	lsls	r1, r3, #5
 8001774:	23a0      	movs	r3, #160	@ 0xa0
 8001776:	05db      	lsls	r3, r3, #23
 8001778:	2201      	movs	r2, #1
 800177a:	0018      	movs	r0, r3
 800177c:	f002 fb2a 	bl	8003dd4 <HAL_GPIO_WritePin>
          HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3,  GPIO_PIN_RESET);
 8001780:	4b1d      	ldr	r3, [pc, #116]	@ (80017f8 <main+0x298>)
 8001782:	2200      	movs	r2, #0
 8001784:	2108      	movs	r1, #8
 8001786:	0018      	movs	r0, r3
 8001788:	f002 fb24 	bl	8003dd4 <HAL_GPIO_WritePin>
 800178c:	e709      	b.n	80015a2 <main+0x42>
        } else {
          HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 800178e:	2380      	movs	r3, #128	@ 0x80
 8001790:	0119      	lsls	r1, r3, #4
 8001792:	23a0      	movs	r3, #160	@ 0xa0
 8001794:	05db      	lsls	r3, r3, #23
 8001796:	2200      	movs	r2, #0
 8001798:	0018      	movs	r0, r3
 800179a:	f002 fb1b 	bl	8003dd4 <HAL_GPIO_WritePin>
          HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 800179e:	2380      	movs	r3, #128	@ 0x80
 80017a0:	0159      	lsls	r1, r3, #5
 80017a2:	23a0      	movs	r3, #160	@ 0xa0
 80017a4:	05db      	lsls	r3, r3, #23
 80017a6:	2200      	movs	r2, #0
 80017a8:	0018      	movs	r0, r3
 80017aa:	f002 fb13 	bl	8003dd4 <HAL_GPIO_WritePin>
          HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3,  GPIO_PIN_SET);
 80017ae:	4b12      	ldr	r3, [pc, #72]	@ (80017f8 <main+0x298>)
 80017b0:	2201      	movs	r2, #1
 80017b2:	2108      	movs	r1, #8
 80017b4:	0018      	movs	r0, r3
 80017b6:	f002 fb0d 	bl	8003dd4 <HAL_GPIO_WritePin>
      if (adc_ready) {
 80017ba:	e6f2      	b.n	80015a2 <main+0x42>
 80017bc:	20000078 	.word	0x20000078
 80017c0:	1fff75aa 	.word	0x1fff75aa
 80017c4:	2000031c 	.word	0x2000031c
 80017c8:	20000184 	.word	0x20000184
 80017cc:	20000138 	.word	0x20000138
 80017d0:	20000314 	.word	0x20000314
 80017d4:	43480000 	.word	0x43480000
 80017d8:	20000316 	.word	0x20000316
 80017dc:	40400000 	.word	0x40400000
 80017e0:	0000ffff 	.word	0x0000ffff
 80017e4:	459b191f 	.word	0x459b191f
 80017e8:	3e4b00e6 	.word	0x3e4b00e6
 80017ec:	20000318 	.word	0x20000318
 80017f0:	3e4ccccd 	.word	0x3e4ccccd
 80017f4:	42c80000 	.word	0x42c80000
 80017f8:	50000400 	.word	0x50000400

080017fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017fc:	b590      	push	{r4, r7, lr}
 80017fe:	b093      	sub	sp, #76	@ 0x4c
 8001800:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001802:	2414      	movs	r4, #20
 8001804:	193b      	adds	r3, r7, r4
 8001806:	0018      	movs	r0, r3
 8001808:	2334      	movs	r3, #52	@ 0x34
 800180a:	001a      	movs	r2, r3
 800180c:	2100      	movs	r1, #0
 800180e:	f003 fac5 	bl	8004d9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001812:	1d3b      	adds	r3, r7, #4
 8001814:	0018      	movs	r0, r3
 8001816:	2310      	movs	r3, #16
 8001818:	001a      	movs	r2, r3
 800181a:	2100      	movs	r1, #0
 800181c:	f003 fabe 	bl	8004d9c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001820:	2380      	movs	r3, #128	@ 0x80
 8001822:	009b      	lsls	r3, r3, #2
 8001824:	0018      	movs	r0, r3
 8001826:	f002 faf3 	bl	8003e10 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800182a:	193b      	adds	r3, r7, r4
 800182c:	2202      	movs	r2, #2
 800182e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001830:	193b      	adds	r3, r7, r4
 8001832:	2280      	movs	r2, #128	@ 0x80
 8001834:	0052      	lsls	r2, r2, #1
 8001836:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8001838:	193b      	adds	r3, r7, r4
 800183a:	2200      	movs	r2, #0
 800183c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800183e:	193b      	adds	r3, r7, r4
 8001840:	2240      	movs	r2, #64	@ 0x40
 8001842:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001844:	193b      	adds	r3, r7, r4
 8001846:	2200      	movs	r2, #0
 8001848:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800184a:	193b      	adds	r3, r7, r4
 800184c:	0018      	movs	r0, r3
 800184e:	f002 fb1f 	bl	8003e90 <HAL_RCC_OscConfig>
 8001852:	1e03      	subs	r3, r0, #0
 8001854:	d001      	beq.n	800185a <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8001856:	f000 f9c5 	bl	8001be4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800185a:	1d3b      	adds	r3, r7, #4
 800185c:	2207      	movs	r2, #7
 800185e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001860:	1d3b      	adds	r3, r7, #4
 8001862:	2200      	movs	r2, #0
 8001864:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001866:	1d3b      	adds	r3, r7, #4
 8001868:	2200      	movs	r2, #0
 800186a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800186c:	1d3b      	adds	r3, r7, #4
 800186e:	2200      	movs	r2, #0
 8001870:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001872:	1d3b      	adds	r3, r7, #4
 8001874:	2100      	movs	r1, #0
 8001876:	0018      	movs	r0, r3
 8001878:	f002 fe1a 	bl	80044b0 <HAL_RCC_ClockConfig>
 800187c:	1e03      	subs	r3, r0, #0
 800187e:	d001      	beq.n	8001884 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8001880:	f000 f9b0 	bl	8001be4 <Error_Handler>
  }
}
 8001884:	46c0      	nop			@ (mov r8, r8)
 8001886:	46bd      	mov	sp, r7
 8001888:	b013      	add	sp, #76	@ 0x4c
 800188a:	bd90      	pop	{r4, r7, pc}

0800188c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b084      	sub	sp, #16
 8001890:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */
  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001892:	1d3b      	adds	r3, r7, #4
 8001894:	0018      	movs	r0, r3
 8001896:	230c      	movs	r3, #12
 8001898:	001a      	movs	r2, r3
 800189a:	2100      	movs	r1, #0
 800189c:	f003 fa7e 	bl	8004d9c <memset>
  /* USER CODE BEGIN ADC1_Init 1 */
  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80018a0:	4b2e      	ldr	r3, [pc, #184]	@ (800195c <MX_ADC1_Init+0xd0>)
 80018a2:	4a2f      	ldr	r2, [pc, #188]	@ (8001960 <MX_ADC1_Init+0xd4>)
 80018a4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80018a6:	4b2d      	ldr	r3, [pc, #180]	@ (800195c <MX_ADC1_Init+0xd0>)
 80018a8:	2280      	movs	r2, #128	@ 0x80
 80018aa:	05d2      	lsls	r2, r2, #23
 80018ac:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80018ae:	4b2b      	ldr	r3, [pc, #172]	@ (800195c <MX_ADC1_Init+0xd0>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80018b4:	4b29      	ldr	r3, [pc, #164]	@ (800195c <MX_ADC1_Init+0xd0>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80018ba:	4b28      	ldr	r3, [pc, #160]	@ (800195c <MX_ADC1_Init+0xd0>)
 80018bc:	2200      	movs	r2, #0
 80018be:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80018c0:	4b26      	ldr	r3, [pc, #152]	@ (800195c <MX_ADC1_Init+0xd0>)
 80018c2:	2204      	movs	r2, #4
 80018c4:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80018c6:	4b25      	ldr	r3, [pc, #148]	@ (800195c <MX_ADC1_Init+0xd0>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 80018cc:	4b23      	ldr	r3, [pc, #140]	@ (800195c <MX_ADC1_Init+0xd0>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80018d2:	4b22      	ldr	r3, [pc, #136]	@ (800195c <MX_ADC1_Init+0xd0>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 80018d8:	4b20      	ldr	r3, [pc, #128]	@ (800195c <MX_ADC1_Init+0xd0>)
 80018da:	2201      	movs	r2, #1
 80018dc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80018de:	4b1f      	ldr	r3, [pc, #124]	@ (800195c <MX_ADC1_Init+0xd0>)
 80018e0:	2220      	movs	r2, #32
 80018e2:	2100      	movs	r1, #0
 80018e4:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T3_TRGO;
 80018e6:	4b1d      	ldr	r3, [pc, #116]	@ (800195c <MX_ADC1_Init+0xd0>)
 80018e8:	2298      	movs	r2, #152	@ 0x98
 80018ea:	00d2      	lsls	r2, r2, #3
 80018ec:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80018ee:	4b1b      	ldr	r3, [pc, #108]	@ (800195c <MX_ADC1_Init+0xd0>)
 80018f0:	2280      	movs	r2, #128	@ 0x80
 80018f2:	00d2      	lsls	r2, r2, #3
 80018f4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80018f6:	4b19      	ldr	r3, [pc, #100]	@ (800195c <MX_ADC1_Init+0xd0>)
 80018f8:	222c      	movs	r2, #44	@ 0x2c
 80018fa:	2101      	movs	r1, #1
 80018fc:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80018fe:	4b17      	ldr	r3, [pc, #92]	@ (800195c <MX_ADC1_Init+0xd0>)
 8001900:	2200      	movs	r2, #0
 8001902:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_79CYCLES_5;
 8001904:	4b15      	ldr	r3, [pc, #84]	@ (800195c <MX_ADC1_Init+0xd0>)
 8001906:	2206      	movs	r2, #6
 8001908:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 800190a:	4b14      	ldr	r3, [pc, #80]	@ (800195c <MX_ADC1_Init+0xd0>)
 800190c:	2207      	movs	r2, #7
 800190e:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8001910:	4b12      	ldr	r3, [pc, #72]	@ (800195c <MX_ADC1_Init+0xd0>)
 8001912:	223c      	movs	r2, #60	@ 0x3c
 8001914:	2100      	movs	r1, #0
 8001916:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8001918:	4b10      	ldr	r3, [pc, #64]	@ (800195c <MX_ADC1_Init+0xd0>)
 800191a:	2200      	movs	r2, #0
 800191c:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800191e:	4b0f      	ldr	r3, [pc, #60]	@ (800195c <MX_ADC1_Init+0xd0>)
 8001920:	0018      	movs	r0, r3
 8001922:	f000 fc5f 	bl	80021e4 <HAL_ADC_Init>
 8001926:	1e03      	subs	r3, r0, #0
 8001928:	d001      	beq.n	800192e <MX_ADC1_Init+0xa2>
  {
    Error_Handler();
 800192a:	f000 f95b 	bl	8001be4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800192e:	1d3b      	adds	r3, r7, #4
 8001930:	2201      	movs	r2, #1
 8001932:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001934:	1d3b      	adds	r3, r7, #4
 8001936:	2200      	movs	r2, #0
 8001938:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 800193a:	1d3b      	adds	r3, r7, #4
 800193c:	2200      	movs	r2, #0
 800193e:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001940:	1d3a      	adds	r2, r7, #4
 8001942:	4b06      	ldr	r3, [pc, #24]	@ (800195c <MX_ADC1_Init+0xd0>)
 8001944:	0011      	movs	r1, r2
 8001946:	0018      	movs	r0, r3
 8001948:	f001 f82e 	bl	80029a8 <HAL_ADC_ConfigChannel>
 800194c:	1e03      	subs	r3, r0, #0
 800194e:	d001      	beq.n	8001954 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8001950:	f000 f948 	bl	8001be4 <Error_Handler>
  /* USER CODE BEGIN ADC1_Init 2 */
  /* (Opsiyonel) Başlatmadan önce kalibrasyon yapacaksan, main’de:
     HAL_ADCEx_Calibration_Start(&hadc1); çağır. */
  /* USER CODE END ADC1_Init 2 */

}
 8001954:	46c0      	nop			@ (mov r8, r8)
 8001956:	46bd      	mov	sp, r7
 8001958:	b004      	add	sp, #16
 800195a:	bd80      	pop	{r7, pc}
 800195c:	20000078 	.word	0x20000078
 8001960:	40012400 	.word	0x40012400

08001964 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b088      	sub	sp, #32
 8001968:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800196a:	2310      	movs	r3, #16
 800196c:	18fb      	adds	r3, r7, r3
 800196e:	0018      	movs	r0, r3
 8001970:	2310      	movs	r3, #16
 8001972:	001a      	movs	r2, r3
 8001974:	2100      	movs	r1, #0
 8001976:	f003 fa11 	bl	8004d9c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800197a:	1d3b      	adds	r3, r7, #4
 800197c:	0018      	movs	r0, r3
 800197e:	230c      	movs	r3, #12
 8001980:	001a      	movs	r2, r3
 8001982:	2100      	movs	r1, #0
 8001984:	f003 fa0a 	bl	8004d9c <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001988:	4b1e      	ldr	r3, [pc, #120]	@ (8001a04 <MX_TIM3_Init+0xa0>)
 800198a:	4a1f      	ldr	r2, [pc, #124]	@ (8001a08 <MX_TIM3_Init+0xa4>)
 800198c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 16-1;
 800198e:	4b1d      	ldr	r3, [pc, #116]	@ (8001a04 <MX_TIM3_Init+0xa0>)
 8001990:	220f      	movs	r2, #15
 8001992:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001994:	4b1b      	ldr	r3, [pc, #108]	@ (8001a04 <MX_TIM3_Init+0xa0>)
 8001996:	2200      	movs	r2, #0
 8001998:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 800199a:	4b1a      	ldr	r3, [pc, #104]	@ (8001a04 <MX_TIM3_Init+0xa0>)
 800199c:	4a1b      	ldr	r2, [pc, #108]	@ (8001a0c <MX_TIM3_Init+0xa8>)
 800199e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019a0:	4b18      	ldr	r3, [pc, #96]	@ (8001a04 <MX_TIM3_Init+0xa0>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019a6:	4b17      	ldr	r3, [pc, #92]	@ (8001a04 <MX_TIM3_Init+0xa0>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80019ac:	4b15      	ldr	r3, [pc, #84]	@ (8001a04 <MX_TIM3_Init+0xa0>)
 80019ae:	0018      	movs	r0, r3
 80019b0:	f002 ff08 	bl	80047c4 <HAL_TIM_Base_Init>
 80019b4:	1e03      	subs	r3, r0, #0
 80019b6:	d001      	beq.n	80019bc <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80019b8:	f000 f914 	bl	8001be4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019bc:	2110      	movs	r1, #16
 80019be:	187b      	adds	r3, r7, r1
 80019c0:	2280      	movs	r2, #128	@ 0x80
 80019c2:	0152      	lsls	r2, r2, #5
 80019c4:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80019c6:	187a      	adds	r2, r7, r1
 80019c8:	4b0e      	ldr	r3, [pc, #56]	@ (8001a04 <MX_TIM3_Init+0xa0>)
 80019ca:	0011      	movs	r1, r2
 80019cc:	0018      	movs	r0, r3
 80019ce:	f002 ff97 	bl	8004900 <HAL_TIM_ConfigClockSource>
 80019d2:	1e03      	subs	r3, r0, #0
 80019d4:	d001      	beq.n	80019da <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80019d6:	f000 f905 	bl	8001be4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80019da:	1d3b      	adds	r3, r7, #4
 80019dc:	2220      	movs	r2, #32
 80019de:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 80019e0:	1d3b      	adds	r3, r7, #4
 80019e2:	2280      	movs	r2, #128	@ 0x80
 80019e4:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80019e6:	1d3a      	adds	r2, r7, #4
 80019e8:	4b06      	ldr	r3, [pc, #24]	@ (8001a04 <MX_TIM3_Init+0xa0>)
 80019ea:	0011      	movs	r1, r2
 80019ec:	0018      	movs	r0, r3
 80019ee:	f003 f973 	bl	8004cd8 <HAL_TIMEx_MasterConfigSynchronization>
 80019f2:	1e03      	subs	r3, r0, #0
 80019f4:	d001      	beq.n	80019fa <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 80019f6:	f000 f8f5 	bl	8001be4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80019fa:	46c0      	nop			@ (mov r8, r8)
 80019fc:	46bd      	mov	sp, r7
 80019fe:	b008      	add	sp, #32
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	46c0      	nop			@ (mov r8, r8)
 8001a04:	20000138 	.word	0x20000138
 8001a08:	40000400 	.word	0x40000400
 8001a0c:	000003e7 	.word	0x000003e7

08001a10 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b082      	sub	sp, #8
 8001a14:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001a16:	4b0c      	ldr	r3, [pc, #48]	@ (8001a48 <MX_DMA_Init+0x38>)
 8001a18:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001a1a:	4b0b      	ldr	r3, [pc, #44]	@ (8001a48 <MX_DMA_Init+0x38>)
 8001a1c:	2101      	movs	r1, #1
 8001a1e:	430a      	orrs	r2, r1
 8001a20:	639a      	str	r2, [r3, #56]	@ 0x38
 8001a22:	4b09      	ldr	r3, [pc, #36]	@ (8001a48 <MX_DMA_Init+0x38>)
 8001a24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a26:	2201      	movs	r2, #1
 8001a28:	4013      	ands	r3, r2
 8001a2a:	607b      	str	r3, [r7, #4]
 8001a2c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001a2e:	2200      	movs	r2, #0
 8001a30:	2100      	movs	r1, #0
 8001a32:	2009      	movs	r0, #9
 8001a34:	f001 fd84 	bl	8003540 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001a38:	2009      	movs	r0, #9
 8001a3a:	f001 fd96 	bl	800356a <HAL_NVIC_EnableIRQ>

}
 8001a3e:	46c0      	nop			@ (mov r8, r8)
 8001a40:	46bd      	mov	sp, r7
 8001a42:	b002      	add	sp, #8
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	46c0      	nop			@ (mov r8, r8)
 8001a48:	40021000 	.word	0x40021000

08001a4c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a4c:	b590      	push	{r4, r7, lr}
 8001a4e:	b089      	sub	sp, #36	@ 0x24
 8001a50:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a52:	240c      	movs	r4, #12
 8001a54:	193b      	adds	r3, r7, r4
 8001a56:	0018      	movs	r0, r3
 8001a58:	2314      	movs	r3, #20
 8001a5a:	001a      	movs	r2, r3
 8001a5c:	2100      	movs	r1, #0
 8001a5e:	f003 f99d 	bl	8004d9c <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a62:	4b28      	ldr	r3, [pc, #160]	@ (8001b04 <MX_GPIO_Init+0xb8>)
 8001a64:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001a66:	4b27      	ldr	r3, [pc, #156]	@ (8001b04 <MX_GPIO_Init+0xb8>)
 8001a68:	2101      	movs	r1, #1
 8001a6a:	430a      	orrs	r2, r1
 8001a6c:	635a      	str	r2, [r3, #52]	@ 0x34
 8001a6e:	4b25      	ldr	r3, [pc, #148]	@ (8001b04 <MX_GPIO_Init+0xb8>)
 8001a70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a72:	2201      	movs	r2, #1
 8001a74:	4013      	ands	r3, r2
 8001a76:	60bb      	str	r3, [r7, #8]
 8001a78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a7a:	4b22      	ldr	r3, [pc, #136]	@ (8001b04 <MX_GPIO_Init+0xb8>)
 8001a7c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001a7e:	4b21      	ldr	r3, [pc, #132]	@ (8001b04 <MX_GPIO_Init+0xb8>)
 8001a80:	2102      	movs	r1, #2
 8001a82:	430a      	orrs	r2, r1
 8001a84:	635a      	str	r2, [r3, #52]	@ 0x34
 8001a86:	4b1f      	ldr	r3, [pc, #124]	@ (8001b04 <MX_GPIO_Init+0xb8>)
 8001a88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a8a:	2202      	movs	r2, #2
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	607b      	str	r3, [r7, #4]
 8001a90:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, D11_Pin|D14_Pin, GPIO_PIN_RESET);
 8001a92:	23c0      	movs	r3, #192	@ 0xc0
 8001a94:	0159      	lsls	r1, r3, #5
 8001a96:	23a0      	movs	r3, #160	@ 0xa0
 8001a98:	05db      	lsls	r3, r3, #23
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	0018      	movs	r0, r3
 8001a9e:	f002 f999 	bl	8003dd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(D13_GPIO_Port, D13_Pin, GPIO_PIN_RESET);
 8001aa2:	4b19      	ldr	r3, [pc, #100]	@ (8001b08 <MX_GPIO_Init+0xbc>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	2108      	movs	r1, #8
 8001aa8:	0018      	movs	r0, r3
 8001aaa:	f002 f993 	bl	8003dd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : D11_Pin D14_Pin */
  GPIO_InitStruct.Pin = D11_Pin|D14_Pin;
 8001aae:	193b      	adds	r3, r7, r4
 8001ab0:	22c0      	movs	r2, #192	@ 0xc0
 8001ab2:	0152      	lsls	r2, r2, #5
 8001ab4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ab6:	193b      	adds	r3, r7, r4
 8001ab8:	2201      	movs	r2, #1
 8001aba:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001abc:	193b      	adds	r3, r7, r4
 8001abe:	2200      	movs	r2, #0
 8001ac0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ac2:	193b      	adds	r3, r7, r4
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ac8:	193a      	adds	r2, r7, r4
 8001aca:	23a0      	movs	r3, #160	@ 0xa0
 8001acc:	05db      	lsls	r3, r3, #23
 8001ace:	0011      	movs	r1, r2
 8001ad0:	0018      	movs	r0, r3
 8001ad2:	f002 f81b 	bl	8003b0c <HAL_GPIO_Init>

  /*Configure GPIO pin : D13_Pin */
  GPIO_InitStruct.Pin = D13_Pin;
 8001ad6:	0021      	movs	r1, r4
 8001ad8:	187b      	adds	r3, r7, r1
 8001ada:	2208      	movs	r2, #8
 8001adc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ade:	187b      	adds	r3, r7, r1
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae4:	187b      	adds	r3, r7, r1
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aea:	187b      	adds	r3, r7, r1
 8001aec:	2200      	movs	r2, #0
 8001aee:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(D13_GPIO_Port, &GPIO_InitStruct);
 8001af0:	187b      	adds	r3, r7, r1
 8001af2:	4a05      	ldr	r2, [pc, #20]	@ (8001b08 <MX_GPIO_Init+0xbc>)
 8001af4:	0019      	movs	r1, r3
 8001af6:	0010      	movs	r0, r2
 8001af8:	f002 f808 	bl	8003b0c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001afc:	46c0      	nop			@ (mov r8, r8)
 8001afe:	46bd      	mov	sp, r7
 8001b00:	b009      	add	sp, #36	@ 0x24
 8001b02:	bd90      	pop	{r4, r7, pc}
 8001b04:	40021000 	.word	0x40021000
 8001b08:	50000400 	.word	0x50000400

08001b0c <ReadVrefintOnce>:

/* USER CODE BEGIN 4 */
static uint16_t ReadVrefintOnce(void)
{
 8001b0c:	b590      	push	{r4, r7, lr}
 8001b0e:	b085      	sub	sp, #20
 8001b10:	af00      	add	r7, sp, #0
    ADC_ChannelConfTypeDef sConfig = {0};
 8001b12:	003b      	movs	r3, r7
 8001b14:	0018      	movs	r0, r3
 8001b16:	230c      	movs	r3, #12
 8001b18:	001a      	movs	r2, r3
 8001b1a:	2100      	movs	r1, #0
 8001b1c:	f003 f93e 	bl	8004d9c <memset>

    // DMA durdur
    HAL_ADC_Stop_DMA(&hadc1);
 8001b20:	4b22      	ldr	r3, [pc, #136]	@ (8001bac <ReadVrefintOnce+0xa0>)
 8001b22:	0018      	movs	r0, r3
 8001b24:	f000 feb2 	bl	800288c <HAL_ADC_Stop_DMA>

    // VREFINT kanalını seç
    sConfig.Channel = ADC_CHANNEL_VREFINT;
 8001b28:	003b      	movs	r3, r7
 8001b2a:	4a21      	ldr	r2, [pc, #132]	@ (8001bb0 <ReadVrefintOnce+0xa4>)
 8001b2c:	601a      	str	r2, [r3, #0]
    sConfig.Rank = ADC_REGULAR_RANK_1;
 8001b2e:	003b      	movs	r3, r7
 8001b30:	2200      	movs	r2, #0
 8001b32:	605a      	str	r2, [r3, #4]
    sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_2; // uzun süre daha doğru
 8001b34:	003b      	movs	r3, r7
 8001b36:	4a1f      	ldr	r2, [pc, #124]	@ (8001bb4 <ReadVrefintOnce+0xa8>)
 8001b38:	609a      	str	r2, [r3, #8]
    HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 8001b3a:	003a      	movs	r2, r7
 8001b3c:	4b1b      	ldr	r3, [pc, #108]	@ (8001bac <ReadVrefintOnce+0xa0>)
 8001b3e:	0011      	movs	r1, r2
 8001b40:	0018      	movs	r0, r3
 8001b42:	f000 ff31 	bl	80029a8 <HAL_ADC_ConfigChannel>

    HAL_ADC_Start(&hadc1);
 8001b46:	4b19      	ldr	r3, [pc, #100]	@ (8001bac <ReadVrefintOnce+0xa0>)
 8001b48:	0018      	movs	r0, r3
 8001b4a:	f000 fcf3 	bl	8002534 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8001b4e:	2301      	movs	r3, #1
 8001b50:	425a      	negs	r2, r3
 8001b52:	4b16      	ldr	r3, [pc, #88]	@ (8001bac <ReadVrefintOnce+0xa0>)
 8001b54:	0011      	movs	r1, r2
 8001b56:	0018      	movs	r0, r3
 8001b58:	f000 fd76 	bl	8002648 <HAL_ADC_PollForConversion>
    uint16_t vref_adc = HAL_ADC_GetValue(&hadc1);
 8001b5c:	4b13      	ldr	r3, [pc, #76]	@ (8001bac <ReadVrefintOnce+0xa0>)
 8001b5e:	0018      	movs	r0, r3
 8001b60:	f000 ff06 	bl	8002970 <HAL_ADC_GetValue>
 8001b64:	0002      	movs	r2, r0
 8001b66:	240e      	movs	r4, #14
 8001b68:	193b      	adds	r3, r7, r4
 8001b6a:	801a      	strh	r2, [r3, #0]
    HAL_ADC_Stop(&hadc1);
 8001b6c:	4b0f      	ldr	r3, [pc, #60]	@ (8001bac <ReadVrefintOnce+0xa0>)
 8001b6e:	0018      	movs	r0, r3
 8001b70:	f000 fd2e 	bl	80025d0 <HAL_ADC_Stop>

    // Tekrar CH0’a dön
    sConfig.Channel = ADC_CHANNEL_0;
 8001b74:	003b      	movs	r3, r7
 8001b76:	2201      	movs	r2, #1
 8001b78:	601a      	str	r2, [r3, #0]
    sConfig.Rank = ADC_REGULAR_RANK_1;
 8001b7a:	003b      	movs	r3, r7
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	605a      	str	r2, [r3, #4]
    sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8001b80:	003b      	movs	r3, r7
 8001b82:	2200      	movs	r2, #0
 8001b84:	609a      	str	r2, [r3, #8]
    HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 8001b86:	003a      	movs	r2, r7
 8001b88:	4b08      	ldr	r3, [pc, #32]	@ (8001bac <ReadVrefintOnce+0xa0>)
 8001b8a:	0011      	movs	r1, r2
 8001b8c:	0018      	movs	r0, r3
 8001b8e:	f000 ff0b 	bl	80029a8 <HAL_ADC_ConfigChannel>

    // DMA’yı tekrar başlat
    HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buf, ADC_BUF_LEN);
 8001b92:	4909      	ldr	r1, [pc, #36]	@ (8001bb8 <ReadVrefintOnce+0xac>)
 8001b94:	4b05      	ldr	r3, [pc, #20]	@ (8001bac <ReadVrefintOnce+0xa0>)
 8001b96:	22c8      	movs	r2, #200	@ 0xc8
 8001b98:	0018      	movs	r0, r3
 8001b9a:	f000 fde9 	bl	8002770 <HAL_ADC_Start_DMA>

    return vref_adc;
 8001b9e:	193b      	adds	r3, r7, r4
 8001ba0:	881b      	ldrh	r3, [r3, #0]
}
 8001ba2:	0018      	movs	r0, r3
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	b005      	add	sp, #20
 8001ba8:	bd90      	pop	{r4, r7, pc}
 8001baa:	46c0      	nop			@ (mov r8, r8)
 8001bac:	20000078 	.word	0x20000078
 8001bb0:	b4002000 	.word	0xb4002000
 8001bb4:	07ffff04 	.word	0x07ffff04
 8001bb8:	20000184 	.word	0x20000184

08001bbc <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b082      	sub	sp, #8
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
    if (hadc->Instance == ADC1) {
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a04      	ldr	r2, [pc, #16]	@ (8001bdc <HAL_ADC_ConvCpltCallback+0x20>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d102      	bne.n	8001bd4 <HAL_ADC_ConvCpltCallback+0x18>
        adc_ready = 1;
 8001bce:	4b04      	ldr	r3, [pc, #16]	@ (8001be0 <HAL_ADC_ConvCpltCallback+0x24>)
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	701a      	strb	r2, [r3, #0]
    }
}
 8001bd4:	46c0      	nop			@ (mov r8, r8)
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	b002      	add	sp, #8
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	40012400 	.word	0x40012400
 8001be0:	20000314 	.word	0x20000314

08001be4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001be8:	b672      	cpsid	i
}
 8001bea:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001bec:	46c0      	nop			@ (mov r8, r8)
 8001bee:	e7fd      	b.n	8001bec <Error_Handler+0x8>

08001bf0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b082      	sub	sp, #8
 8001bf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bf6:	4b0f      	ldr	r3, [pc, #60]	@ (8001c34 <HAL_MspInit+0x44>)
 8001bf8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001bfa:	4b0e      	ldr	r3, [pc, #56]	@ (8001c34 <HAL_MspInit+0x44>)
 8001bfc:	2101      	movs	r1, #1
 8001bfe:	430a      	orrs	r2, r1
 8001c00:	641a      	str	r2, [r3, #64]	@ 0x40
 8001c02:	4b0c      	ldr	r3, [pc, #48]	@ (8001c34 <HAL_MspInit+0x44>)
 8001c04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c06:	2201      	movs	r2, #1
 8001c08:	4013      	ands	r3, r2
 8001c0a:	607b      	str	r3, [r7, #4]
 8001c0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c0e:	4b09      	ldr	r3, [pc, #36]	@ (8001c34 <HAL_MspInit+0x44>)
 8001c10:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001c12:	4b08      	ldr	r3, [pc, #32]	@ (8001c34 <HAL_MspInit+0x44>)
 8001c14:	2180      	movs	r1, #128	@ 0x80
 8001c16:	0549      	lsls	r1, r1, #21
 8001c18:	430a      	orrs	r2, r1
 8001c1a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001c1c:	4b05      	ldr	r3, [pc, #20]	@ (8001c34 <HAL_MspInit+0x44>)
 8001c1e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001c20:	2380      	movs	r3, #128	@ 0x80
 8001c22:	055b      	lsls	r3, r3, #21
 8001c24:	4013      	ands	r3, r2
 8001c26:	603b      	str	r3, [r7, #0]
 8001c28:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c2a:	46c0      	nop			@ (mov r8, r8)
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	b002      	add	sp, #8
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	46c0      	nop			@ (mov r8, r8)
 8001c34:	40021000 	.word	0x40021000

08001c38 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001c38:	b590      	push	{r4, r7, lr}
 8001c3a:	b08b      	sub	sp, #44	@ 0x2c
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c40:	2414      	movs	r4, #20
 8001c42:	193b      	adds	r3, r7, r4
 8001c44:	0018      	movs	r0, r3
 8001c46:	2314      	movs	r3, #20
 8001c48:	001a      	movs	r2, r3
 8001c4a:	2100      	movs	r1, #0
 8001c4c:	f003 f8a6 	bl	8004d9c <memset>
  if(hadc->Instance==ADC1)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a2d      	ldr	r2, [pc, #180]	@ (8001d0c <HAL_ADC_MspInit+0xd4>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d154      	bne.n	8001d04 <HAL_ADC_MspInit+0xcc>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001c5a:	4b2d      	ldr	r3, [pc, #180]	@ (8001d10 <HAL_ADC_MspInit+0xd8>)
 8001c5c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001c5e:	4b2c      	ldr	r3, [pc, #176]	@ (8001d10 <HAL_ADC_MspInit+0xd8>)
 8001c60:	2180      	movs	r1, #128	@ 0x80
 8001c62:	0349      	lsls	r1, r1, #13
 8001c64:	430a      	orrs	r2, r1
 8001c66:	641a      	str	r2, [r3, #64]	@ 0x40
 8001c68:	4b29      	ldr	r3, [pc, #164]	@ (8001d10 <HAL_ADC_MspInit+0xd8>)
 8001c6a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001c6c:	2380      	movs	r3, #128	@ 0x80
 8001c6e:	035b      	lsls	r3, r3, #13
 8001c70:	4013      	ands	r3, r2
 8001c72:	613b      	str	r3, [r7, #16]
 8001c74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c76:	4b26      	ldr	r3, [pc, #152]	@ (8001d10 <HAL_ADC_MspInit+0xd8>)
 8001c78:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001c7a:	4b25      	ldr	r3, [pc, #148]	@ (8001d10 <HAL_ADC_MspInit+0xd8>)
 8001c7c:	2101      	movs	r1, #1
 8001c7e:	430a      	orrs	r2, r1
 8001c80:	635a      	str	r2, [r3, #52]	@ 0x34
 8001c82:	4b23      	ldr	r3, [pc, #140]	@ (8001d10 <HAL_ADC_MspInit+0xd8>)
 8001c84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c86:	2201      	movs	r2, #1
 8001c88:	4013      	ands	r3, r2
 8001c8a:	60fb      	str	r3, [r7, #12]
 8001c8c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001c8e:	193b      	adds	r3, r7, r4
 8001c90:	2207      	movs	r2, #7
 8001c92:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c94:	193b      	adds	r3, r7, r4
 8001c96:	2203      	movs	r2, #3
 8001c98:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c9a:	193b      	adds	r3, r7, r4
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ca0:	193a      	adds	r2, r7, r4
 8001ca2:	23a0      	movs	r3, #160	@ 0xa0
 8001ca4:	05db      	lsls	r3, r3, #23
 8001ca6:	0011      	movs	r1, r2
 8001ca8:	0018      	movs	r0, r3
 8001caa:	f001 ff2f 	bl	8003b0c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001cae:	4b19      	ldr	r3, [pc, #100]	@ (8001d14 <HAL_ADC_MspInit+0xdc>)
 8001cb0:	4a19      	ldr	r2, [pc, #100]	@ (8001d18 <HAL_ADC_MspInit+0xe0>)
 8001cb2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001cb4:	4b17      	ldr	r3, [pc, #92]	@ (8001d14 <HAL_ADC_MspInit+0xdc>)
 8001cb6:	2205      	movs	r2, #5
 8001cb8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001cba:	4b16      	ldr	r3, [pc, #88]	@ (8001d14 <HAL_ADC_MspInit+0xdc>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001cc0:	4b14      	ldr	r3, [pc, #80]	@ (8001d14 <HAL_ADC_MspInit+0xdc>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001cc6:	4b13      	ldr	r3, [pc, #76]	@ (8001d14 <HAL_ADC_MspInit+0xdc>)
 8001cc8:	2280      	movs	r2, #128	@ 0x80
 8001cca:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001ccc:	4b11      	ldr	r3, [pc, #68]	@ (8001d14 <HAL_ADC_MspInit+0xdc>)
 8001cce:	2280      	movs	r2, #128	@ 0x80
 8001cd0:	0052      	lsls	r2, r2, #1
 8001cd2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001cd4:	4b0f      	ldr	r3, [pc, #60]	@ (8001d14 <HAL_ADC_MspInit+0xdc>)
 8001cd6:	2280      	movs	r2, #128	@ 0x80
 8001cd8:	00d2      	lsls	r2, r2, #3
 8001cda:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001cdc:	4b0d      	ldr	r3, [pc, #52]	@ (8001d14 <HAL_ADC_MspInit+0xdc>)
 8001cde:	2220      	movs	r2, #32
 8001ce0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001ce2:	4b0c      	ldr	r3, [pc, #48]	@ (8001d14 <HAL_ADC_MspInit+0xdc>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001ce8:	4b0a      	ldr	r3, [pc, #40]	@ (8001d14 <HAL_ADC_MspInit+0xdc>)
 8001cea:	0018      	movs	r0, r3
 8001cec:	f001 fc5a 	bl	80035a4 <HAL_DMA_Init>
 8001cf0:	1e03      	subs	r3, r0, #0
 8001cf2:	d001      	beq.n	8001cf8 <HAL_ADC_MspInit+0xc0>
    {
      Error_Handler();
 8001cf4:	f7ff ff76 	bl	8001be4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	4a06      	ldr	r2, [pc, #24]	@ (8001d14 <HAL_ADC_MspInit+0xdc>)
 8001cfc:	651a      	str	r2, [r3, #80]	@ 0x50
 8001cfe:	4b05      	ldr	r3, [pc, #20]	@ (8001d14 <HAL_ADC_MspInit+0xdc>)
 8001d00:	687a      	ldr	r2, [r7, #4]
 8001d02:	629a      	str	r2, [r3, #40]	@ 0x28

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001d04:	46c0      	nop			@ (mov r8, r8)
 8001d06:	46bd      	mov	sp, r7
 8001d08:	b00b      	add	sp, #44	@ 0x2c
 8001d0a:	bd90      	pop	{r4, r7, pc}
 8001d0c:	40012400 	.word	0x40012400
 8001d10:	40021000 	.word	0x40021000
 8001d14:	200000dc 	.word	0x200000dc
 8001d18:	40020008 	.word	0x40020008

08001d1c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b084      	sub	sp, #16
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a09      	ldr	r2, [pc, #36]	@ (8001d50 <HAL_TIM_Base_MspInit+0x34>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d10b      	bne.n	8001d46 <HAL_TIM_Base_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001d2e:	4b09      	ldr	r3, [pc, #36]	@ (8001d54 <HAL_TIM_Base_MspInit+0x38>)
 8001d30:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001d32:	4b08      	ldr	r3, [pc, #32]	@ (8001d54 <HAL_TIM_Base_MspInit+0x38>)
 8001d34:	2102      	movs	r1, #2
 8001d36:	430a      	orrs	r2, r1
 8001d38:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001d3a:	4b06      	ldr	r3, [pc, #24]	@ (8001d54 <HAL_TIM_Base_MspInit+0x38>)
 8001d3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d3e:	2202      	movs	r2, #2
 8001d40:	4013      	ands	r3, r2
 8001d42:	60fb      	str	r3, [r7, #12]
 8001d44:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 8001d46:	46c0      	nop			@ (mov r8, r8)
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	b004      	add	sp, #16
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	46c0      	nop			@ (mov r8, r8)
 8001d50:	40000400 	.word	0x40000400
 8001d54:	40021000 	.word	0x40021000

08001d58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001d5c:	46c0      	nop			@ (mov r8, r8)
 8001d5e:	e7fd      	b.n	8001d5c <NMI_Handler+0x4>

08001d60 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d64:	46c0      	nop			@ (mov r8, r8)
 8001d66:	e7fd      	b.n	8001d64 <HardFault_Handler+0x4>

08001d68 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001d6c:	46c0      	nop			@ (mov r8, r8)
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}

08001d72 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d72:	b580      	push	{r7, lr}
 8001d74:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d76:	46c0      	nop			@ (mov r8, r8)
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}

08001d7c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d80:	f000 f8aa 	bl	8001ed8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d84:	46c0      	nop			@ (mov r8, r8)
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
	...

08001d8c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001d90:	4b03      	ldr	r3, [pc, #12]	@ (8001da0 <DMA1_Channel1_IRQHandler+0x14>)
 8001d92:	0018      	movs	r0, r3
 8001d94:	f001 fd78 	bl	8003888 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001d98:	46c0      	nop			@ (mov r8, r8)
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	46c0      	nop			@ (mov r8, r8)
 8001da0:	200000dc 	.word	0x200000dc

08001da4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001da8:	46c0      	nop			@ (mov r8, r8)
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
	...

08001db0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001db0:	480d      	ldr	r0, [pc, #52]	@ (8001de8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001db2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001db4:	f7ff fff6 	bl	8001da4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001db8:	480c      	ldr	r0, [pc, #48]	@ (8001dec <LoopForever+0x6>)
  ldr r1, =_edata
 8001dba:	490d      	ldr	r1, [pc, #52]	@ (8001df0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001dbc:	4a0d      	ldr	r2, [pc, #52]	@ (8001df4 <LoopForever+0xe>)
  movs r3, #0
 8001dbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001dc0:	e002      	b.n	8001dc8 <LoopCopyDataInit>

08001dc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001dc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001dc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001dc6:	3304      	adds	r3, #4

08001dc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001dc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001dca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001dcc:	d3f9      	bcc.n	8001dc2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001dce:	4a0a      	ldr	r2, [pc, #40]	@ (8001df8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001dd0:	4c0a      	ldr	r4, [pc, #40]	@ (8001dfc <LoopForever+0x16>)
  movs r3, #0
 8001dd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001dd4:	e001      	b.n	8001dda <LoopFillZerobss>

08001dd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001dd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001dd8:	3204      	adds	r2, #4

08001dda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001dda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ddc:	d3fb      	bcc.n	8001dd6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001dde:	f002 ffeb 	bl	8004db8 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001de2:	f7ff fbbd 	bl	8001560 <main>

08001de6 <LoopForever>:

LoopForever:
  b LoopForever
 8001de6:	e7fe      	b.n	8001de6 <LoopForever>
  ldr   r0, =_estack
 8001de8:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001dec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001df0:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001df4:	08005004 	.word	0x08005004
  ldr r2, =_sbss
 8001df8:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001dfc:	2000045c 	.word	0x2000045c

08001e00 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001e00:	e7fe      	b.n	8001e00 <ADC1_IRQHandler>
	...

08001e04 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b082      	sub	sp, #8
 8001e08:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001e0a:	1dfb      	adds	r3, r7, #7
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e10:	4b0b      	ldr	r3, [pc, #44]	@ (8001e40 <HAL_Init+0x3c>)
 8001e12:	681a      	ldr	r2, [r3, #0]
 8001e14:	4b0a      	ldr	r3, [pc, #40]	@ (8001e40 <HAL_Init+0x3c>)
 8001e16:	2180      	movs	r1, #128	@ 0x80
 8001e18:	0049      	lsls	r1, r1, #1
 8001e1a:	430a      	orrs	r2, r1
 8001e1c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e1e:	2003      	movs	r0, #3
 8001e20:	f000 f810 	bl	8001e44 <HAL_InitTick>
 8001e24:	1e03      	subs	r3, r0, #0
 8001e26:	d003      	beq.n	8001e30 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001e28:	1dfb      	adds	r3, r7, #7
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	701a      	strb	r2, [r3, #0]
 8001e2e:	e001      	b.n	8001e34 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001e30:	f7ff fede 	bl	8001bf0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001e34:	1dfb      	adds	r3, r7, #7
 8001e36:	781b      	ldrb	r3, [r3, #0]
}
 8001e38:	0018      	movs	r0, r3
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	b002      	add	sp, #8
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	40022000 	.word	0x40022000

08001e44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e44:	b590      	push	{r4, r7, lr}
 8001e46:	b085      	sub	sp, #20
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001e4c:	230f      	movs	r3, #15
 8001e4e:	18fb      	adds	r3, r7, r3
 8001e50:	2200      	movs	r2, #0
 8001e52:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001e54:	4b1d      	ldr	r3, [pc, #116]	@ (8001ecc <HAL_InitTick+0x88>)
 8001e56:	781b      	ldrb	r3, [r3, #0]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d02b      	beq.n	8001eb4 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001e5c:	4b1c      	ldr	r3, [pc, #112]	@ (8001ed0 <HAL_InitTick+0x8c>)
 8001e5e:	681c      	ldr	r4, [r3, #0]
 8001e60:	4b1a      	ldr	r3, [pc, #104]	@ (8001ecc <HAL_InitTick+0x88>)
 8001e62:	781b      	ldrb	r3, [r3, #0]
 8001e64:	0019      	movs	r1, r3
 8001e66:	23fa      	movs	r3, #250	@ 0xfa
 8001e68:	0098      	lsls	r0, r3, #2
 8001e6a:	f7fe f949 	bl	8000100 <__udivsi3>
 8001e6e:	0003      	movs	r3, r0
 8001e70:	0019      	movs	r1, r3
 8001e72:	0020      	movs	r0, r4
 8001e74:	f7fe f944 	bl	8000100 <__udivsi3>
 8001e78:	0003      	movs	r3, r0
 8001e7a:	0018      	movs	r0, r3
 8001e7c:	f001 fb85 	bl	800358a <HAL_SYSTICK_Config>
 8001e80:	1e03      	subs	r3, r0, #0
 8001e82:	d112      	bne.n	8001eaa <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2b03      	cmp	r3, #3
 8001e88:	d80a      	bhi.n	8001ea0 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e8a:	6879      	ldr	r1, [r7, #4]
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	425b      	negs	r3, r3
 8001e90:	2200      	movs	r2, #0
 8001e92:	0018      	movs	r0, r3
 8001e94:	f001 fb54 	bl	8003540 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001e98:	4b0e      	ldr	r3, [pc, #56]	@ (8001ed4 <HAL_InitTick+0x90>)
 8001e9a:	687a      	ldr	r2, [r7, #4]
 8001e9c:	601a      	str	r2, [r3, #0]
 8001e9e:	e00d      	b.n	8001ebc <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001ea0:	230f      	movs	r3, #15
 8001ea2:	18fb      	adds	r3, r7, r3
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	701a      	strb	r2, [r3, #0]
 8001ea8:	e008      	b.n	8001ebc <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001eaa:	230f      	movs	r3, #15
 8001eac:	18fb      	adds	r3, r7, r3
 8001eae:	2201      	movs	r2, #1
 8001eb0:	701a      	strb	r2, [r3, #0]
 8001eb2:	e003      	b.n	8001ebc <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001eb4:	230f      	movs	r3, #15
 8001eb6:	18fb      	adds	r3, r7, r3
 8001eb8:	2201      	movs	r2, #1
 8001eba:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001ebc:	230f      	movs	r3, #15
 8001ebe:	18fb      	adds	r3, r7, r3
 8001ec0:	781b      	ldrb	r3, [r3, #0]
}
 8001ec2:	0018      	movs	r0, r3
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	b005      	add	sp, #20
 8001ec8:	bd90      	pop	{r4, r7, pc}
 8001eca:	46c0      	nop			@ (mov r8, r8)
 8001ecc:	20000008 	.word	0x20000008
 8001ed0:	20000000 	.word	0x20000000
 8001ed4:	20000004 	.word	0x20000004

08001ed8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001edc:	4b05      	ldr	r3, [pc, #20]	@ (8001ef4 <HAL_IncTick+0x1c>)
 8001ede:	781b      	ldrb	r3, [r3, #0]
 8001ee0:	001a      	movs	r2, r3
 8001ee2:	4b05      	ldr	r3, [pc, #20]	@ (8001ef8 <HAL_IncTick+0x20>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	18d2      	adds	r2, r2, r3
 8001ee8:	4b03      	ldr	r3, [pc, #12]	@ (8001ef8 <HAL_IncTick+0x20>)
 8001eea:	601a      	str	r2, [r3, #0]
}
 8001eec:	46c0      	nop			@ (mov r8, r8)
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	46c0      	nop			@ (mov r8, r8)
 8001ef4:	20000008 	.word	0x20000008
 8001ef8:	20000320 	.word	0x20000320

08001efc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	af00      	add	r7, sp, #0
  return uwTick;
 8001f00:	4b02      	ldr	r3, [pc, #8]	@ (8001f0c <HAL_GetTick+0x10>)
 8001f02:	681b      	ldr	r3, [r3, #0]
}
 8001f04:	0018      	movs	r0, r3
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	46c0      	nop			@ (mov r8, r8)
 8001f0c:	20000320 	.word	0x20000320

08001f10 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b082      	sub	sp, #8
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
 8001f18:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4a05      	ldr	r2, [pc, #20]	@ (8001f34 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8001f20:	401a      	ands	r2, r3
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	431a      	orrs	r2, r3
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	601a      	str	r2, [r3, #0]
}
 8001f2a:	46c0      	nop			@ (mov r8, r8)
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	b002      	add	sp, #8
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	46c0      	nop			@ (mov r8, r8)
 8001f34:	fe3fffff 	.word	0xfe3fffff

08001f38 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b082      	sub	sp, #8
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	23e0      	movs	r3, #224	@ 0xe0
 8001f46:	045b      	lsls	r3, r3, #17
 8001f48:	4013      	ands	r3, r2
}
 8001f4a:	0018      	movs	r0, r3
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	b002      	add	sp, #8
 8001f50:	bd80      	pop	{r7, pc}

08001f52 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8001f52:	b580      	push	{r7, lr}
 8001f54:	b084      	sub	sp, #16
 8001f56:	af00      	add	r7, sp, #0
 8001f58:	60f8      	str	r0, [r7, #12]
 8001f5a:	60b9      	str	r1, [r7, #8]
 8001f5c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	695b      	ldr	r3, [r3, #20]
 8001f62:	68ba      	ldr	r2, [r7, #8]
 8001f64:	2104      	movs	r1, #4
 8001f66:	400a      	ands	r2, r1
 8001f68:	2107      	movs	r1, #7
 8001f6a:	4091      	lsls	r1, r2
 8001f6c:	000a      	movs	r2, r1
 8001f6e:	43d2      	mvns	r2, r2
 8001f70:	401a      	ands	r2, r3
 8001f72:	68bb      	ldr	r3, [r7, #8]
 8001f74:	2104      	movs	r1, #4
 8001f76:	400b      	ands	r3, r1
 8001f78:	6879      	ldr	r1, [r7, #4]
 8001f7a:	4099      	lsls	r1, r3
 8001f7c:	000b      	movs	r3, r1
 8001f7e:	431a      	orrs	r2, r3
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8001f84:	46c0      	nop			@ (mov r8, r8)
 8001f86:	46bd      	mov	sp, r7
 8001f88:	b004      	add	sp, #16
 8001f8a:	bd80      	pop	{r7, pc}

08001f8c <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b082      	sub	sp, #8
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
 8001f94:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	695b      	ldr	r3, [r3, #20]
 8001f9a:	683a      	ldr	r2, [r7, #0]
 8001f9c:	2104      	movs	r1, #4
 8001f9e:	400a      	ands	r2, r1
 8001fa0:	2107      	movs	r1, #7
 8001fa2:	4091      	lsls	r1, r2
 8001fa4:	000a      	movs	r2, r1
 8001fa6:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	2104      	movs	r1, #4
 8001fac:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001fae:	40da      	lsrs	r2, r3
 8001fb0:	0013      	movs	r3, r2
}
 8001fb2:	0018      	movs	r0, r3
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	b002      	add	sp, #8
 8001fb8:	bd80      	pop	{r7, pc}

08001fba <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001fba:	b580      	push	{r7, lr}
 8001fbc:	b082      	sub	sp, #8
 8001fbe:	af00      	add	r7, sp, #0
 8001fc0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	68da      	ldr	r2, [r3, #12]
 8001fc6:	23c0      	movs	r3, #192	@ 0xc0
 8001fc8:	011b      	lsls	r3, r3, #4
 8001fca:	4013      	ands	r3, r2
 8001fcc:	d101      	bne.n	8001fd2 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e000      	b.n	8001fd4 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001fd2:	2300      	movs	r3, #0
}
 8001fd4:	0018      	movs	r0, r3
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	b002      	add	sp, #8
 8001fda:	bd80      	pop	{r7, pc}

08001fdc <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b084      	sub	sp, #16
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	60f8      	str	r0, [r7, #12]
 8001fe4:	60b9      	str	r1, [r7, #8]
 8001fe6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fec:	68ba      	ldr	r2, [r7, #8]
 8001fee:	211f      	movs	r1, #31
 8001ff0:	400a      	ands	r2, r1
 8001ff2:	210f      	movs	r1, #15
 8001ff4:	4091      	lsls	r1, r2
 8001ff6:	000a      	movs	r2, r1
 8001ff8:	43d2      	mvns	r2, r2
 8001ffa:	401a      	ands	r2, r3
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	0e9b      	lsrs	r3, r3, #26
 8002000:	210f      	movs	r1, #15
 8002002:	4019      	ands	r1, r3
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	201f      	movs	r0, #31
 8002008:	4003      	ands	r3, r0
 800200a:	4099      	lsls	r1, r3
 800200c:	000b      	movs	r3, r1
 800200e:	431a      	orrs	r2, r3
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002014:	46c0      	nop			@ (mov r8, r8)
 8002016:	46bd      	mov	sp, r7
 8002018:	b004      	add	sp, #16
 800201a:	bd80      	pop	{r7, pc}

0800201c <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b082      	sub	sp, #8
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
 8002024:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	035b      	lsls	r3, r3, #13
 800202e:	0b5b      	lsrs	r3, r3, #13
 8002030:	431a      	orrs	r2, r3
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002036:	46c0      	nop			@ (mov r8, r8)
 8002038:	46bd      	mov	sp, r7
 800203a:	b002      	add	sp, #8
 800203c:	bd80      	pop	{r7, pc}

0800203e <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 800203e:	b580      	push	{r7, lr}
 8002040:	b082      	sub	sp, #8
 8002042:	af00      	add	r7, sp, #0
 8002044:	6078      	str	r0, [r7, #4]
 8002046:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800204c:	683a      	ldr	r2, [r7, #0]
 800204e:	0352      	lsls	r2, r2, #13
 8002050:	0b52      	lsrs	r2, r2, #13
 8002052:	43d2      	mvns	r2, r2
 8002054:	401a      	ands	r2, r3
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800205a:	46c0      	nop			@ (mov r8, r8)
 800205c:	46bd      	mov	sp, r7
 800205e:	b002      	add	sp, #8
 8002060:	bd80      	pop	{r7, pc}
	...

08002064 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b084      	sub	sp, #16
 8002068:	af00      	add	r7, sp, #0
 800206a:	60f8      	str	r0, [r7, #12]
 800206c:	60b9      	str	r1, [r7, #8]
 800206e:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	695b      	ldr	r3, [r3, #20]
 8002074:	68ba      	ldr	r2, [r7, #8]
 8002076:	0212      	lsls	r2, r2, #8
 8002078:	43d2      	mvns	r2, r2
 800207a:	401a      	ands	r2, r3
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	021b      	lsls	r3, r3, #8
 8002080:	6879      	ldr	r1, [r7, #4]
 8002082:	400b      	ands	r3, r1
 8002084:	4904      	ldr	r1, [pc, #16]	@ (8002098 <LL_ADC_SetChannelSamplingTime+0x34>)
 8002086:	400b      	ands	r3, r1
 8002088:	431a      	orrs	r2, r3
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 800208e:	46c0      	nop			@ (mov r8, r8)
 8002090:	46bd      	mov	sp, r7
 8002092:	b004      	add	sp, #16
 8002094:	bd80      	pop	{r7, pc}
 8002096:	46c0      	nop			@ (mov r8, r8)
 8002098:	07ffff00 	.word	0x07ffff00

0800209c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b082      	sub	sp, #8
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	689b      	ldr	r3, [r3, #8]
 80020a8:	4a05      	ldr	r2, [pc, #20]	@ (80020c0 <LL_ADC_EnableInternalRegulator+0x24>)
 80020aa:	4013      	ands	r3, r2
 80020ac:	2280      	movs	r2, #128	@ 0x80
 80020ae:	0552      	lsls	r2, r2, #21
 80020b0:	431a      	orrs	r2, r3
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80020b6:	46c0      	nop			@ (mov r8, r8)
 80020b8:	46bd      	mov	sp, r7
 80020ba:	b002      	add	sp, #8
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	46c0      	nop			@ (mov r8, r8)
 80020c0:	6fffffe8 	.word	0x6fffffe8

080020c4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b082      	sub	sp, #8
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	689a      	ldr	r2, [r3, #8]
 80020d0:	2380      	movs	r3, #128	@ 0x80
 80020d2:	055b      	lsls	r3, r3, #21
 80020d4:	401a      	ands	r2, r3
 80020d6:	2380      	movs	r3, #128	@ 0x80
 80020d8:	055b      	lsls	r3, r3, #21
 80020da:	429a      	cmp	r2, r3
 80020dc:	d101      	bne.n	80020e2 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 80020de:	2301      	movs	r3, #1
 80020e0:	e000      	b.n	80020e4 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 80020e2:	2300      	movs	r3, #0
}
 80020e4:	0018      	movs	r0, r3
 80020e6:	46bd      	mov	sp, r7
 80020e8:	b002      	add	sp, #8
 80020ea:	bd80      	pop	{r7, pc}

080020ec <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b082      	sub	sp, #8
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	689b      	ldr	r3, [r3, #8]
 80020f8:	4a04      	ldr	r2, [pc, #16]	@ (800210c <LL_ADC_Enable+0x20>)
 80020fa:	4013      	ands	r3, r2
 80020fc:	2201      	movs	r2, #1
 80020fe:	431a      	orrs	r2, r3
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002104:	46c0      	nop			@ (mov r8, r8)
 8002106:	46bd      	mov	sp, r7
 8002108:	b002      	add	sp, #8
 800210a:	bd80      	pop	{r7, pc}
 800210c:	7fffffe8 	.word	0x7fffffe8

08002110 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b082      	sub	sp, #8
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	689b      	ldr	r3, [r3, #8]
 800211c:	4a04      	ldr	r2, [pc, #16]	@ (8002130 <LL_ADC_Disable+0x20>)
 800211e:	4013      	ands	r3, r2
 8002120:	2202      	movs	r2, #2
 8002122:	431a      	orrs	r2, r3
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002128:	46c0      	nop			@ (mov r8, r8)
 800212a:	46bd      	mov	sp, r7
 800212c:	b002      	add	sp, #8
 800212e:	bd80      	pop	{r7, pc}
 8002130:	7fffffe8 	.word	0x7fffffe8

08002134 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b082      	sub	sp, #8
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	2201      	movs	r2, #1
 8002142:	4013      	ands	r3, r2
 8002144:	2b01      	cmp	r3, #1
 8002146:	d101      	bne.n	800214c <LL_ADC_IsEnabled+0x18>
 8002148:	2301      	movs	r3, #1
 800214a:	e000      	b.n	800214e <LL_ADC_IsEnabled+0x1a>
 800214c:	2300      	movs	r3, #0
}
 800214e:	0018      	movs	r0, r3
 8002150:	46bd      	mov	sp, r7
 8002152:	b002      	add	sp, #8
 8002154:	bd80      	pop	{r7, pc}

08002156 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8002156:	b580      	push	{r7, lr}
 8002158:	b082      	sub	sp, #8
 800215a:	af00      	add	r7, sp, #0
 800215c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	2202      	movs	r2, #2
 8002164:	4013      	ands	r3, r2
 8002166:	2b02      	cmp	r3, #2
 8002168:	d101      	bne.n	800216e <LL_ADC_IsDisableOngoing+0x18>
 800216a:	2301      	movs	r3, #1
 800216c:	e000      	b.n	8002170 <LL_ADC_IsDisableOngoing+0x1a>
 800216e:	2300      	movs	r3, #0
}
 8002170:	0018      	movs	r0, r3
 8002172:	46bd      	mov	sp, r7
 8002174:	b002      	add	sp, #8
 8002176:	bd80      	pop	{r7, pc}

08002178 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b082      	sub	sp, #8
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	689b      	ldr	r3, [r3, #8]
 8002184:	4a04      	ldr	r2, [pc, #16]	@ (8002198 <LL_ADC_REG_StartConversion+0x20>)
 8002186:	4013      	ands	r3, r2
 8002188:	2204      	movs	r2, #4
 800218a:	431a      	orrs	r2, r3
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002190:	46c0      	nop			@ (mov r8, r8)
 8002192:	46bd      	mov	sp, r7
 8002194:	b002      	add	sp, #8
 8002196:	bd80      	pop	{r7, pc}
 8002198:	7fffffe8 	.word	0x7fffffe8

0800219c <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b082      	sub	sp, #8
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	4a04      	ldr	r2, [pc, #16]	@ (80021bc <LL_ADC_REG_StopConversion+0x20>)
 80021aa:	4013      	ands	r3, r2
 80021ac:	2210      	movs	r2, #16
 80021ae:	431a      	orrs	r2, r3
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80021b4:	46c0      	nop			@ (mov r8, r8)
 80021b6:	46bd      	mov	sp, r7
 80021b8:	b002      	add	sp, #8
 80021ba:	bd80      	pop	{r7, pc}
 80021bc:	7fffffe8 	.word	0x7fffffe8

080021c0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b082      	sub	sp, #8
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	2204      	movs	r2, #4
 80021ce:	4013      	ands	r3, r2
 80021d0:	2b04      	cmp	r3, #4
 80021d2:	d101      	bne.n	80021d8 <LL_ADC_REG_IsConversionOngoing+0x18>
 80021d4:	2301      	movs	r3, #1
 80021d6:	e000      	b.n	80021da <LL_ADC_REG_IsConversionOngoing+0x1a>
 80021d8:	2300      	movs	r3, #0
}
 80021da:	0018      	movs	r0, r3
 80021dc:	46bd      	mov	sp, r7
 80021de:	b002      	add	sp, #8
 80021e0:	bd80      	pop	{r7, pc}
	...

080021e4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b088      	sub	sp, #32
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021ec:	231f      	movs	r3, #31
 80021ee:	18fb      	adds	r3, r7, r3
 80021f0:	2200      	movs	r2, #0
 80021f2:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 80021f4:	2300      	movs	r3, #0
 80021f6:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 80021f8:	2300      	movs	r3, #0
 80021fa:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80021fc:	2300      	movs	r3, #0
 80021fe:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d101      	bne.n	800220a <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	e17f      	b.n	800250a <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800220e:	2b00      	cmp	r3, #0
 8002210:	d10a      	bne.n	8002228 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	0018      	movs	r0, r3
 8002216:	f7ff fd0f 	bl	8001c38 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2200      	movs	r2, #0
 800221e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2254      	movs	r2, #84	@ 0x54
 8002224:	2100      	movs	r1, #0
 8002226:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	0018      	movs	r0, r3
 800222e:	f7ff ff49 	bl	80020c4 <LL_ADC_IsInternalRegulatorEnabled>
 8002232:	1e03      	subs	r3, r0, #0
 8002234:	d115      	bne.n	8002262 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	0018      	movs	r0, r3
 800223c:	f7ff ff2e 	bl	800209c <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002240:	4bb4      	ldr	r3, [pc, #720]	@ (8002514 <HAL_ADC_Init+0x330>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	49b4      	ldr	r1, [pc, #720]	@ (8002518 <HAL_ADC_Init+0x334>)
 8002246:	0018      	movs	r0, r3
 8002248:	f7fd ff5a 	bl	8000100 <__udivsi3>
 800224c:	0003      	movs	r3, r0
 800224e:	3301      	adds	r3, #1
 8002250:	005b      	lsls	r3, r3, #1
 8002252:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002254:	e002      	b.n	800225c <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	3b01      	subs	r3, #1
 800225a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d1f9      	bne.n	8002256 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	0018      	movs	r0, r3
 8002268:	f7ff ff2c 	bl	80020c4 <LL_ADC_IsInternalRegulatorEnabled>
 800226c:	1e03      	subs	r3, r0, #0
 800226e:	d10f      	bne.n	8002290 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002274:	2210      	movs	r2, #16
 8002276:	431a      	orrs	r2, r3
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002280:	2201      	movs	r2, #1
 8002282:	431a      	orrs	r2, r3
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002288:	231f      	movs	r3, #31
 800228a:	18fb      	adds	r3, r7, r3
 800228c:	2201      	movs	r2, #1
 800228e:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	0018      	movs	r0, r3
 8002296:	f7ff ff93 	bl	80021c0 <LL_ADC_REG_IsConversionOngoing>
 800229a:	0003      	movs	r3, r0
 800229c:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022a2:	2210      	movs	r2, #16
 80022a4:	4013      	ands	r3, r2
 80022a6:	d000      	beq.n	80022aa <HAL_ADC_Init+0xc6>
 80022a8:	e122      	b.n	80024f0 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d000      	beq.n	80022b2 <HAL_ADC_Init+0xce>
 80022b0:	e11e      	b.n	80024f0 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022b6:	4a99      	ldr	r2, [pc, #612]	@ (800251c <HAL_ADC_Init+0x338>)
 80022b8:	4013      	ands	r3, r2
 80022ba:	2202      	movs	r2, #2
 80022bc:	431a      	orrs	r2, r3
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	0018      	movs	r0, r3
 80022c8:	f7ff ff34 	bl	8002134 <LL_ADC_IsEnabled>
 80022cc:	1e03      	subs	r3, r0, #0
 80022ce:	d000      	beq.n	80022d2 <HAL_ADC_Init+0xee>
 80022d0:	e0ad      	b.n	800242e <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	7e1b      	ldrb	r3, [r3, #24]
 80022da:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 80022dc:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	7e5b      	ldrb	r3, [r3, #25]
 80022e2:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80022e4:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	7e9b      	ldrb	r3, [r3, #26]
 80022ea:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80022ec:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d002      	beq.n	80022fc <HAL_ADC_Init+0x118>
 80022f6:	2380      	movs	r3, #128	@ 0x80
 80022f8:	015b      	lsls	r3, r3, #5
 80022fa:	e000      	b.n	80022fe <HAL_ADC_Init+0x11a>
 80022fc:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80022fe:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002304:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	691b      	ldr	r3, [r3, #16]
 800230a:	2b00      	cmp	r3, #0
 800230c:	da04      	bge.n	8002318 <HAL_ADC_Init+0x134>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	691b      	ldr	r3, [r3, #16]
 8002312:	005b      	lsls	r3, r3, #1
 8002314:	085b      	lsrs	r3, r3, #1
 8002316:	e001      	b.n	800231c <HAL_ADC_Init+0x138>
 8002318:	2380      	movs	r3, #128	@ 0x80
 800231a:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 800231c:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	212c      	movs	r1, #44	@ 0x2c
 8002322:	5c5b      	ldrb	r3, [r3, r1]
 8002324:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002326:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8002328:	69ba      	ldr	r2, [r7, #24]
 800232a:	4313      	orrs	r3, r2
 800232c:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2220      	movs	r2, #32
 8002332:	5c9b      	ldrb	r3, [r3, r2]
 8002334:	2b01      	cmp	r3, #1
 8002336:	d115      	bne.n	8002364 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	7e9b      	ldrb	r3, [r3, #26]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d105      	bne.n	800234c <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 8002340:	69bb      	ldr	r3, [r7, #24]
 8002342:	2280      	movs	r2, #128	@ 0x80
 8002344:	0252      	lsls	r2, r2, #9
 8002346:	4313      	orrs	r3, r2
 8002348:	61bb      	str	r3, [r7, #24]
 800234a:	e00b      	b.n	8002364 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002350:	2220      	movs	r2, #32
 8002352:	431a      	orrs	r2, r3
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800235c:	2201      	movs	r2, #1
 800235e:	431a      	orrs	r2, r3
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002368:	2b00      	cmp	r3, #0
 800236a:	d00a      	beq.n	8002382 <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002370:	23e0      	movs	r3, #224	@ 0xe0
 8002372:	005b      	lsls	r3, r3, #1
 8002374:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800237a:	4313      	orrs	r3, r2
 800237c:	69ba      	ldr	r2, [r7, #24]
 800237e:	4313      	orrs	r3, r2
 8002380:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	68db      	ldr	r3, [r3, #12]
 8002388:	4a65      	ldr	r2, [pc, #404]	@ (8002520 <HAL_ADC_Init+0x33c>)
 800238a:	4013      	ands	r3, r2
 800238c:	0019      	movs	r1, r3
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	69ba      	ldr	r2, [r7, #24]
 8002394:	430a      	orrs	r2, r1
 8002396:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	0f9b      	lsrs	r3, r3, #30
 800239e:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80023a4:	4313      	orrs	r3, r2
 80023a6:	697a      	ldr	r2, [r7, #20]
 80023a8:	4313      	orrs	r3, r2
 80023aa:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	223c      	movs	r2, #60	@ 0x3c
 80023b0:	5c9b      	ldrb	r3, [r3, r2]
 80023b2:	2b01      	cmp	r3, #1
 80023b4:	d111      	bne.n	80023da <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	0f9b      	lsrs	r3, r3, #30
 80023bc:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80023c2:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                      hadc->Init.Oversampling.Ratio         |
 80023c8:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                      hadc->Init.Oversampling.RightBitShift |
 80023ce:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	4313      	orrs	r3, r2
 80023d4:	2201      	movs	r2, #1
 80023d6:	4313      	orrs	r3, r2
 80023d8:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	691b      	ldr	r3, [r3, #16]
 80023e0:	4a50      	ldr	r2, [pc, #320]	@ (8002524 <HAL_ADC_Init+0x340>)
 80023e2:	4013      	ands	r3, r2
 80023e4:	0019      	movs	r1, r3
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	697a      	ldr	r2, [r7, #20]
 80023ec:	430a      	orrs	r2, r1
 80023ee:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	685a      	ldr	r2, [r3, #4]
 80023f4:	23c0      	movs	r3, #192	@ 0xc0
 80023f6:	061b      	lsls	r3, r3, #24
 80023f8:	429a      	cmp	r2, r3
 80023fa:	d018      	beq.n	800242e <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002400:	2380      	movs	r3, #128	@ 0x80
 8002402:	05db      	lsls	r3, r3, #23
 8002404:	429a      	cmp	r2, r3
 8002406:	d012      	beq.n	800242e <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800240c:	2380      	movs	r3, #128	@ 0x80
 800240e:	061b      	lsls	r3, r3, #24
 8002410:	429a      	cmp	r2, r3
 8002412:	d00c      	beq.n	800242e <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8002414:	4b44      	ldr	r3, [pc, #272]	@ (8002528 <HAL_ADC_Init+0x344>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a44      	ldr	r2, [pc, #272]	@ (800252c <HAL_ADC_Init+0x348>)
 800241a:	4013      	ands	r3, r2
 800241c:	0019      	movs	r1, r3
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	685a      	ldr	r2, [r3, #4]
 8002422:	23f0      	movs	r3, #240	@ 0xf0
 8002424:	039b      	lsls	r3, r3, #14
 8002426:	401a      	ands	r2, r3
 8002428:	4b3f      	ldr	r3, [pc, #252]	@ (8002528 <HAL_ADC_Init+0x344>)
 800242a:	430a      	orrs	r2, r1
 800242c:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6818      	ldr	r0, [r3, #0]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002436:	001a      	movs	r2, r3
 8002438:	2100      	movs	r1, #0
 800243a:	f7ff fd8a 	bl	8001f52 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6818      	ldr	r0, [r3, #0]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002446:	493a      	ldr	r1, [pc, #232]	@ (8002530 <HAL_ADC_Init+0x34c>)
 8002448:	001a      	movs	r2, r3
 800244a:	f7ff fd82 	bl	8001f52 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	691b      	ldr	r3, [r3, #16]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d109      	bne.n	800246a <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	2110      	movs	r1, #16
 8002462:	4249      	negs	r1, r1
 8002464:	430a      	orrs	r2, r1
 8002466:	629a      	str	r2, [r3, #40]	@ 0x28
 8002468:	e018      	b.n	800249c <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	691a      	ldr	r2, [r3, #16]
 800246e:	2380      	movs	r3, #128	@ 0x80
 8002470:	039b      	lsls	r3, r3, #14
 8002472:	429a      	cmp	r2, r3
 8002474:	d112      	bne.n	800249c <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	69db      	ldr	r3, [r3, #28]
 8002480:	3b01      	subs	r3, #1
 8002482:	009b      	lsls	r3, r3, #2
 8002484:	221c      	movs	r2, #28
 8002486:	4013      	ands	r3, r2
 8002488:	2210      	movs	r2, #16
 800248a:	4252      	negs	r2, r2
 800248c:	409a      	lsls	r2, r3
 800248e:	0011      	movs	r1, r2
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	430a      	orrs	r2, r1
 800249a:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	2100      	movs	r1, #0
 80024a2:	0018      	movs	r0, r3
 80024a4:	f7ff fd72 	bl	8001f8c <LL_ADC_GetSamplingTimeCommonChannels>
 80024a8:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80024ae:	429a      	cmp	r2, r3
 80024b0:	d10b      	bne.n	80024ca <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2200      	movs	r2, #0
 80024b6:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024bc:	2203      	movs	r2, #3
 80024be:	4393      	bics	r3, r2
 80024c0:	2201      	movs	r2, #1
 80024c2:	431a      	orrs	r2, r3
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80024c8:	e01c      	b.n	8002504 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024ce:	2212      	movs	r2, #18
 80024d0:	4393      	bics	r3, r2
 80024d2:	2210      	movs	r2, #16
 80024d4:	431a      	orrs	r2, r3
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024de:	2201      	movs	r2, #1
 80024e0:	431a      	orrs	r2, r3
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 80024e6:	231f      	movs	r3, #31
 80024e8:	18fb      	adds	r3, r7, r3
 80024ea:	2201      	movs	r2, #1
 80024ec:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80024ee:	e009      	b.n	8002504 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024f4:	2210      	movs	r2, #16
 80024f6:	431a      	orrs	r2, r3
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80024fc:	231f      	movs	r3, #31
 80024fe:	18fb      	adds	r3, r7, r3
 8002500:	2201      	movs	r2, #1
 8002502:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8002504:	231f      	movs	r3, #31
 8002506:	18fb      	adds	r3, r7, r3
 8002508:	781b      	ldrb	r3, [r3, #0]
}
 800250a:	0018      	movs	r0, r3
 800250c:	46bd      	mov	sp, r7
 800250e:	b008      	add	sp, #32
 8002510:	bd80      	pop	{r7, pc}
 8002512:	46c0      	nop			@ (mov r8, r8)
 8002514:	20000000 	.word	0x20000000
 8002518:	00030d40 	.word	0x00030d40
 800251c:	fffffefd 	.word	0xfffffefd
 8002520:	ffde0201 	.word	0xffde0201
 8002524:	1ffffc02 	.word	0x1ffffc02
 8002528:	40012708 	.word	0x40012708
 800252c:	ffc3ffff 	.word	0xffc3ffff
 8002530:	07ffff04 	.word	0x07ffff04

08002534 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002534:	b5b0      	push	{r4, r5, r7, lr}
 8002536:	b084      	sub	sp, #16
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	0018      	movs	r0, r3
 8002542:	f7ff fe3d 	bl	80021c0 <LL_ADC_REG_IsConversionOngoing>
 8002546:	1e03      	subs	r3, r0, #0
 8002548:	d135      	bne.n	80025b6 <HAL_ADC_Start+0x82>
  {
    __HAL_LOCK(hadc);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2254      	movs	r2, #84	@ 0x54
 800254e:	5c9b      	ldrb	r3, [r3, r2]
 8002550:	2b01      	cmp	r3, #1
 8002552:	d101      	bne.n	8002558 <HAL_ADC_Start+0x24>
 8002554:	2302      	movs	r3, #2
 8002556:	e035      	b.n	80025c4 <HAL_ADC_Start+0x90>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2254      	movs	r2, #84	@ 0x54
 800255c:	2101      	movs	r1, #1
 800255e:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002560:	250f      	movs	r5, #15
 8002562:	197c      	adds	r4, r7, r5
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	0018      	movs	r0, r3
 8002568:	f000 fc38 	bl	8002ddc <ADC_Enable>
 800256c:	0003      	movs	r3, r0
 800256e:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002570:	197b      	adds	r3, r7, r5
 8002572:	781b      	ldrb	r3, [r3, #0]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d119      	bne.n	80025ac <HAL_ADC_Start+0x78>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800257c:	4a13      	ldr	r2, [pc, #76]	@ (80025cc <HAL_ADC_Start+0x98>)
 800257e:	4013      	ands	r3, r2
 8002580:	2280      	movs	r2, #128	@ 0x80
 8002582:	0052      	lsls	r2, r2, #1
 8002584:	431a      	orrs	r2, r3
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2200      	movs	r2, #0
 800258e:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	221c      	movs	r2, #28
 8002596:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2254      	movs	r2, #84	@ 0x54
 800259c:	2100      	movs	r1, #0
 800259e:	5499      	strb	r1, [r3, r2]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	0018      	movs	r0, r3
 80025a6:	f7ff fde7 	bl	8002178 <LL_ADC_REG_StartConversion>
 80025aa:	e008      	b.n	80025be <HAL_ADC_Start+0x8a>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2254      	movs	r2, #84	@ 0x54
 80025b0:	2100      	movs	r1, #0
 80025b2:	5499      	strb	r1, [r3, r2]
 80025b4:	e003      	b.n	80025be <HAL_ADC_Start+0x8a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80025b6:	230f      	movs	r3, #15
 80025b8:	18fb      	adds	r3, r7, r3
 80025ba:	2202      	movs	r2, #2
 80025bc:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 80025be:	230f      	movs	r3, #15
 80025c0:	18fb      	adds	r3, r7, r3
 80025c2:	781b      	ldrb	r3, [r3, #0]
}
 80025c4:	0018      	movs	r0, r3
 80025c6:	46bd      	mov	sp, r7
 80025c8:	b004      	add	sp, #16
 80025ca:	bdb0      	pop	{r4, r5, r7, pc}
 80025cc:	fffff0fe 	.word	0xfffff0fe

080025d0 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80025d0:	b5b0      	push	{r4, r5, r7, lr}
 80025d2:	b084      	sub	sp, #16
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2254      	movs	r2, #84	@ 0x54
 80025dc:	5c9b      	ldrb	r3, [r3, r2]
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d101      	bne.n	80025e6 <HAL_ADC_Stop+0x16>
 80025e2:	2302      	movs	r3, #2
 80025e4:	e029      	b.n	800263a <HAL_ADC_Stop+0x6a>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2254      	movs	r2, #84	@ 0x54
 80025ea:	2101      	movs	r1, #1
 80025ec:	5499      	strb	r1, [r3, r2]

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 80025ee:	250f      	movs	r5, #15
 80025f0:	197c      	adds	r4, r7, r5
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	0018      	movs	r0, r3
 80025f6:	f000 fbaf 	bl	8002d58 <ADC_ConversionStop>
 80025fa:	0003      	movs	r3, r0
 80025fc:	7023      	strb	r3, [r4, #0]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80025fe:	197b      	adds	r3, r7, r5
 8002600:	781b      	ldrb	r3, [r3, #0]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d112      	bne.n	800262c <HAL_ADC_Stop+0x5c>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8002606:	197c      	adds	r4, r7, r5
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	0018      	movs	r0, r3
 800260c:	f000 fc6c 	bl	8002ee8 <ADC_Disable>
 8002610:	0003      	movs	r3, r0
 8002612:	7023      	strb	r3, [r4, #0]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002614:	197b      	adds	r3, r7, r5
 8002616:	781b      	ldrb	r3, [r3, #0]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d107      	bne.n	800262c <HAL_ADC_Stop+0x5c>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002620:	4a08      	ldr	r2, [pc, #32]	@ (8002644 <HAL_ADC_Stop+0x74>)
 8002622:	4013      	ands	r3, r2
 8002624:	2201      	movs	r2, #1
 8002626:	431a      	orrs	r2, r3
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }
  }

  __HAL_UNLOCK(hadc);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2254      	movs	r2, #84	@ 0x54
 8002630:	2100      	movs	r1, #0
 8002632:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8002634:	230f      	movs	r3, #15
 8002636:	18fb      	adds	r3, r7, r3
 8002638:	781b      	ldrb	r3, [r3, #0]
}
 800263a:	0018      	movs	r0, r3
 800263c:	46bd      	mov	sp, r7
 800263e:	b004      	add	sp, #16
 8002640:	bdb0      	pop	{r4, r5, r7, pc}
 8002642:	46c0      	nop			@ (mov r8, r8)
 8002644:	fffffefe 	.word	0xfffffefe

08002648 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b084      	sub	sp, #16
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
 8002650:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	695b      	ldr	r3, [r3, #20]
 8002656:	2b08      	cmp	r3, #8
 8002658:	d102      	bne.n	8002660 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 800265a:	2308      	movs	r3, #8
 800265c:	60fb      	str	r3, [r7, #12]
 800265e:	e00f      	b.n	8002680 <HAL_ADC_PollForConversion+0x38>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	68db      	ldr	r3, [r3, #12]
 8002666:	2201      	movs	r2, #1
 8002668:	4013      	ands	r3, r2
 800266a:	d007      	beq.n	800267c <HAL_ADC_PollForConversion+0x34>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002670:	2220      	movs	r2, #32
 8002672:	431a      	orrs	r2, r3
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8002678:	2301      	movs	r3, #1
 800267a:	e072      	b.n	8002762 <HAL_ADC_PollForConversion+0x11a>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 800267c:	2304      	movs	r3, #4
 800267e:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002680:	f7ff fc3c 	bl	8001efc <HAL_GetTick>
 8002684:	0003      	movs	r3, r0
 8002686:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8002688:	e01f      	b.n	80026ca <HAL_ADC_PollForConversion+0x82>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	3301      	adds	r3, #1
 800268e:	d01c      	beq.n	80026ca <HAL_ADC_PollForConversion+0x82>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002690:	f7ff fc34 	bl	8001efc <HAL_GetTick>
 8002694:	0002      	movs	r2, r0
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	1ad3      	subs	r3, r2, r3
 800269a:	683a      	ldr	r2, [r7, #0]
 800269c:	429a      	cmp	r2, r3
 800269e:	d302      	bcc.n	80026a6 <HAL_ADC_PollForConversion+0x5e>
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d111      	bne.n	80026ca <HAL_ADC_PollForConversion+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	68fa      	ldr	r2, [r7, #12]
 80026ae:	4013      	ands	r3, r2
 80026b0:	d10b      	bne.n	80026ca <HAL_ADC_PollForConversion+0x82>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026b6:	2204      	movs	r2, #4
 80026b8:	431a      	orrs	r2, r3
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	659a      	str	r2, [r3, #88]	@ 0x58

          __HAL_UNLOCK(hadc);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2254      	movs	r2, #84	@ 0x54
 80026c2:	2100      	movs	r1, #0
 80026c4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80026c6:	2303      	movs	r3, #3
 80026c8:	e04b      	b.n	8002762 <HAL_ADC_PollForConversion+0x11a>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	68fa      	ldr	r2, [r7, #12]
 80026d2:	4013      	ands	r3, r2
 80026d4:	d0d9      	beq.n	800268a <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026da:	2280      	movs	r2, #128	@ 0x80
 80026dc:	0092      	lsls	r2, r2, #2
 80026de:	431a      	orrs	r2, r3
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	0018      	movs	r0, r3
 80026ea:	f7ff fc66 	bl	8001fba <LL_ADC_REG_IsTriggerSourceSWStart>
 80026ee:	1e03      	subs	r3, r0, #0
 80026f0:	d02e      	beq.n	8002750 <HAL_ADC_PollForConversion+0x108>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	7e9b      	ldrb	r3, [r3, #26]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d12a      	bne.n	8002750 <HAL_ADC_PollForConversion+0x108>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	2208      	movs	r2, #8
 8002702:	4013      	ands	r3, r2
 8002704:	2b08      	cmp	r3, #8
 8002706:	d123      	bne.n	8002750 <HAL_ADC_PollForConversion+0x108>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	0018      	movs	r0, r3
 800270e:	f7ff fd57 	bl	80021c0 <LL_ADC_REG_IsConversionOngoing>
 8002712:	1e03      	subs	r3, r0, #0
 8002714:	d110      	bne.n	8002738 <HAL_ADC_PollForConversion+0xf0>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	685a      	ldr	r2, [r3, #4]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	210c      	movs	r1, #12
 8002722:	438a      	bics	r2, r1
 8002724:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800272a:	4a10      	ldr	r2, [pc, #64]	@ (800276c <HAL_ADC_PollForConversion+0x124>)
 800272c:	4013      	ands	r3, r2
 800272e:	2201      	movs	r2, #1
 8002730:	431a      	orrs	r2, r3
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	659a      	str	r2, [r3, #88]	@ 0x58
 8002736:	e00b      	b.n	8002750 <HAL_ADC_PollForConversion+0x108>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800273c:	2220      	movs	r2, #32
 800273e:	431a      	orrs	r2, r3
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002748:	2201      	movs	r2, #1
 800274a:	431a      	orrs	r2, r3
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	7e1b      	ldrb	r3, [r3, #24]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d103      	bne.n	8002760 <HAL_ADC_PollForConversion+0x118>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	220c      	movs	r2, #12
 800275e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002760:	2300      	movs	r3, #0
}
 8002762:	0018      	movs	r0, r3
 8002764:	46bd      	mov	sp, r7
 8002766:	b004      	add	sp, #16
 8002768:	bd80      	pop	{r7, pc}
 800276a:	46c0      	nop			@ (mov r8, r8)
 800276c:	fffffefe 	.word	0xfffffefe

08002770 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002770:	b5b0      	push	{r4, r5, r7, lr}
 8002772:	b086      	sub	sp, #24
 8002774:	af00      	add	r7, sp, #0
 8002776:	60f8      	str	r0, [r7, #12]
 8002778:	60b9      	str	r1, [r7, #8]
 800277a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	0018      	movs	r0, r3
 8002782:	f7ff fd1d 	bl	80021c0 <LL_ADC_REG_IsConversionOngoing>
 8002786:	1e03      	subs	r3, r0, #0
 8002788:	d16c      	bne.n	8002864 <HAL_ADC_Start_DMA+0xf4>
  {
    __HAL_LOCK(hadc);
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	2254      	movs	r2, #84	@ 0x54
 800278e:	5c9b      	ldrb	r3, [r3, r2]
 8002790:	2b01      	cmp	r3, #1
 8002792:	d101      	bne.n	8002798 <HAL_ADC_Start_DMA+0x28>
 8002794:	2302      	movs	r3, #2
 8002796:	e06c      	b.n	8002872 <HAL_ADC_Start_DMA+0x102>
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	2254      	movs	r2, #84	@ 0x54
 800279c:	2101      	movs	r1, #1
 800279e:	5499      	strb	r1, [r3, r2]

    /* Specific case for first call occurrence of this function (DMA transfer */
    /* not activated and ADC disabled), DMA transfer must be activated        */
    /* with ADC disabled.                                                     */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	68db      	ldr	r3, [r3, #12]
 80027a6:	2201      	movs	r2, #1
 80027a8:	4013      	ands	r3, r2
 80027aa:	d113      	bne.n	80027d4 <HAL_ADC_Start_DMA+0x64>
    {
      if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	0018      	movs	r0, r3
 80027b2:	f7ff fcbf 	bl	8002134 <LL_ADC_IsEnabled>
 80027b6:	1e03      	subs	r3, r0, #0
 80027b8:	d004      	beq.n	80027c4 <HAL_ADC_Start_DMA+0x54>
      {
        /* Disable ADC */
        LL_ADC_Disable(hadc->Instance);
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	0018      	movs	r0, r3
 80027c0:	f7ff fca6 	bl	8002110 <LL_ADC_Disable>
      }

      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	68da      	ldr	r2, [r3, #12]
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	2101      	movs	r1, #1
 80027d0:	430a      	orrs	r2, r1
 80027d2:	60da      	str	r2, [r3, #12]
    }

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80027d4:	2517      	movs	r5, #23
 80027d6:	197c      	adds	r4, r7, r5
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	0018      	movs	r0, r3
 80027dc:	f000 fafe 	bl	8002ddc <ADC_Enable>
 80027e0:	0003      	movs	r3, r0
 80027e2:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80027e4:	002c      	movs	r4, r5
 80027e6:	193b      	adds	r3, r7, r4
 80027e8:	781b      	ldrb	r3, [r3, #0]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d13e      	bne.n	800286c <HAL_ADC_Start_DMA+0xfc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027f2:	4a22      	ldr	r2, [pc, #136]	@ (800287c <HAL_ADC_Start_DMA+0x10c>)
 80027f4:	4013      	ands	r3, r2
 80027f6:	2280      	movs	r2, #128	@ 0x80
 80027f8:	0052      	lsls	r2, r2, #1
 80027fa:	431a      	orrs	r2, r3
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	2200      	movs	r2, #0
 8002804:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800280a:	4a1d      	ldr	r2, [pc, #116]	@ (8002880 <HAL_ADC_Start_DMA+0x110>)
 800280c:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002812:	4a1c      	ldr	r2, [pc, #112]	@ (8002884 <HAL_ADC_Start_DMA+0x114>)
 8002814:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800281a:	4a1b      	ldr	r2, [pc, #108]	@ (8002888 <HAL_ADC_Start_DMA+0x118>)
 800281c:	635a      	str	r2, [r3, #52]	@ 0x34
      /* start (in case of SW start):                                         */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	221c      	movs	r2, #28
 8002824:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	2254      	movs	r2, #84	@ 0x54
 800282a:	2100      	movs	r1, #0
 800282c:	5499      	strb	r1, [r3, r2]

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	685a      	ldr	r2, [r3, #4]
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	2110      	movs	r1, #16
 800283a:	430a      	orrs	r2, r1
 800283c:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	3340      	adds	r3, #64	@ 0x40
 8002848:	0019      	movs	r1, r3
 800284a:	68ba      	ldr	r2, [r7, #8]
 800284c:	193c      	adds	r4, r7, r4
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	f000 ff32 	bl	80036b8 <HAL_DMA_Start_IT>
 8002854:	0003      	movs	r3, r0
 8002856:	7023      	strb	r3, [r4, #0]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	0018      	movs	r0, r3
 800285e:	f7ff fc8b 	bl	8002178 <LL_ADC_REG_StartConversion>
 8002862:	e003      	b.n	800286c <HAL_ADC_Start_DMA+0xfc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002864:	2317      	movs	r3, #23
 8002866:	18fb      	adds	r3, r7, r3
 8002868:	2202      	movs	r2, #2
 800286a:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 800286c:	2317      	movs	r3, #23
 800286e:	18fb      	adds	r3, r7, r3
 8002870:	781b      	ldrb	r3, [r3, #0]
}
 8002872:	0018      	movs	r0, r3
 8002874:	46bd      	mov	sp, r7
 8002876:	b006      	add	sp, #24
 8002878:	bdb0      	pop	{r4, r5, r7, pc}
 800287a:	46c0      	nop			@ (mov r8, r8)
 800287c:	fffff0fe 	.word	0xfffff0fe
 8002880:	08002fa5 	.word	0x08002fa5
 8002884:	0800306d 	.word	0x0800306d
 8002888:	0800308b 	.word	0x0800308b

0800288c <HAL_ADC_Stop_DMA>:
  *         ADC peripheral.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 800288c:	b5b0      	push	{r4, r5, r7, lr}
 800288e:	b084      	sub	sp, #16
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2254      	movs	r2, #84	@ 0x54
 8002898:	5c9b      	ldrb	r3, [r3, r2]
 800289a:	2b01      	cmp	r3, #1
 800289c:	d101      	bne.n	80028a2 <HAL_ADC_Stop_DMA+0x16>
 800289e:	2302      	movs	r3, #2
 80028a0:	e05f      	b.n	8002962 <HAL_ADC_Stop_DMA+0xd6>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2254      	movs	r2, #84	@ 0x54
 80028a6:	2101      	movs	r1, #1
 80028a8:	5499      	strb	r1, [r3, r2]

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc);
 80028aa:	250f      	movs	r5, #15
 80028ac:	197c      	adds	r4, r7, r5
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	0018      	movs	r0, r3
 80028b2:	f000 fa51 	bl	8002d58 <ADC_ConversionStop>
 80028b6:	0003      	movs	r3, r0
 80028b8:	7023      	strb	r3, [r4, #0]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80028ba:	0029      	movs	r1, r5
 80028bc:	187b      	adds	r3, r7, r1
 80028be:	781b      	ldrb	r3, [r3, #0]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d147      	bne.n	8002954 <HAL_ADC_Stop_DMA+0xc8>
  {
    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80028c8:	2225      	movs	r2, #37	@ 0x25
 80028ca:	5c9b      	ldrb	r3, [r3, r2]
 80028cc:	b2db      	uxtb	r3, r3
 80028ce:	2b02      	cmp	r3, #2
 80028d0:	d112      	bne.n	80028f8 <HAL_ADC_Stop_DMA+0x6c>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80028d6:	000d      	movs	r5, r1
 80028d8:	187c      	adds	r4, r7, r1
 80028da:	0018      	movs	r0, r3
 80028dc:	f000 ff72 	bl	80037c4 <HAL_DMA_Abort>
 80028e0:	0003      	movs	r3, r0
 80028e2:	7023      	strb	r3, [r4, #0]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 80028e4:	197b      	adds	r3, r7, r5
 80028e6:	781b      	ldrb	r3, [r3, #0]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d005      	beq.n	80028f8 <HAL_ADC_Stop_DMA+0x6c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028f0:	2240      	movs	r2, #64	@ 0x40
 80028f2:	431a      	orrs	r2, r3
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	659a      	str	r2, [r3, #88]	@ 0x58
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	685a      	ldr	r2, [r3, #4]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	2110      	movs	r1, #16
 8002904:	438a      	bics	r2, r1
 8002906:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 8002908:	220f      	movs	r2, #15
 800290a:	18bb      	adds	r3, r7, r2
 800290c:	781b      	ldrb	r3, [r3, #0]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d107      	bne.n	8002922 <HAL_ADC_Stop_DMA+0x96>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8002912:	18bc      	adds	r4, r7, r2
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	0018      	movs	r0, r3
 8002918:	f000 fae6 	bl	8002ee8 <ADC_Disable>
 800291c:	0003      	movs	r3, r0
 800291e:	7023      	strb	r3, [r4, #0]
 8002920:	e003      	b.n	800292a <HAL_ADC_Stop_DMA+0x9e>
    }
    else
    {
      (void)ADC_Disable(hadc);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	0018      	movs	r0, r3
 8002926:	f000 fadf 	bl	8002ee8 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800292a:	230f      	movs	r3, #15
 800292c:	18fb      	adds	r3, r7, r3
 800292e:	781b      	ldrb	r3, [r3, #0]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d107      	bne.n	8002944 <HAL_ADC_Stop_DMA+0xb8>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002938:	4a0c      	ldr	r2, [pc, #48]	@ (800296c <HAL_ADC_Stop_DMA+0xe0>)
 800293a:	4013      	ands	r3, r2
 800293c:	2201      	movs	r2, #1
 800293e:	431a      	orrs	r2, r3
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }

    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	68da      	ldr	r2, [r3, #12]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	2101      	movs	r1, #1
 8002950:	438a      	bics	r2, r1
 8002952:	60da      	str	r2, [r3, #12]
  }

  __HAL_UNLOCK(hadc);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2254      	movs	r2, #84	@ 0x54
 8002958:	2100      	movs	r1, #0
 800295a:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 800295c:	230f      	movs	r3, #15
 800295e:	18fb      	adds	r3, r7, r3
 8002960:	781b      	ldrb	r3, [r3, #0]
}
 8002962:	0018      	movs	r0, r3
 8002964:	46bd      	mov	sp, r7
 8002966:	b004      	add	sp, #16
 8002968:	bdb0      	pop	{r4, r5, r7, pc}
 800296a:	46c0      	nop			@ (mov r8, r8)
 800296c:	fffffefe 	.word	0xfffffefe

08002970 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b082      	sub	sp, #8
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800297e:	0018      	movs	r0, r3
 8002980:	46bd      	mov	sp, r7
 8002982:	b002      	add	sp, #8
 8002984:	bd80      	pop	{r7, pc}

08002986 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002986:	b580      	push	{r7, lr}
 8002988:	b082      	sub	sp, #8
 800298a:	af00      	add	r7, sp, #0
 800298c:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800298e:	46c0      	nop			@ (mov r8, r8)
 8002990:	46bd      	mov	sp, r7
 8002992:	b002      	add	sp, #8
 8002994:	bd80      	pop	{r7, pc}

08002996 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002996:	b580      	push	{r7, lr}
 8002998:	b082      	sub	sp, #8
 800299a:	af00      	add	r7, sp, #0
 800299c:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800299e:	46c0      	nop			@ (mov r8, r8)
 80029a0:	46bd      	mov	sp, r7
 80029a2:	b002      	add	sp, #8
 80029a4:	bd80      	pop	{r7, pc}
	...

080029a8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b086      	sub	sp, #24
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
 80029b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80029b2:	2317      	movs	r3, #23
 80029b4:	18fb      	adds	r3, r7, r3
 80029b6:	2200      	movs	r2, #0
 80029b8:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80029ba:	2300      	movs	r3, #0
 80029bc:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2254      	movs	r2, #84	@ 0x54
 80029c2:	5c9b      	ldrb	r3, [r3, r2]
 80029c4:	2b01      	cmp	r3, #1
 80029c6:	d101      	bne.n	80029cc <HAL_ADC_ConfigChannel+0x24>
 80029c8:	2302      	movs	r3, #2
 80029ca:	e1c0      	b.n	8002d4e <HAL_ADC_ConfigChannel+0x3a6>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2254      	movs	r2, #84	@ 0x54
 80029d0:	2101      	movs	r1, #1
 80029d2:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	0018      	movs	r0, r3
 80029da:	f7ff fbf1 	bl	80021c0 <LL_ADC_REG_IsConversionOngoing>
 80029de:	1e03      	subs	r3, r0, #0
 80029e0:	d000      	beq.n	80029e4 <HAL_ADC_ConfigChannel+0x3c>
 80029e2:	e1a3      	b.n	8002d2c <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	2b02      	cmp	r3, #2
 80029ea:	d100      	bne.n	80029ee <HAL_ADC_ConfigChannel+0x46>
 80029ec:	e143      	b.n	8002c76 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	691a      	ldr	r2, [r3, #16]
 80029f2:	2380      	movs	r3, #128	@ 0x80
 80029f4:	061b      	lsls	r3, r3, #24
 80029f6:	429a      	cmp	r2, r3
 80029f8:	d004      	beq.n	8002a04 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80029fe:	4ac1      	ldr	r2, [pc, #772]	@ (8002d04 <HAL_ADC_ConfigChannel+0x35c>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d108      	bne.n	8002a16 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681a      	ldr	r2, [r3, #0]
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	0019      	movs	r1, r3
 8002a0e:	0010      	movs	r0, r2
 8002a10:	f7ff fb04 	bl	800201c <LL_ADC_REG_SetSequencerChAdd>
 8002a14:	e0c9      	b.n	8002baa <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	211f      	movs	r1, #31
 8002a20:	400b      	ands	r3, r1
 8002a22:	210f      	movs	r1, #15
 8002a24:	4099      	lsls	r1, r3
 8002a26:	000b      	movs	r3, r1
 8002a28:	43db      	mvns	r3, r3
 8002a2a:	4013      	ands	r3, r2
 8002a2c:	0019      	movs	r1, r3
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	035b      	lsls	r3, r3, #13
 8002a34:	0b5b      	lsrs	r3, r3, #13
 8002a36:	d105      	bne.n	8002a44 <HAL_ADC_ConfigChannel+0x9c>
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	0e9b      	lsrs	r3, r3, #26
 8002a3e:	221f      	movs	r2, #31
 8002a40:	4013      	ands	r3, r2
 8002a42:	e098      	b.n	8002b76 <HAL_ADC_ConfigChannel+0x1ce>
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	2201      	movs	r2, #1
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	d000      	beq.n	8002a50 <HAL_ADC_ConfigChannel+0xa8>
 8002a4e:	e091      	b.n	8002b74 <HAL_ADC_ConfigChannel+0x1cc>
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	2202      	movs	r2, #2
 8002a56:	4013      	ands	r3, r2
 8002a58:	d000      	beq.n	8002a5c <HAL_ADC_ConfigChannel+0xb4>
 8002a5a:	e089      	b.n	8002b70 <HAL_ADC_ConfigChannel+0x1c8>
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	2204      	movs	r2, #4
 8002a62:	4013      	ands	r3, r2
 8002a64:	d000      	beq.n	8002a68 <HAL_ADC_ConfigChannel+0xc0>
 8002a66:	e081      	b.n	8002b6c <HAL_ADC_ConfigChannel+0x1c4>
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	2208      	movs	r2, #8
 8002a6e:	4013      	ands	r3, r2
 8002a70:	d000      	beq.n	8002a74 <HAL_ADC_ConfigChannel+0xcc>
 8002a72:	e079      	b.n	8002b68 <HAL_ADC_ConfigChannel+0x1c0>
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	2210      	movs	r2, #16
 8002a7a:	4013      	ands	r3, r2
 8002a7c:	d000      	beq.n	8002a80 <HAL_ADC_ConfigChannel+0xd8>
 8002a7e:	e071      	b.n	8002b64 <HAL_ADC_ConfigChannel+0x1bc>
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	2220      	movs	r2, #32
 8002a86:	4013      	ands	r3, r2
 8002a88:	d000      	beq.n	8002a8c <HAL_ADC_ConfigChannel+0xe4>
 8002a8a:	e069      	b.n	8002b60 <HAL_ADC_ConfigChannel+0x1b8>
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	2240      	movs	r2, #64	@ 0x40
 8002a92:	4013      	ands	r3, r2
 8002a94:	d000      	beq.n	8002a98 <HAL_ADC_ConfigChannel+0xf0>
 8002a96:	e061      	b.n	8002b5c <HAL_ADC_ConfigChannel+0x1b4>
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	2280      	movs	r2, #128	@ 0x80
 8002a9e:	4013      	ands	r3, r2
 8002aa0:	d000      	beq.n	8002aa4 <HAL_ADC_ConfigChannel+0xfc>
 8002aa2:	e059      	b.n	8002b58 <HAL_ADC_ConfigChannel+0x1b0>
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	681a      	ldr	r2, [r3, #0]
 8002aa8:	2380      	movs	r3, #128	@ 0x80
 8002aaa:	005b      	lsls	r3, r3, #1
 8002aac:	4013      	ands	r3, r2
 8002aae:	d151      	bne.n	8002b54 <HAL_ADC_ConfigChannel+0x1ac>
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	681a      	ldr	r2, [r3, #0]
 8002ab4:	2380      	movs	r3, #128	@ 0x80
 8002ab6:	009b      	lsls	r3, r3, #2
 8002ab8:	4013      	ands	r3, r2
 8002aba:	d149      	bne.n	8002b50 <HAL_ADC_ConfigChannel+0x1a8>
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	681a      	ldr	r2, [r3, #0]
 8002ac0:	2380      	movs	r3, #128	@ 0x80
 8002ac2:	00db      	lsls	r3, r3, #3
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	d141      	bne.n	8002b4c <HAL_ADC_ConfigChannel+0x1a4>
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	681a      	ldr	r2, [r3, #0]
 8002acc:	2380      	movs	r3, #128	@ 0x80
 8002ace:	011b      	lsls	r3, r3, #4
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	d139      	bne.n	8002b48 <HAL_ADC_ConfigChannel+0x1a0>
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	681a      	ldr	r2, [r3, #0]
 8002ad8:	2380      	movs	r3, #128	@ 0x80
 8002ada:	015b      	lsls	r3, r3, #5
 8002adc:	4013      	ands	r3, r2
 8002ade:	d131      	bne.n	8002b44 <HAL_ADC_ConfigChannel+0x19c>
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	681a      	ldr	r2, [r3, #0]
 8002ae4:	2380      	movs	r3, #128	@ 0x80
 8002ae6:	019b      	lsls	r3, r3, #6
 8002ae8:	4013      	ands	r3, r2
 8002aea:	d129      	bne.n	8002b40 <HAL_ADC_ConfigChannel+0x198>
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	681a      	ldr	r2, [r3, #0]
 8002af0:	2380      	movs	r3, #128	@ 0x80
 8002af2:	01db      	lsls	r3, r3, #7
 8002af4:	4013      	ands	r3, r2
 8002af6:	d121      	bne.n	8002b3c <HAL_ADC_ConfigChannel+0x194>
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	681a      	ldr	r2, [r3, #0]
 8002afc:	2380      	movs	r3, #128	@ 0x80
 8002afe:	021b      	lsls	r3, r3, #8
 8002b00:	4013      	ands	r3, r2
 8002b02:	d119      	bne.n	8002b38 <HAL_ADC_ConfigChannel+0x190>
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	2380      	movs	r3, #128	@ 0x80
 8002b0a:	025b      	lsls	r3, r3, #9
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	d111      	bne.n	8002b34 <HAL_ADC_ConfigChannel+0x18c>
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	681a      	ldr	r2, [r3, #0]
 8002b14:	2380      	movs	r3, #128	@ 0x80
 8002b16:	029b      	lsls	r3, r3, #10
 8002b18:	4013      	ands	r3, r2
 8002b1a:	d109      	bne.n	8002b30 <HAL_ADC_ConfigChannel+0x188>
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	681a      	ldr	r2, [r3, #0]
 8002b20:	2380      	movs	r3, #128	@ 0x80
 8002b22:	02db      	lsls	r3, r3, #11
 8002b24:	4013      	ands	r3, r2
 8002b26:	d001      	beq.n	8002b2c <HAL_ADC_ConfigChannel+0x184>
 8002b28:	2312      	movs	r3, #18
 8002b2a:	e024      	b.n	8002b76 <HAL_ADC_ConfigChannel+0x1ce>
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	e022      	b.n	8002b76 <HAL_ADC_ConfigChannel+0x1ce>
 8002b30:	2311      	movs	r3, #17
 8002b32:	e020      	b.n	8002b76 <HAL_ADC_ConfigChannel+0x1ce>
 8002b34:	2310      	movs	r3, #16
 8002b36:	e01e      	b.n	8002b76 <HAL_ADC_ConfigChannel+0x1ce>
 8002b38:	230f      	movs	r3, #15
 8002b3a:	e01c      	b.n	8002b76 <HAL_ADC_ConfigChannel+0x1ce>
 8002b3c:	230e      	movs	r3, #14
 8002b3e:	e01a      	b.n	8002b76 <HAL_ADC_ConfigChannel+0x1ce>
 8002b40:	230d      	movs	r3, #13
 8002b42:	e018      	b.n	8002b76 <HAL_ADC_ConfigChannel+0x1ce>
 8002b44:	230c      	movs	r3, #12
 8002b46:	e016      	b.n	8002b76 <HAL_ADC_ConfigChannel+0x1ce>
 8002b48:	230b      	movs	r3, #11
 8002b4a:	e014      	b.n	8002b76 <HAL_ADC_ConfigChannel+0x1ce>
 8002b4c:	230a      	movs	r3, #10
 8002b4e:	e012      	b.n	8002b76 <HAL_ADC_ConfigChannel+0x1ce>
 8002b50:	2309      	movs	r3, #9
 8002b52:	e010      	b.n	8002b76 <HAL_ADC_ConfigChannel+0x1ce>
 8002b54:	2308      	movs	r3, #8
 8002b56:	e00e      	b.n	8002b76 <HAL_ADC_ConfigChannel+0x1ce>
 8002b58:	2307      	movs	r3, #7
 8002b5a:	e00c      	b.n	8002b76 <HAL_ADC_ConfigChannel+0x1ce>
 8002b5c:	2306      	movs	r3, #6
 8002b5e:	e00a      	b.n	8002b76 <HAL_ADC_ConfigChannel+0x1ce>
 8002b60:	2305      	movs	r3, #5
 8002b62:	e008      	b.n	8002b76 <HAL_ADC_ConfigChannel+0x1ce>
 8002b64:	2304      	movs	r3, #4
 8002b66:	e006      	b.n	8002b76 <HAL_ADC_ConfigChannel+0x1ce>
 8002b68:	2303      	movs	r3, #3
 8002b6a:	e004      	b.n	8002b76 <HAL_ADC_ConfigChannel+0x1ce>
 8002b6c:	2302      	movs	r3, #2
 8002b6e:	e002      	b.n	8002b76 <HAL_ADC_ConfigChannel+0x1ce>
 8002b70:	2301      	movs	r3, #1
 8002b72:	e000      	b.n	8002b76 <HAL_ADC_ConfigChannel+0x1ce>
 8002b74:	2300      	movs	r3, #0
 8002b76:	683a      	ldr	r2, [r7, #0]
 8002b78:	6852      	ldr	r2, [r2, #4]
 8002b7a:	201f      	movs	r0, #31
 8002b7c:	4002      	ands	r2, r0
 8002b7e:	4093      	lsls	r3, r2
 8002b80:	000a      	movs	r2, r1
 8002b82:	431a      	orrs	r2, r3
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	089b      	lsrs	r3, r3, #2
 8002b8e:	1c5a      	adds	r2, r3, #1
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	69db      	ldr	r3, [r3, #28]
 8002b94:	429a      	cmp	r2, r3
 8002b96:	d808      	bhi.n	8002baa <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6818      	ldr	r0, [r3, #0]
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	6859      	ldr	r1, [r3, #4]
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	001a      	movs	r2, r3
 8002ba6:	f7ff fa19 	bl	8001fdc <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6818      	ldr	r0, [r3, #0]
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	6819      	ldr	r1, [r3, #0]
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	001a      	movs	r2, r3
 8002bb8:	f7ff fa54 	bl	8002064 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	db00      	blt.n	8002bc6 <HAL_ADC_ConfigChannel+0x21e>
 8002bc4:	e0bc      	b.n	8002d40 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002bc6:	4b50      	ldr	r3, [pc, #320]	@ (8002d08 <HAL_ADC_ConfigChannel+0x360>)
 8002bc8:	0018      	movs	r0, r3
 8002bca:	f7ff f9b5 	bl	8001f38 <LL_ADC_GetCommonPathInternalCh>
 8002bce:	0003      	movs	r3, r0
 8002bd0:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a4d      	ldr	r2, [pc, #308]	@ (8002d0c <HAL_ADC_ConfigChannel+0x364>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d122      	bne.n	8002c22 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002bdc:	693a      	ldr	r2, [r7, #16]
 8002bde:	2380      	movs	r3, #128	@ 0x80
 8002be0:	041b      	lsls	r3, r3, #16
 8002be2:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002be4:	d11d      	bne.n	8002c22 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002be6:	693b      	ldr	r3, [r7, #16]
 8002be8:	2280      	movs	r2, #128	@ 0x80
 8002bea:	0412      	lsls	r2, r2, #16
 8002bec:	4313      	orrs	r3, r2
 8002bee:	4a46      	ldr	r2, [pc, #280]	@ (8002d08 <HAL_ADC_ConfigChannel+0x360>)
 8002bf0:	0019      	movs	r1, r3
 8002bf2:	0010      	movs	r0, r2
 8002bf4:	f7ff f98c 	bl	8001f10 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002bf8:	4b45      	ldr	r3, [pc, #276]	@ (8002d10 <HAL_ADC_ConfigChannel+0x368>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4945      	ldr	r1, [pc, #276]	@ (8002d14 <HAL_ADC_ConfigChannel+0x36c>)
 8002bfe:	0018      	movs	r0, r3
 8002c00:	f7fd fa7e 	bl	8000100 <__udivsi3>
 8002c04:	0003      	movs	r3, r0
 8002c06:	1c5a      	adds	r2, r3, #1
 8002c08:	0013      	movs	r3, r2
 8002c0a:	005b      	lsls	r3, r3, #1
 8002c0c:	189b      	adds	r3, r3, r2
 8002c0e:	009b      	lsls	r3, r3, #2
 8002c10:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002c12:	e002      	b.n	8002c1a <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	3b01      	subs	r3, #1
 8002c18:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d1f9      	bne.n	8002c14 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002c20:	e08e      	b.n	8002d40 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a3c      	ldr	r2, [pc, #240]	@ (8002d18 <HAL_ADC_ConfigChannel+0x370>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d10e      	bne.n	8002c4a <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002c2c:	693a      	ldr	r2, [r7, #16]
 8002c2e:	2380      	movs	r3, #128	@ 0x80
 8002c30:	045b      	lsls	r3, r3, #17
 8002c32:	4013      	ands	r3, r2
 8002c34:	d109      	bne.n	8002c4a <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002c36:	693b      	ldr	r3, [r7, #16]
 8002c38:	2280      	movs	r2, #128	@ 0x80
 8002c3a:	0452      	lsls	r2, r2, #17
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	4a32      	ldr	r2, [pc, #200]	@ (8002d08 <HAL_ADC_ConfigChannel+0x360>)
 8002c40:	0019      	movs	r1, r3
 8002c42:	0010      	movs	r0, r2
 8002c44:	f7ff f964 	bl	8001f10 <LL_ADC_SetCommonPathInternalCh>
 8002c48:	e07a      	b.n	8002d40 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a33      	ldr	r2, [pc, #204]	@ (8002d1c <HAL_ADC_ConfigChannel+0x374>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d000      	beq.n	8002c56 <HAL_ADC_ConfigChannel+0x2ae>
 8002c54:	e074      	b.n	8002d40 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002c56:	693a      	ldr	r2, [r7, #16]
 8002c58:	2380      	movs	r3, #128	@ 0x80
 8002c5a:	03db      	lsls	r3, r3, #15
 8002c5c:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002c5e:	d000      	beq.n	8002c62 <HAL_ADC_ConfigChannel+0x2ba>
 8002c60:	e06e      	b.n	8002d40 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	2280      	movs	r2, #128	@ 0x80
 8002c66:	03d2      	lsls	r2, r2, #15
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	4a27      	ldr	r2, [pc, #156]	@ (8002d08 <HAL_ADC_ConfigChannel+0x360>)
 8002c6c:	0019      	movs	r1, r3
 8002c6e:	0010      	movs	r0, r2
 8002c70:	f7ff f94e 	bl	8001f10 <LL_ADC_SetCommonPathInternalCh>
 8002c74:	e064      	b.n	8002d40 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	691a      	ldr	r2, [r3, #16]
 8002c7a:	2380      	movs	r3, #128	@ 0x80
 8002c7c:	061b      	lsls	r3, r3, #24
 8002c7e:	429a      	cmp	r2, r3
 8002c80:	d004      	beq.n	8002c8c <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002c86:	4a1f      	ldr	r2, [pc, #124]	@ (8002d04 <HAL_ADC_ConfigChannel+0x35c>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d107      	bne.n	8002c9c <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681a      	ldr	r2, [r3, #0]
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	0019      	movs	r1, r3
 8002c96:	0010      	movs	r0, r2
 8002c98:	f7ff f9d1 	bl	800203e <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	da4d      	bge.n	8002d40 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002ca4:	4b18      	ldr	r3, [pc, #96]	@ (8002d08 <HAL_ADC_ConfigChannel+0x360>)
 8002ca6:	0018      	movs	r0, r3
 8002ca8:	f7ff f946 	bl	8001f38 <LL_ADC_GetCommonPathInternalCh>
 8002cac:	0003      	movs	r3, r0
 8002cae:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a15      	ldr	r2, [pc, #84]	@ (8002d0c <HAL_ADC_ConfigChannel+0x364>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d108      	bne.n	8002ccc <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002cba:	693b      	ldr	r3, [r7, #16]
 8002cbc:	4a18      	ldr	r2, [pc, #96]	@ (8002d20 <HAL_ADC_ConfigChannel+0x378>)
 8002cbe:	4013      	ands	r3, r2
 8002cc0:	4a11      	ldr	r2, [pc, #68]	@ (8002d08 <HAL_ADC_ConfigChannel+0x360>)
 8002cc2:	0019      	movs	r1, r3
 8002cc4:	0010      	movs	r0, r2
 8002cc6:	f7ff f923 	bl	8001f10 <LL_ADC_SetCommonPathInternalCh>
 8002cca:	e039      	b.n	8002d40 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a11      	ldr	r2, [pc, #68]	@ (8002d18 <HAL_ADC_ConfigChannel+0x370>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d108      	bne.n	8002ce8 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	4a12      	ldr	r2, [pc, #72]	@ (8002d24 <HAL_ADC_ConfigChannel+0x37c>)
 8002cda:	4013      	ands	r3, r2
 8002cdc:	4a0a      	ldr	r2, [pc, #40]	@ (8002d08 <HAL_ADC_ConfigChannel+0x360>)
 8002cde:	0019      	movs	r1, r3
 8002ce0:	0010      	movs	r0, r2
 8002ce2:	f7ff f915 	bl	8001f10 <LL_ADC_SetCommonPathInternalCh>
 8002ce6:	e02b      	b.n	8002d40 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a0b      	ldr	r2, [pc, #44]	@ (8002d1c <HAL_ADC_ConfigChannel+0x374>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d126      	bne.n	8002d40 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	4a0c      	ldr	r2, [pc, #48]	@ (8002d28 <HAL_ADC_ConfigChannel+0x380>)
 8002cf6:	4013      	ands	r3, r2
 8002cf8:	4a03      	ldr	r2, [pc, #12]	@ (8002d08 <HAL_ADC_ConfigChannel+0x360>)
 8002cfa:	0019      	movs	r1, r3
 8002cfc:	0010      	movs	r0, r2
 8002cfe:	f7ff f907 	bl	8001f10 <LL_ADC_SetCommonPathInternalCh>
 8002d02:	e01d      	b.n	8002d40 <HAL_ADC_ConfigChannel+0x398>
 8002d04:	80000004 	.word	0x80000004
 8002d08:	40012708 	.word	0x40012708
 8002d0c:	b0001000 	.word	0xb0001000
 8002d10:	20000000 	.word	0x20000000
 8002d14:	00030d40 	.word	0x00030d40
 8002d18:	b8004000 	.word	0xb8004000
 8002d1c:	b4002000 	.word	0xb4002000
 8002d20:	ff7fffff 	.word	0xff7fffff
 8002d24:	feffffff 	.word	0xfeffffff
 8002d28:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d30:	2220      	movs	r2, #32
 8002d32:	431a      	orrs	r2, r3
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002d38:	2317      	movs	r3, #23
 8002d3a:	18fb      	adds	r3, r7, r3
 8002d3c:	2201      	movs	r2, #1
 8002d3e:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2254      	movs	r2, #84	@ 0x54
 8002d44:	2100      	movs	r1, #0
 8002d46:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8002d48:	2317      	movs	r3, #23
 8002d4a:	18fb      	adds	r3, r7, r3
 8002d4c:	781b      	ldrb	r3, [r3, #0]
}
 8002d4e:	0018      	movs	r0, r3
 8002d50:	46bd      	mov	sp, r7
 8002d52:	b006      	add	sp, #24
 8002d54:	bd80      	pop	{r7, pc}
 8002d56:	46c0      	nop			@ (mov r8, r8)

08002d58 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b084      	sub	sp, #16
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	0018      	movs	r0, r3
 8002d66:	f7ff fa2b 	bl	80021c0 <LL_ADC_REG_IsConversionOngoing>
 8002d6a:	1e03      	subs	r3, r0, #0
 8002d6c:	d031      	beq.n	8002dd2 <ADC_ConversionStop+0x7a>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	0018      	movs	r0, r3
 8002d74:	f7ff f9ef 	bl	8002156 <LL_ADC_IsDisableOngoing>
 8002d78:	1e03      	subs	r3, r0, #0
 8002d7a:	d104      	bne.n	8002d86 <ADC_ConversionStop+0x2e>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	0018      	movs	r0, r3
 8002d82:	f7ff fa0b 	bl	800219c <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002d86:	f7ff f8b9 	bl	8001efc <HAL_GetTick>
 8002d8a:	0003      	movs	r3, r0
 8002d8c:	60fb      	str	r3, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8002d8e:	e01a      	b.n	8002dc6 <ADC_ConversionStop+0x6e>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002d90:	f7ff f8b4 	bl	8001efc <HAL_GetTick>
 8002d94:	0002      	movs	r2, r0
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	1ad3      	subs	r3, r2, r3
 8002d9a:	2b02      	cmp	r3, #2
 8002d9c:	d913      	bls.n	8002dc6 <ADC_ConversionStop+0x6e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	2204      	movs	r2, #4
 8002da6:	4013      	ands	r3, r2
 8002da8:	d00d      	beq.n	8002dc6 <ADC_ConversionStop+0x6e>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dae:	2210      	movs	r2, #16
 8002db0:	431a      	orrs	r2, r3
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dba:	2201      	movs	r2, #1
 8002dbc:	431a      	orrs	r2, r3
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e006      	b.n	8002dd4 <ADC_ConversionStop+0x7c>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	689b      	ldr	r3, [r3, #8]
 8002dcc:	2204      	movs	r2, #4
 8002dce:	4013      	ands	r3, r2
 8002dd0:	d1de      	bne.n	8002d90 <ADC_ConversionStop+0x38>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8002dd2:	2300      	movs	r3, #0
}
 8002dd4:	0018      	movs	r0, r3
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	b004      	add	sp, #16
 8002dda:	bd80      	pop	{r7, pc}

08002ddc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b084      	sub	sp, #16
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002de4:	2300      	movs	r3, #0
 8002de6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	0018      	movs	r0, r3
 8002dee:	f7ff f9a1 	bl	8002134 <LL_ADC_IsEnabled>
 8002df2:	1e03      	subs	r3, r0, #0
 8002df4:	d000      	beq.n	8002df8 <ADC_Enable+0x1c>
 8002df6:	e069      	b.n	8002ecc <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	4a36      	ldr	r2, [pc, #216]	@ (8002ed8 <ADC_Enable+0xfc>)
 8002e00:	4013      	ands	r3, r2
 8002e02:	d00d      	beq.n	8002e20 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e08:	2210      	movs	r2, #16
 8002e0a:	431a      	orrs	r2, r3
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e14:	2201      	movs	r2, #1
 8002e16:	431a      	orrs	r2, r3
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	e056      	b.n	8002ece <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	0018      	movs	r0, r3
 8002e26:	f7ff f961 	bl	80020ec <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 8002e2a:	4b2c      	ldr	r3, [pc, #176]	@ (8002edc <ADC_Enable+0x100>)
 8002e2c:	0018      	movs	r0, r3
 8002e2e:	f7ff f883 	bl	8001f38 <LL_ADC_GetCommonPathInternalCh>
 8002e32:	0002      	movs	r2, r0
 8002e34:	2380      	movs	r3, #128	@ 0x80
 8002e36:	041b      	lsls	r3, r3, #16
 8002e38:	4013      	ands	r3, r2
 8002e3a:	d00f      	beq.n	8002e5c <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002e3c:	4b28      	ldr	r3, [pc, #160]	@ (8002ee0 <ADC_Enable+0x104>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4928      	ldr	r1, [pc, #160]	@ (8002ee4 <ADC_Enable+0x108>)
 8002e42:	0018      	movs	r0, r3
 8002e44:	f7fd f95c 	bl	8000100 <__udivsi3>
 8002e48:	0003      	movs	r3, r0
 8002e4a:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 8002e4c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002e4e:	e002      	b.n	8002e56 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	3b01      	subs	r3, #1
 8002e54:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d1f9      	bne.n	8002e50 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	7e5b      	ldrb	r3, [r3, #25]
 8002e60:	2b01      	cmp	r3, #1
 8002e62:	d033      	beq.n	8002ecc <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8002e64:	f7ff f84a 	bl	8001efc <HAL_GetTick>
 8002e68:	0003      	movs	r3, r0
 8002e6a:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002e6c:	e027      	b.n	8002ebe <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	0018      	movs	r0, r3
 8002e74:	f7ff f95e 	bl	8002134 <LL_ADC_IsEnabled>
 8002e78:	1e03      	subs	r3, r0, #0
 8002e7a:	d104      	bne.n	8002e86 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	0018      	movs	r0, r3
 8002e82:	f7ff f933 	bl	80020ec <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002e86:	f7ff f839 	bl	8001efc <HAL_GetTick>
 8002e8a:	0002      	movs	r2, r0
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	1ad3      	subs	r3, r2, r3
 8002e90:	2b02      	cmp	r3, #2
 8002e92:	d914      	bls.n	8002ebe <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	2b01      	cmp	r3, #1
 8002ea0:	d00d      	beq.n	8002ebe <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ea6:	2210      	movs	r2, #16
 8002ea8:	431a      	orrs	r2, r3
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	431a      	orrs	r2, r3
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	65da      	str	r2, [r3, #92]	@ 0x5c

            return HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e007      	b.n	8002ece <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	4013      	ands	r3, r2
 8002ec8:	2b01      	cmp	r3, #1
 8002eca:	d1d0      	bne.n	8002e6e <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002ecc:	2300      	movs	r3, #0
}
 8002ece:	0018      	movs	r0, r3
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	b004      	add	sp, #16
 8002ed4:	bd80      	pop	{r7, pc}
 8002ed6:	46c0      	nop			@ (mov r8, r8)
 8002ed8:	80000017 	.word	0x80000017
 8002edc:	40012708 	.word	0x40012708
 8002ee0:	20000000 	.word	0x20000000
 8002ee4:	00030d40 	.word	0x00030d40

08002ee8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b084      	sub	sp, #16
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	0018      	movs	r0, r3
 8002ef6:	f7ff f92e 	bl	8002156 <LL_ADC_IsDisableOngoing>
 8002efa:	0003      	movs	r3, r0
 8002efc:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	0018      	movs	r0, r3
 8002f04:	f7ff f916 	bl	8002134 <LL_ADC_IsEnabled>
 8002f08:	1e03      	subs	r3, r0, #0
 8002f0a:	d046      	beq.n	8002f9a <ADC_Disable+0xb2>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d143      	bne.n	8002f9a <ADC_Disable+0xb2>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	2205      	movs	r2, #5
 8002f1a:	4013      	ands	r3, r2
 8002f1c:	2b01      	cmp	r3, #1
 8002f1e:	d10d      	bne.n	8002f3c <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	0018      	movs	r0, r3
 8002f26:	f7ff f8f3 	bl	8002110 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	2203      	movs	r2, #3
 8002f30:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002f32:	f7fe ffe3 	bl	8001efc <HAL_GetTick>
 8002f36:	0003      	movs	r3, r0
 8002f38:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002f3a:	e028      	b.n	8002f8e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f40:	2210      	movs	r2, #16
 8002f42:	431a      	orrs	r2, r3
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	431a      	orrs	r2, r3
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 8002f54:	2301      	movs	r3, #1
 8002f56:	e021      	b.n	8002f9c <ADC_Disable+0xb4>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002f58:	f7fe ffd0 	bl	8001efc <HAL_GetTick>
 8002f5c:	0002      	movs	r2, r0
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	1ad3      	subs	r3, r2, r3
 8002f62:	2b02      	cmp	r3, #2
 8002f64:	d913      	bls.n	8002f8e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	4013      	ands	r3, r2
 8002f70:	d00d      	beq.n	8002f8e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f76:	2210      	movs	r2, #16
 8002f78:	431a      	orrs	r2, r3
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f82:	2201      	movs	r2, #1
 8002f84:	431a      	orrs	r2, r3
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e006      	b.n	8002f9c <ADC_Disable+0xb4>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	689b      	ldr	r3, [r3, #8]
 8002f94:	2201      	movs	r2, #1
 8002f96:	4013      	ands	r3, r2
 8002f98:	d1de      	bne.n	8002f58 <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002f9a:	2300      	movs	r3, #0
}
 8002f9c:	0018      	movs	r0, r3
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	b004      	add	sp, #16
 8002fa2:	bd80      	pop	{r7, pc}

08002fa4 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b084      	sub	sp, #16
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fb0:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fb6:	2250      	movs	r2, #80	@ 0x50
 8002fb8:	4013      	ands	r3, r2
 8002fba:	d141      	bne.n	8003040 <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fc0:	2280      	movs	r2, #128	@ 0x80
 8002fc2:	0092      	lsls	r2, r2, #2
 8002fc4:	431a      	orrs	r2, r3
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	0018      	movs	r0, r3
 8002fd0:	f7fe fff3 	bl	8001fba <LL_ADC_REG_IsTriggerSourceSWStart>
 8002fd4:	1e03      	subs	r3, r0, #0
 8002fd6:	d02e      	beq.n	8003036 <ADC_DMAConvCplt+0x92>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	7e9b      	ldrb	r3, [r3, #26]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d12a      	bne.n	8003036 <ADC_DMAConvCplt+0x92>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	2208      	movs	r2, #8
 8002fe8:	4013      	ands	r3, r2
 8002fea:	2b08      	cmp	r3, #8
 8002fec:	d123      	bne.n	8003036 <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	0018      	movs	r0, r3
 8002ff4:	f7ff f8e4 	bl	80021c0 <LL_ADC_REG_IsConversionOngoing>
 8002ff8:	1e03      	subs	r3, r0, #0
 8002ffa:	d110      	bne.n	800301e <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	685a      	ldr	r2, [r3, #4]
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	210c      	movs	r1, #12
 8003008:	438a      	bics	r2, r1
 800300a:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003010:	4a15      	ldr	r2, [pc, #84]	@ (8003068 <ADC_DMAConvCplt+0xc4>)
 8003012:	4013      	ands	r3, r2
 8003014:	2201      	movs	r2, #1
 8003016:	431a      	orrs	r2, r3
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	659a      	str	r2, [r3, #88]	@ 0x58
 800301c:	e00b      	b.n	8003036 <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003022:	2220      	movs	r2, #32
 8003024:	431a      	orrs	r2, r3
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800302e:	2201      	movs	r2, #1
 8003030:	431a      	orrs	r2, r3
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	0018      	movs	r0, r3
 800303a:	f7fe fdbf 	bl	8001bbc <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800303e:	e00f      	b.n	8003060 <ADC_DMAConvCplt+0xbc>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003044:	2210      	movs	r2, #16
 8003046:	4013      	ands	r3, r2
 8003048:	d004      	beq.n	8003054 <ADC_DMAConvCplt+0xb0>
      HAL_ADC_ErrorCallback(hadc);
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	0018      	movs	r0, r3
 800304e:	f7ff fca2 	bl	8002996 <HAL_ADC_ErrorCallback>
}
 8003052:	e005      	b.n	8003060 <ADC_DMAConvCplt+0xbc>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003058:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800305a:	687a      	ldr	r2, [r7, #4]
 800305c:	0010      	movs	r0, r2
 800305e:	4798      	blx	r3
}
 8003060:	46c0      	nop			@ (mov r8, r8)
 8003062:	46bd      	mov	sp, r7
 8003064:	b004      	add	sp, #16
 8003066:	bd80      	pop	{r7, pc}
 8003068:	fffffefe 	.word	0xfffffefe

0800306c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b084      	sub	sp, #16
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003078:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	0018      	movs	r0, r3
 800307e:	f7ff fc82 	bl	8002986 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003082:	46c0      	nop			@ (mov r8, r8)
 8003084:	46bd      	mov	sp, r7
 8003086:	b004      	add	sp, #16
 8003088:	bd80      	pop	{r7, pc}

0800308a <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800308a:	b580      	push	{r7, lr}
 800308c:	b084      	sub	sp, #16
 800308e:	af00      	add	r7, sp, #0
 8003090:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003096:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800309c:	2240      	movs	r2, #64	@ 0x40
 800309e:	431a      	orrs	r2, r3
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030a8:	2204      	movs	r2, #4
 80030aa:	431a      	orrs	r2, r3
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	0018      	movs	r0, r3
 80030b4:	f7ff fc6f 	bl	8002996 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80030b8:	46c0      	nop			@ (mov r8, r8)
 80030ba:	46bd      	mov	sp, r7
 80030bc:	b004      	add	sp, #16
 80030be:	bd80      	pop	{r7, pc}

080030c0 <LL_ADC_GetCommonClock>:
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b082      	sub	sp, #8
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_PRESC));
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681a      	ldr	r2, [r3, #0]
 80030cc:	23f0      	movs	r3, #240	@ 0xf0
 80030ce:	039b      	lsls	r3, r3, #14
 80030d0:	4013      	ands	r3, r2
}
 80030d2:	0018      	movs	r0, r3
 80030d4:	46bd      	mov	sp, r7
 80030d6:	b002      	add	sp, #8
 80030d8:	bd80      	pop	{r7, pc}

080030da <LL_ADC_GetClock>:
{
 80030da:	b580      	push	{r7, lr}
 80030dc:	b082      	sub	sp, #8
 80030de:	af00      	add	r7, sp, #0
 80030e0:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR2, ADC_CFGR2_CKMODE));
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	691b      	ldr	r3, [r3, #16]
 80030e6:	0f9b      	lsrs	r3, r3, #30
 80030e8:	079b      	lsls	r3, r3, #30
}
 80030ea:	0018      	movs	r0, r3
 80030ec:	46bd      	mov	sp, r7
 80030ee:	b002      	add	sp, #8
 80030f0:	bd80      	pop	{r7, pc}

080030f2 <LL_ADC_SetCalibrationFactor>:
{
 80030f2:	b580      	push	{r7, lr}
 80030f4:	b082      	sub	sp, #8
 80030f6:	af00      	add	r7, sp, #0
 80030f8:	6078      	str	r0, [r7, #4]
 80030fa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	22b4      	movs	r2, #180	@ 0xb4
 8003100:	589b      	ldr	r3, [r3, r2]
 8003102:	227f      	movs	r2, #127	@ 0x7f
 8003104:	4393      	bics	r3, r2
 8003106:	001a      	movs	r2, r3
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	431a      	orrs	r2, r3
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	21b4      	movs	r1, #180	@ 0xb4
 8003110:	505a      	str	r2, [r3, r1]
}
 8003112:	46c0      	nop			@ (mov r8, r8)
 8003114:	46bd      	mov	sp, r7
 8003116:	b002      	add	sp, #8
 8003118:	bd80      	pop	{r7, pc}

0800311a <LL_ADC_GetCalibrationFactor>:
{
 800311a:	b580      	push	{r7, lr}
 800311c:	b082      	sub	sp, #8
 800311e:	af00      	add	r7, sp, #0
 8003120:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	22b4      	movs	r2, #180	@ 0xb4
 8003126:	589b      	ldr	r3, [r3, r2]
 8003128:	227f      	movs	r2, #127	@ 0x7f
 800312a:	4013      	ands	r3, r2
}
 800312c:	0018      	movs	r0, r3
 800312e:	46bd      	mov	sp, r7
 8003130:	b002      	add	sp, #8
 8003132:	bd80      	pop	{r7, pc}

08003134 <LL_ADC_Enable>:
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b082      	sub	sp, #8
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	4a04      	ldr	r2, [pc, #16]	@ (8003154 <LL_ADC_Enable+0x20>)
 8003142:	4013      	ands	r3, r2
 8003144:	2201      	movs	r2, #1
 8003146:	431a      	orrs	r2, r3
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	609a      	str	r2, [r3, #8]
}
 800314c:	46c0      	nop			@ (mov r8, r8)
 800314e:	46bd      	mov	sp, r7
 8003150:	b002      	add	sp, #8
 8003152:	bd80      	pop	{r7, pc}
 8003154:	7fffffe8 	.word	0x7fffffe8

08003158 <LL_ADC_Disable>:
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b082      	sub	sp, #8
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	689b      	ldr	r3, [r3, #8]
 8003164:	4a04      	ldr	r2, [pc, #16]	@ (8003178 <LL_ADC_Disable+0x20>)
 8003166:	4013      	ands	r3, r2
 8003168:	2202      	movs	r2, #2
 800316a:	431a      	orrs	r2, r3
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	609a      	str	r2, [r3, #8]
}
 8003170:	46c0      	nop			@ (mov r8, r8)
 8003172:	46bd      	mov	sp, r7
 8003174:	b002      	add	sp, #8
 8003176:	bd80      	pop	{r7, pc}
 8003178:	7fffffe8 	.word	0x7fffffe8

0800317c <LL_ADC_IsEnabled>:
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b082      	sub	sp, #8
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	689b      	ldr	r3, [r3, #8]
 8003188:	2201      	movs	r2, #1
 800318a:	4013      	ands	r3, r2
 800318c:	2b01      	cmp	r3, #1
 800318e:	d101      	bne.n	8003194 <LL_ADC_IsEnabled+0x18>
 8003190:	2301      	movs	r3, #1
 8003192:	e000      	b.n	8003196 <LL_ADC_IsEnabled+0x1a>
 8003194:	2300      	movs	r3, #0
}
 8003196:	0018      	movs	r0, r3
 8003198:	46bd      	mov	sp, r7
 800319a:	b002      	add	sp, #8
 800319c:	bd80      	pop	{r7, pc}
	...

080031a0 <LL_ADC_StartCalibration>:
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b082      	sub	sp, #8
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	689b      	ldr	r3, [r3, #8]
 80031ac:	4a05      	ldr	r2, [pc, #20]	@ (80031c4 <LL_ADC_StartCalibration+0x24>)
 80031ae:	4013      	ands	r3, r2
 80031b0:	2280      	movs	r2, #128	@ 0x80
 80031b2:	0612      	lsls	r2, r2, #24
 80031b4:	431a      	orrs	r2, r3
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	609a      	str	r2, [r3, #8]
}
 80031ba:	46c0      	nop			@ (mov r8, r8)
 80031bc:	46bd      	mov	sp, r7
 80031be:	b002      	add	sp, #8
 80031c0:	bd80      	pop	{r7, pc}
 80031c2:	46c0      	nop			@ (mov r8, r8)
 80031c4:	7fffffe8 	.word	0x7fffffe8

080031c8 <LL_ADC_IsCalibrationOnGoing>:
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b082      	sub	sp, #8
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	0fdb      	lsrs	r3, r3, #31
 80031d6:	07da      	lsls	r2, r3, #31
 80031d8:	2380      	movs	r3, #128	@ 0x80
 80031da:	061b      	lsls	r3, r3, #24
 80031dc:	429a      	cmp	r2, r3
 80031de:	d101      	bne.n	80031e4 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80031e0:	2301      	movs	r3, #1
 80031e2:	e000      	b.n	80031e6 <LL_ADC_IsCalibrationOnGoing+0x1e>
 80031e4:	2300      	movs	r3, #0
}
 80031e6:	0018      	movs	r0, r3
 80031e8:	46bd      	mov	sp, r7
 80031ea:	b002      	add	sp, #8
 80031ec:	bd80      	pop	{r7, pc}
	...

080031f0 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 80031f0:	b590      	push	{r4, r7, lr}
 80031f2:	b08b      	sub	sp, #44	@ 0x2c
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80031f8:	2300      	movs	r3, #0
 80031fa:	60fb      	str	r3, [r7, #12]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 80031fc:	2300      	movs	r3, #0
 80031fe:	623b      	str	r3, [r7, #32]
  __IO uint32_t delay_cpu_cycles;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2254      	movs	r2, #84	@ 0x54
 8003204:	5c9b      	ldrb	r3, [r3, r2]
 8003206:	2b01      	cmp	r3, #1
 8003208:	d101      	bne.n	800320e <HAL_ADCEx_Calibration_Start+0x1e>
 800320a:	2302      	movs	r3, #2
 800320c:	e0dd      	b.n	80033ca <HAL_ADCEx_Calibration_Start+0x1da>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2254      	movs	r2, #84	@ 0x54
 8003212:	2101      	movs	r1, #1
 8003214:	5499      	strb	r1, [r3, r2]

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003216:	231f      	movs	r3, #31
 8003218:	18fc      	adds	r4, r7, r3
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	0018      	movs	r0, r3
 800321e:	f7ff fe63 	bl	8002ee8 <ADC_Disable>
 8003222:	0003      	movs	r3, r0
 8003224:	7023      	strb	r3, [r4, #0]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	0018      	movs	r0, r3
 800322c:	f7ff ffa6 	bl	800317c <LL_ADC_IsEnabled>
 8003230:	1e03      	subs	r3, r0, #0
 8003232:	d000      	beq.n	8003236 <HAL_ADCEx_Calibration_Start+0x46>
 8003234:	e0bc      	b.n	80033b0 <HAL_ADCEx_Calibration_Start+0x1c0>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800323a:	4a66      	ldr	r2, [pc, #408]	@ (80033d4 <HAL_ADCEx_Calibration_Start+0x1e4>)
 800323c:	4013      	ands	r3, r2
 800323e:	2202      	movs	r2, #2
 8003240:	431a      	orrs	r2, r3
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	68db      	ldr	r3, [r3, #12]
 800324c:	4a62      	ldr	r2, [pc, #392]	@ (80033d8 <HAL_ADCEx_Calibration_Start+0x1e8>)
 800324e:	4013      	ands	r3, r2
 8003250:	61bb      	str	r3, [r7, #24]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	68da      	ldr	r2, [r3, #12]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	495f      	ldr	r1, [pc, #380]	@ (80033dc <HAL_ADCEx_Calibration_Start+0x1ec>)
 800325e:	400a      	ands	r2, r1
 8003260:	60da      	str	r2, [r3, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8003262:	2300      	movs	r3, #0
 8003264:	627b      	str	r3, [r7, #36]	@ 0x24
 8003266:	e02d      	b.n	80032c4 <HAL_ADCEx_Calibration_Start+0xd4>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	0018      	movs	r0, r3
 800326e:	f7ff ff97 	bl	80031a0 <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003272:	e014      	b.n	800329e <HAL_ADCEx_Calibration_Start+0xae>
      {
        wait_loop_index++;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	3301      	adds	r3, #1
 8003278:	60fb      	str	r3, [r7, #12]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	4a58      	ldr	r2, [pc, #352]	@ (80033e0 <HAL_ADCEx_Calibration_Start+0x1f0>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d90d      	bls.n	800329e <HAL_ADCEx_Calibration_Start+0xae>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003286:	2212      	movs	r2, #18
 8003288:	4393      	bics	r3, r2
 800328a:	2210      	movs	r2, #16
 800328c:	431a      	orrs	r2, r3
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	659a      	str	r2, [r3, #88]	@ 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2254      	movs	r2, #84	@ 0x54
 8003296:	2100      	movs	r1, #0
 8003298:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	e095      	b.n	80033ca <HAL_ADCEx_Calibration_Start+0x1da>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	0018      	movs	r0, r3
 80032a4:	f7ff ff90 	bl	80031c8 <LL_ADC_IsCalibrationOnGoing>
 80032a8:	1e03      	subs	r3, r0, #0
 80032aa:	d1e3      	bne.n	8003274 <HAL_ADCEx_Calibration_Start+0x84>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	0018      	movs	r0, r3
 80032b2:	f7ff ff32 	bl	800311a <LL_ADC_GetCalibrationFactor>
 80032b6:	0002      	movs	r2, r0
 80032b8:	6a3b      	ldr	r3, [r7, #32]
 80032ba:	189b      	adds	r3, r3, r2
 80032bc:	623b      	str	r3, [r7, #32]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 80032be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032c0:	3301      	adds	r3, #1
 80032c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80032c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032c6:	2b07      	cmp	r3, #7
 80032c8:	d9ce      	bls.n	8003268 <HAL_ADCEx_Calibration_Start+0x78>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 80032ca:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80032cc:	6a38      	ldr	r0, [r7, #32]
 80032ce:	f7fc ff17 	bl	8000100 <__udivsi3>
 80032d2:	0003      	movs	r3, r0
 80032d4:	623b      	str	r3, [r7, #32]

    /* Apply calibration factor (requires ADC enable and disable process) */
    LL_ADC_Enable(hadc->Instance);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	0018      	movs	r0, r3
 80032dc:	f7ff ff2a 	bl	8003134 <LL_ADC_Enable>

    /* Case of ADC clocked at low frequency: Delay required between ADC enable and disable actions */
    if (LL_ADC_GetClock(hadc->Instance) == LL_ADC_CLOCK_ASYNC)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	0018      	movs	r0, r3
 80032e6:	f7ff fef8 	bl	80030da <LL_ADC_GetClock>
 80032ea:	1e03      	subs	r3, r0, #0
 80032ec:	d11b      	bne.n	8003326 <HAL_ADCEx_Calibration_Start+0x136>
    {
      adc_clk_async_presc = LL_ADC_GetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80032ee:	4b3d      	ldr	r3, [pc, #244]	@ (80033e4 <HAL_ADCEx_Calibration_Start+0x1f4>)
 80032f0:	0018      	movs	r0, r3
 80032f2:	f7ff fee5 	bl	80030c0 <LL_ADC_GetCommonClock>
 80032f6:	0003      	movs	r3, r0
 80032f8:	617b      	str	r3, [r7, #20]

      if (adc_clk_async_presc >= LL_ADC_CLOCK_ASYNC_DIV16)
 80032fa:	697a      	ldr	r2, [r7, #20]
 80032fc:	23e0      	movs	r3, #224	@ 0xe0
 80032fe:	035b      	lsls	r3, r3, #13
 8003300:	429a      	cmp	r2, r3
 8003302:	d310      	bcc.n	8003326 <HAL_ADCEx_Calibration_Start+0x136>
      {
        /* Delay loop initialization and execution */
        /* Delay depends on ADC clock prescaler: Compute ADC clock asynchronous prescaler to decimal format */
        delay_cpu_cycles = (1UL << ((adc_clk_async_presc >> ADC_CCR_PRESC_Pos) - 3UL));
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	0c9b      	lsrs	r3, r3, #18
 8003308:	3b03      	subs	r3, #3
 800330a:	2201      	movs	r2, #1
 800330c:	409a      	lsls	r2, r3
 800330e:	0013      	movs	r3, r2
 8003310:	60bb      	str	r3, [r7, #8]
        /* Divide variable by 2 to compensate partially CPU processing cycles */
        delay_cpu_cycles >>= 1UL;
 8003312:	68bb      	ldr	r3, [r7, #8]
 8003314:	085b      	lsrs	r3, r3, #1
 8003316:	60bb      	str	r3, [r7, #8]

        while (delay_cpu_cycles != 0UL)
 8003318:	e002      	b.n	8003320 <HAL_ADCEx_Calibration_Start+0x130>
        {
          delay_cpu_cycles--;
 800331a:	68bb      	ldr	r3, [r7, #8]
 800331c:	3b01      	subs	r3, #1
 800331e:	60bb      	str	r3, [r7, #8]
        while (delay_cpu_cycles != 0UL)
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d1f9      	bne.n	800331a <HAL_ADCEx_Calibration_Start+0x12a>
        }
      }
    }

    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	6a3a      	ldr	r2, [r7, #32]
 800332c:	0011      	movs	r1, r2
 800332e:	0018      	movs	r0, r3
 8003330:	f7ff fedf 	bl	80030f2 <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	0018      	movs	r0, r3
 800333a:	f7ff ff0d 	bl	8003158 <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800333e:	f7fe fddd 	bl	8001efc <HAL_GetTick>
 8003342:	0003      	movs	r3, r0
 8003344:	613b      	str	r3, [r7, #16]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003346:	e01b      	b.n	8003380 <HAL_ADCEx_Calibration_Start+0x190>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003348:	f7fe fdd8 	bl	8001efc <HAL_GetTick>
 800334c:	0002      	movs	r2, r0
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	1ad3      	subs	r3, r2, r3
 8003352:	2b02      	cmp	r3, #2
 8003354:	d914      	bls.n	8003380 <HAL_ADCEx_Calibration_Start+0x190>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	0018      	movs	r0, r3
 800335c:	f7ff ff0e 	bl	800317c <LL_ADC_IsEnabled>
 8003360:	1e03      	subs	r3, r0, #0
 8003362:	d00d      	beq.n	8003380 <HAL_ADCEx_Calibration_Start+0x190>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003368:	2210      	movs	r2, #16
 800336a:	431a      	orrs	r2, r3
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003374:	2201      	movs	r2, #1
 8003376:	431a      	orrs	r2, r3
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 800337c:	2301      	movs	r3, #1
 800337e:	e024      	b.n	80033ca <HAL_ADCEx_Calibration_Start+0x1da>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	0018      	movs	r0, r3
 8003386:	f7ff fef9 	bl	800317c <LL_ADC_IsEnabled>
 800338a:	1e03      	subs	r3, r0, #0
 800338c:	d1dc      	bne.n	8003348 <HAL_ADCEx_Calibration_Start+0x158>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	68d9      	ldr	r1, [r3, #12]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	69ba      	ldr	r2, [r7, #24]
 800339a:	430a      	orrs	r2, r1
 800339c:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033a2:	2203      	movs	r2, #3
 80033a4:	4393      	bics	r3, r2
 80033a6:	2201      	movs	r2, #1
 80033a8:	431a      	orrs	r2, r3
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	659a      	str	r2, [r3, #88]	@ 0x58
 80033ae:	e005      	b.n	80033bc <HAL_ADCEx_Calibration_Start+0x1cc>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033b4:	2210      	movs	r2, #16
 80033b6:	431a      	orrs	r2, r3
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2254      	movs	r2, #84	@ 0x54
 80033c0:	2100      	movs	r1, #0
 80033c2:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 80033c4:	231f      	movs	r3, #31
 80033c6:	18fb      	adds	r3, r7, r3
 80033c8:	781b      	ldrb	r3, [r3, #0]
}
 80033ca:	0018      	movs	r0, r3
 80033cc:	46bd      	mov	sp, r7
 80033ce:	b00b      	add	sp, #44	@ 0x2c
 80033d0:	bd90      	pop	{r4, r7, pc}
 80033d2:	46c0      	nop			@ (mov r8, r8)
 80033d4:	fffffefd 	.word	0xfffffefd
 80033d8:	00008003 	.word	0x00008003
 80033dc:	ffff7ffc 	.word	0xffff7ffc
 80033e0:	0002f1ff 	.word	0x0002f1ff
 80033e4:	40012708 	.word	0x40012708

080033e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b082      	sub	sp, #8
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	0002      	movs	r2, r0
 80033f0:	1dfb      	adds	r3, r7, #7
 80033f2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80033f4:	1dfb      	adds	r3, r7, #7
 80033f6:	781b      	ldrb	r3, [r3, #0]
 80033f8:	2b7f      	cmp	r3, #127	@ 0x7f
 80033fa:	d809      	bhi.n	8003410 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033fc:	1dfb      	adds	r3, r7, #7
 80033fe:	781b      	ldrb	r3, [r3, #0]
 8003400:	001a      	movs	r2, r3
 8003402:	231f      	movs	r3, #31
 8003404:	401a      	ands	r2, r3
 8003406:	4b04      	ldr	r3, [pc, #16]	@ (8003418 <__NVIC_EnableIRQ+0x30>)
 8003408:	2101      	movs	r1, #1
 800340a:	4091      	lsls	r1, r2
 800340c:	000a      	movs	r2, r1
 800340e:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8003410:	46c0      	nop			@ (mov r8, r8)
 8003412:	46bd      	mov	sp, r7
 8003414:	b002      	add	sp, #8
 8003416:	bd80      	pop	{r7, pc}
 8003418:	e000e100 	.word	0xe000e100

0800341c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800341c:	b590      	push	{r4, r7, lr}
 800341e:	b083      	sub	sp, #12
 8003420:	af00      	add	r7, sp, #0
 8003422:	0002      	movs	r2, r0
 8003424:	6039      	str	r1, [r7, #0]
 8003426:	1dfb      	adds	r3, r7, #7
 8003428:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800342a:	1dfb      	adds	r3, r7, #7
 800342c:	781b      	ldrb	r3, [r3, #0]
 800342e:	2b7f      	cmp	r3, #127	@ 0x7f
 8003430:	d828      	bhi.n	8003484 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003432:	4a2f      	ldr	r2, [pc, #188]	@ (80034f0 <__NVIC_SetPriority+0xd4>)
 8003434:	1dfb      	adds	r3, r7, #7
 8003436:	781b      	ldrb	r3, [r3, #0]
 8003438:	b25b      	sxtb	r3, r3
 800343a:	089b      	lsrs	r3, r3, #2
 800343c:	33c0      	adds	r3, #192	@ 0xc0
 800343e:	009b      	lsls	r3, r3, #2
 8003440:	589b      	ldr	r3, [r3, r2]
 8003442:	1dfa      	adds	r2, r7, #7
 8003444:	7812      	ldrb	r2, [r2, #0]
 8003446:	0011      	movs	r1, r2
 8003448:	2203      	movs	r2, #3
 800344a:	400a      	ands	r2, r1
 800344c:	00d2      	lsls	r2, r2, #3
 800344e:	21ff      	movs	r1, #255	@ 0xff
 8003450:	4091      	lsls	r1, r2
 8003452:	000a      	movs	r2, r1
 8003454:	43d2      	mvns	r2, r2
 8003456:	401a      	ands	r2, r3
 8003458:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	019b      	lsls	r3, r3, #6
 800345e:	22ff      	movs	r2, #255	@ 0xff
 8003460:	401a      	ands	r2, r3
 8003462:	1dfb      	adds	r3, r7, #7
 8003464:	781b      	ldrb	r3, [r3, #0]
 8003466:	0018      	movs	r0, r3
 8003468:	2303      	movs	r3, #3
 800346a:	4003      	ands	r3, r0
 800346c:	00db      	lsls	r3, r3, #3
 800346e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003470:	481f      	ldr	r0, [pc, #124]	@ (80034f0 <__NVIC_SetPriority+0xd4>)
 8003472:	1dfb      	adds	r3, r7, #7
 8003474:	781b      	ldrb	r3, [r3, #0]
 8003476:	b25b      	sxtb	r3, r3
 8003478:	089b      	lsrs	r3, r3, #2
 800347a:	430a      	orrs	r2, r1
 800347c:	33c0      	adds	r3, #192	@ 0xc0
 800347e:	009b      	lsls	r3, r3, #2
 8003480:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003482:	e031      	b.n	80034e8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003484:	4a1b      	ldr	r2, [pc, #108]	@ (80034f4 <__NVIC_SetPriority+0xd8>)
 8003486:	1dfb      	adds	r3, r7, #7
 8003488:	781b      	ldrb	r3, [r3, #0]
 800348a:	0019      	movs	r1, r3
 800348c:	230f      	movs	r3, #15
 800348e:	400b      	ands	r3, r1
 8003490:	3b08      	subs	r3, #8
 8003492:	089b      	lsrs	r3, r3, #2
 8003494:	3306      	adds	r3, #6
 8003496:	009b      	lsls	r3, r3, #2
 8003498:	18d3      	adds	r3, r2, r3
 800349a:	3304      	adds	r3, #4
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	1dfa      	adds	r2, r7, #7
 80034a0:	7812      	ldrb	r2, [r2, #0]
 80034a2:	0011      	movs	r1, r2
 80034a4:	2203      	movs	r2, #3
 80034a6:	400a      	ands	r2, r1
 80034a8:	00d2      	lsls	r2, r2, #3
 80034aa:	21ff      	movs	r1, #255	@ 0xff
 80034ac:	4091      	lsls	r1, r2
 80034ae:	000a      	movs	r2, r1
 80034b0:	43d2      	mvns	r2, r2
 80034b2:	401a      	ands	r2, r3
 80034b4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	019b      	lsls	r3, r3, #6
 80034ba:	22ff      	movs	r2, #255	@ 0xff
 80034bc:	401a      	ands	r2, r3
 80034be:	1dfb      	adds	r3, r7, #7
 80034c0:	781b      	ldrb	r3, [r3, #0]
 80034c2:	0018      	movs	r0, r3
 80034c4:	2303      	movs	r3, #3
 80034c6:	4003      	ands	r3, r0
 80034c8:	00db      	lsls	r3, r3, #3
 80034ca:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80034cc:	4809      	ldr	r0, [pc, #36]	@ (80034f4 <__NVIC_SetPriority+0xd8>)
 80034ce:	1dfb      	adds	r3, r7, #7
 80034d0:	781b      	ldrb	r3, [r3, #0]
 80034d2:	001c      	movs	r4, r3
 80034d4:	230f      	movs	r3, #15
 80034d6:	4023      	ands	r3, r4
 80034d8:	3b08      	subs	r3, #8
 80034da:	089b      	lsrs	r3, r3, #2
 80034dc:	430a      	orrs	r2, r1
 80034de:	3306      	adds	r3, #6
 80034e0:	009b      	lsls	r3, r3, #2
 80034e2:	18c3      	adds	r3, r0, r3
 80034e4:	3304      	adds	r3, #4
 80034e6:	601a      	str	r2, [r3, #0]
}
 80034e8:	46c0      	nop			@ (mov r8, r8)
 80034ea:	46bd      	mov	sp, r7
 80034ec:	b003      	add	sp, #12
 80034ee:	bd90      	pop	{r4, r7, pc}
 80034f0:	e000e100 	.word	0xe000e100
 80034f4:	e000ed00 	.word	0xe000ed00

080034f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b082      	sub	sp, #8
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	1e5a      	subs	r2, r3, #1
 8003504:	2380      	movs	r3, #128	@ 0x80
 8003506:	045b      	lsls	r3, r3, #17
 8003508:	429a      	cmp	r2, r3
 800350a:	d301      	bcc.n	8003510 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800350c:	2301      	movs	r3, #1
 800350e:	e010      	b.n	8003532 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003510:	4b0a      	ldr	r3, [pc, #40]	@ (800353c <SysTick_Config+0x44>)
 8003512:	687a      	ldr	r2, [r7, #4]
 8003514:	3a01      	subs	r2, #1
 8003516:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003518:	2301      	movs	r3, #1
 800351a:	425b      	negs	r3, r3
 800351c:	2103      	movs	r1, #3
 800351e:	0018      	movs	r0, r3
 8003520:	f7ff ff7c 	bl	800341c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003524:	4b05      	ldr	r3, [pc, #20]	@ (800353c <SysTick_Config+0x44>)
 8003526:	2200      	movs	r2, #0
 8003528:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800352a:	4b04      	ldr	r3, [pc, #16]	@ (800353c <SysTick_Config+0x44>)
 800352c:	2207      	movs	r2, #7
 800352e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003530:	2300      	movs	r3, #0
}
 8003532:	0018      	movs	r0, r3
 8003534:	46bd      	mov	sp, r7
 8003536:	b002      	add	sp, #8
 8003538:	bd80      	pop	{r7, pc}
 800353a:	46c0      	nop			@ (mov r8, r8)
 800353c:	e000e010 	.word	0xe000e010

08003540 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b084      	sub	sp, #16
 8003544:	af00      	add	r7, sp, #0
 8003546:	60b9      	str	r1, [r7, #8]
 8003548:	607a      	str	r2, [r7, #4]
 800354a:	210f      	movs	r1, #15
 800354c:	187b      	adds	r3, r7, r1
 800354e:	1c02      	adds	r2, r0, #0
 8003550:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8003552:	68ba      	ldr	r2, [r7, #8]
 8003554:	187b      	adds	r3, r7, r1
 8003556:	781b      	ldrb	r3, [r3, #0]
 8003558:	b25b      	sxtb	r3, r3
 800355a:	0011      	movs	r1, r2
 800355c:	0018      	movs	r0, r3
 800355e:	f7ff ff5d 	bl	800341c <__NVIC_SetPriority>
}
 8003562:	46c0      	nop			@ (mov r8, r8)
 8003564:	46bd      	mov	sp, r7
 8003566:	b004      	add	sp, #16
 8003568:	bd80      	pop	{r7, pc}

0800356a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800356a:	b580      	push	{r7, lr}
 800356c:	b082      	sub	sp, #8
 800356e:	af00      	add	r7, sp, #0
 8003570:	0002      	movs	r2, r0
 8003572:	1dfb      	adds	r3, r7, #7
 8003574:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003576:	1dfb      	adds	r3, r7, #7
 8003578:	781b      	ldrb	r3, [r3, #0]
 800357a:	b25b      	sxtb	r3, r3
 800357c:	0018      	movs	r0, r3
 800357e:	f7ff ff33 	bl	80033e8 <__NVIC_EnableIRQ>
}
 8003582:	46c0      	nop			@ (mov r8, r8)
 8003584:	46bd      	mov	sp, r7
 8003586:	b002      	add	sp, #8
 8003588:	bd80      	pop	{r7, pc}

0800358a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800358a:	b580      	push	{r7, lr}
 800358c:	b082      	sub	sp, #8
 800358e:	af00      	add	r7, sp, #0
 8003590:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	0018      	movs	r0, r3
 8003596:	f7ff ffaf 	bl	80034f8 <SysTick_Config>
 800359a:	0003      	movs	r3, r0
}
 800359c:	0018      	movs	r0, r3
 800359e:	46bd      	mov	sp, r7
 80035a0:	b002      	add	sp, #8
 80035a2:	bd80      	pop	{r7, pc}

080035a4 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b082      	sub	sp, #8
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d101      	bne.n	80035b6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	e077      	b.n	80036a6 <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a3d      	ldr	r2, [pc, #244]	@ (80036b0 <HAL_DMA_Init+0x10c>)
 80035bc:	4694      	mov	ip, r2
 80035be:	4463      	add	r3, ip
 80035c0:	2114      	movs	r1, #20
 80035c2:	0018      	movs	r0, r3
 80035c4:	f7fc fd9c 	bl	8000100 <__udivsi3>
 80035c8:	0003      	movs	r3, r0
 80035ca:	009a      	lsls	r2, r3, #2
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	641a      	str	r2, [r3, #64]	@ 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2225      	movs	r2, #37	@ 0x25
 80035d4:	2102      	movs	r1, #2
 80035d6:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	681a      	ldr	r2, [r3, #0]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4934      	ldr	r1, [pc, #208]	@ (80036b4 <HAL_DMA_Init+0x110>)
 80035e4:	400a      	ands	r2, r1
 80035e6:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	6819      	ldr	r1, [r3, #0]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	689a      	ldr	r2, [r3, #8]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	68db      	ldr	r3, [r3, #12]
 80035f6:	431a      	orrs	r2, r3
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	691b      	ldr	r3, [r3, #16]
 80035fc:	431a      	orrs	r2, r3
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	695b      	ldr	r3, [r3, #20]
 8003602:	431a      	orrs	r2, r3
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	699b      	ldr	r3, [r3, #24]
 8003608:	431a      	orrs	r2, r3
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	69db      	ldr	r3, [r3, #28]
 800360e:	431a      	orrs	r2, r3
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6a1b      	ldr	r3, [r3, #32]
 8003614:	431a      	orrs	r2, r3
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	430a      	orrs	r2, r1
 800361c:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	0018      	movs	r0, r3
 8003622:	f000 fa23 	bl	8003a6c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	689a      	ldr	r2, [r3, #8]
 800362a:	2380      	movs	r3, #128	@ 0x80
 800362c:	01db      	lsls	r3, r3, #7
 800362e:	429a      	cmp	r2, r3
 8003630:	d102      	bne.n	8003638 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2200      	movs	r2, #0
 8003636:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	685a      	ldr	r2, [r3, #4]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003640:	213f      	movs	r1, #63	@ 0x3f
 8003642:	400a      	ands	r2, r1
 8003644:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800364a:	687a      	ldr	r2, [r7, #4]
 800364c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800364e:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d011      	beq.n	800367c <HAL_DMA_Init+0xd8>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	2b04      	cmp	r3, #4
 800365e:	d80d      	bhi.n	800367c <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	0018      	movs	r0, r3
 8003664:	f000 fa2e 	bl	8003ac4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800366c:	2200      	movs	r2, #0
 800366e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003674:	687a      	ldr	r2, [r7, #4]
 8003676:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8003678:	605a      	str	r2, [r3, #4]
 800367a:	e008      	b.n	800368e <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2200      	movs	r2, #0
 8003680:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2200      	movs	r2, #0
 8003686:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2200      	movs	r2, #0
 800368c:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2200      	movs	r2, #0
 8003692:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2225      	movs	r2, #37	@ 0x25
 8003698:	2101      	movs	r1, #1
 800369a:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2224      	movs	r2, #36	@ 0x24
 80036a0:	2100      	movs	r1, #0
 80036a2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80036a4:	2300      	movs	r3, #0
}
 80036a6:	0018      	movs	r0, r3
 80036a8:	46bd      	mov	sp, r7
 80036aa:	b002      	add	sp, #8
 80036ac:	bd80      	pop	{r7, pc}
 80036ae:	46c0      	nop			@ (mov r8, r8)
 80036b0:	bffdfff8 	.word	0xbffdfff8
 80036b4:	ffff800f 	.word	0xffff800f

080036b8 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b086      	sub	sp, #24
 80036bc:	af00      	add	r7, sp, #0
 80036be:	60f8      	str	r0, [r7, #12]
 80036c0:	60b9      	str	r1, [r7, #8]
 80036c2:	607a      	str	r2, [r7, #4]
 80036c4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80036c6:	2317      	movs	r3, #23
 80036c8:	18fb      	adds	r3, r7, r3
 80036ca:	2200      	movs	r2, #0
 80036cc:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	2224      	movs	r2, #36	@ 0x24
 80036d2:	5c9b      	ldrb	r3, [r3, r2]
 80036d4:	2b01      	cmp	r3, #1
 80036d6:	d101      	bne.n	80036dc <HAL_DMA_Start_IT+0x24>
 80036d8:	2302      	movs	r3, #2
 80036da:	e06f      	b.n	80037bc <HAL_DMA_Start_IT+0x104>
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	2224      	movs	r2, #36	@ 0x24
 80036e0:	2101      	movs	r1, #1
 80036e2:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	2225      	movs	r2, #37	@ 0x25
 80036e8:	5c9b      	ldrb	r3, [r3, r2]
 80036ea:	b2db      	uxtb	r3, r3
 80036ec:	2b01      	cmp	r3, #1
 80036ee:	d157      	bne.n	80037a0 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2225      	movs	r2, #37	@ 0x25
 80036f4:	2102      	movs	r1, #2
 80036f6:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	2200      	movs	r2, #0
 80036fc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	681a      	ldr	r2, [r3, #0]
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	2101      	movs	r1, #1
 800370a:	438a      	bics	r2, r1
 800370c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	687a      	ldr	r2, [r7, #4]
 8003712:	68b9      	ldr	r1, [r7, #8]
 8003714:	68f8      	ldr	r0, [r7, #12]
 8003716:	f000 f969 	bl	80039ec <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800371e:	2b00      	cmp	r3, #0
 8003720:	d008      	beq.n	8003734 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	681a      	ldr	r2, [r3, #0]
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	210e      	movs	r1, #14
 800372e:	430a      	orrs	r2, r1
 8003730:	601a      	str	r2, [r3, #0]
 8003732:	e00f      	b.n	8003754 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	681a      	ldr	r2, [r3, #0]
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	2104      	movs	r1, #4
 8003740:	438a      	bics	r2, r1
 8003742:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	681a      	ldr	r2, [r3, #0]
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	210a      	movs	r1, #10
 8003750:	430a      	orrs	r2, r1
 8003752:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003758:	681a      	ldr	r2, [r3, #0]
 800375a:	2380      	movs	r3, #128	@ 0x80
 800375c:	025b      	lsls	r3, r3, #9
 800375e:	4013      	ands	r3, r2
 8003760:	d008      	beq.n	8003774 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003766:	681a      	ldr	r2, [r3, #0]
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800376c:	2180      	movs	r1, #128	@ 0x80
 800376e:	0049      	lsls	r1, r1, #1
 8003770:	430a      	orrs	r2, r1
 8003772:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003778:	2b00      	cmp	r3, #0
 800377a:	d008      	beq.n	800378e <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003780:	681a      	ldr	r2, [r3, #0]
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003786:	2180      	movs	r1, #128	@ 0x80
 8003788:	0049      	lsls	r1, r1, #1
 800378a:	430a      	orrs	r2, r1
 800378c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	681a      	ldr	r2, [r3, #0]
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	2101      	movs	r1, #1
 800379a:	430a      	orrs	r2, r1
 800379c:	601a      	str	r2, [r3, #0]
 800379e:	e00a      	b.n	80037b6 <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2280      	movs	r2, #128	@ 0x80
 80037a4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	2224      	movs	r2, #36	@ 0x24
 80037aa:	2100      	movs	r1, #0
 80037ac:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 80037ae:	2317      	movs	r3, #23
 80037b0:	18fb      	adds	r3, r7, r3
 80037b2:	2201      	movs	r2, #1
 80037b4:	701a      	strb	r2, [r3, #0]
  }

  return status;
 80037b6:	2317      	movs	r3, #23
 80037b8:	18fb      	adds	r3, r7, r3
 80037ba:	781b      	ldrb	r3, [r3, #0]
}
 80037bc:	0018      	movs	r0, r3
 80037be:	46bd      	mov	sp, r7
 80037c0:	b006      	add	sp, #24
 80037c2:	bd80      	pop	{r7, pc}

080037c4 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b082      	sub	sp, #8
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d101      	bne.n	80037d6 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	e050      	b.n	8003878 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2225      	movs	r2, #37	@ 0x25
 80037da:	5c9b      	ldrb	r3, [r3, r2]
 80037dc:	b2db      	uxtb	r3, r3
 80037de:	2b02      	cmp	r3, #2
 80037e0:	d008      	beq.n	80037f4 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2204      	movs	r2, #4
 80037e6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2224      	movs	r2, #36	@ 0x24
 80037ec:	2100      	movs	r1, #0
 80037ee:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80037f0:	2301      	movs	r3, #1
 80037f2:	e041      	b.n	8003878 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	681a      	ldr	r2, [r3, #0]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	210e      	movs	r1, #14
 8003800:	438a      	bics	r2, r1
 8003802:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003808:	681a      	ldr	r2, [r3, #0]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800380e:	491c      	ldr	r1, [pc, #112]	@ (8003880 <HAL_DMA_Abort+0xbc>)
 8003810:	400a      	ands	r2, r1
 8003812:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	2101      	movs	r1, #1
 8003820:	438a      	bics	r2, r1
 8003822:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8003824:	4b17      	ldr	r3, [pc, #92]	@ (8003884 <HAL_DMA_Abort+0xc0>)
 8003826:	6859      	ldr	r1, [r3, #4]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800382c:	221c      	movs	r2, #28
 800382e:	4013      	ands	r3, r2
 8003830:	2201      	movs	r2, #1
 8003832:	409a      	lsls	r2, r3
 8003834:	4b13      	ldr	r3, [pc, #76]	@ (8003884 <HAL_DMA_Abort+0xc0>)
 8003836:	430a      	orrs	r2, r1
 8003838:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800383e:	687a      	ldr	r2, [r7, #4]
 8003840:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003842:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003848:	2b00      	cmp	r3, #0
 800384a:	d00c      	beq.n	8003866 <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003850:	681a      	ldr	r2, [r3, #0]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003856:	490a      	ldr	r1, [pc, #40]	@ (8003880 <HAL_DMA_Abort+0xbc>)
 8003858:	400a      	ands	r2, r1
 800385a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003860:	687a      	ldr	r2, [r7, #4]
 8003862:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8003864:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2225      	movs	r2, #37	@ 0x25
 800386a:	2101      	movs	r1, #1
 800386c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2224      	movs	r2, #36	@ 0x24
 8003872:	2100      	movs	r1, #0
 8003874:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8003876:	2300      	movs	r3, #0
}
 8003878:	0018      	movs	r0, r3
 800387a:	46bd      	mov	sp, r7
 800387c:	b002      	add	sp, #8
 800387e:	bd80      	pop	{r7, pc}
 8003880:	fffffeff 	.word	0xfffffeff
 8003884:	40020000 	.word	0x40020000

08003888 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b084      	sub	sp, #16
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8003890:	4b55      	ldr	r3, [pc, #340]	@ (80039e8 <HAL_DMA_IRQHandler+0x160>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038a2:	221c      	movs	r2, #28
 80038a4:	4013      	ands	r3, r2
 80038a6:	2204      	movs	r2, #4
 80038a8:	409a      	lsls	r2, r3
 80038aa:	0013      	movs	r3, r2
 80038ac:	68fa      	ldr	r2, [r7, #12]
 80038ae:	4013      	ands	r3, r2
 80038b0:	d027      	beq.n	8003902 <HAL_DMA_IRQHandler+0x7a>
 80038b2:	68bb      	ldr	r3, [r7, #8]
 80038b4:	2204      	movs	r2, #4
 80038b6:	4013      	ands	r3, r2
 80038b8:	d023      	beq.n	8003902 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	2220      	movs	r2, #32
 80038c2:	4013      	ands	r3, r2
 80038c4:	d107      	bne.n	80038d6 <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	681a      	ldr	r2, [r3, #0]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	2104      	movs	r1, #4
 80038d2:	438a      	bics	r2, r1
 80038d4:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 80038d6:	4b44      	ldr	r3, [pc, #272]	@ (80039e8 <HAL_DMA_IRQHandler+0x160>)
 80038d8:	6859      	ldr	r1, [r3, #4]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038de:	221c      	movs	r2, #28
 80038e0:	4013      	ands	r3, r2
 80038e2:	2204      	movs	r2, #4
 80038e4:	409a      	lsls	r2, r3
 80038e6:	4b40      	ldr	r3, [pc, #256]	@ (80039e8 <HAL_DMA_IRQHandler+0x160>)
 80038e8:	430a      	orrs	r2, r1
 80038ea:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d100      	bne.n	80038f6 <HAL_DMA_IRQHandler+0x6e>
 80038f4:	e073      	b.n	80039de <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038fa:	687a      	ldr	r2, [r7, #4]
 80038fc:	0010      	movs	r0, r2
 80038fe:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8003900:	e06d      	b.n	80039de <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003906:	221c      	movs	r2, #28
 8003908:	4013      	ands	r3, r2
 800390a:	2202      	movs	r2, #2
 800390c:	409a      	lsls	r2, r3
 800390e:	0013      	movs	r3, r2
 8003910:	68fa      	ldr	r2, [r7, #12]
 8003912:	4013      	ands	r3, r2
 8003914:	d02e      	beq.n	8003974 <HAL_DMA_IRQHandler+0xec>
 8003916:	68bb      	ldr	r3, [r7, #8]
 8003918:	2202      	movs	r2, #2
 800391a:	4013      	ands	r3, r2
 800391c:	d02a      	beq.n	8003974 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	2220      	movs	r2, #32
 8003926:	4013      	ands	r3, r2
 8003928:	d10b      	bne.n	8003942 <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	681a      	ldr	r2, [r3, #0]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	210a      	movs	r1, #10
 8003936:	438a      	bics	r2, r1
 8003938:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2225      	movs	r2, #37	@ 0x25
 800393e:	2101      	movs	r1, #1
 8003940:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8003942:	4b29      	ldr	r3, [pc, #164]	@ (80039e8 <HAL_DMA_IRQHandler+0x160>)
 8003944:	6859      	ldr	r1, [r3, #4]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800394a:	221c      	movs	r2, #28
 800394c:	4013      	ands	r3, r2
 800394e:	2202      	movs	r2, #2
 8003950:	409a      	lsls	r2, r3
 8003952:	4b25      	ldr	r3, [pc, #148]	@ (80039e8 <HAL_DMA_IRQHandler+0x160>)
 8003954:	430a      	orrs	r2, r1
 8003956:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2224      	movs	r2, #36	@ 0x24
 800395c:	2100      	movs	r1, #0
 800395e:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003964:	2b00      	cmp	r3, #0
 8003966:	d03a      	beq.n	80039de <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800396c:	687a      	ldr	r2, [r7, #4]
 800396e:	0010      	movs	r0, r2
 8003970:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8003972:	e034      	b.n	80039de <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003978:	221c      	movs	r2, #28
 800397a:	4013      	ands	r3, r2
 800397c:	2208      	movs	r2, #8
 800397e:	409a      	lsls	r2, r3
 8003980:	0013      	movs	r3, r2
 8003982:	68fa      	ldr	r2, [r7, #12]
 8003984:	4013      	ands	r3, r2
 8003986:	d02b      	beq.n	80039e0 <HAL_DMA_IRQHandler+0x158>
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	2208      	movs	r2, #8
 800398c:	4013      	ands	r3, r2
 800398e:	d027      	beq.n	80039e0 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	681a      	ldr	r2, [r3, #0]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	210e      	movs	r1, #14
 800399c:	438a      	bics	r2, r1
 800399e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 80039a0:	4b11      	ldr	r3, [pc, #68]	@ (80039e8 <HAL_DMA_IRQHandler+0x160>)
 80039a2:	6859      	ldr	r1, [r3, #4]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039a8:	221c      	movs	r2, #28
 80039aa:	4013      	ands	r3, r2
 80039ac:	2201      	movs	r2, #1
 80039ae:	409a      	lsls	r2, r3
 80039b0:	4b0d      	ldr	r3, [pc, #52]	@ (80039e8 <HAL_DMA_IRQHandler+0x160>)
 80039b2:	430a      	orrs	r2, r1
 80039b4:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2201      	movs	r2, #1
 80039ba:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2225      	movs	r2, #37	@ 0x25
 80039c0:	2101      	movs	r1, #1
 80039c2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2224      	movs	r2, #36	@ 0x24
 80039c8:	2100      	movs	r1, #0
 80039ca:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d005      	beq.n	80039e0 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039d8:	687a      	ldr	r2, [r7, #4]
 80039da:	0010      	movs	r0, r2
 80039dc:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80039de:	46c0      	nop			@ (mov r8, r8)
 80039e0:	46c0      	nop			@ (mov r8, r8)
}
 80039e2:	46bd      	mov	sp, r7
 80039e4:	b004      	add	sp, #16
 80039e6:	bd80      	pop	{r7, pc}
 80039e8:	40020000 	.word	0x40020000

080039ec <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b084      	sub	sp, #16
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	60f8      	str	r0, [r7, #12]
 80039f4:	60b9      	str	r1, [r7, #8]
 80039f6:	607a      	str	r2, [r7, #4]
 80039f8:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80039fe:	68fa      	ldr	r2, [r7, #12]
 8003a00:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003a02:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d004      	beq.n	8003a16 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a10:	68fa      	ldr	r2, [r7, #12]
 8003a12:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8003a14:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8003a16:	4b14      	ldr	r3, [pc, #80]	@ (8003a68 <DMA_SetConfig+0x7c>)
 8003a18:	6859      	ldr	r1, [r3, #4]
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a1e:	221c      	movs	r2, #28
 8003a20:	4013      	ands	r3, r2
 8003a22:	2201      	movs	r2, #1
 8003a24:	409a      	lsls	r2, r3
 8003a26:	4b10      	ldr	r3, [pc, #64]	@ (8003a68 <DMA_SetConfig+0x7c>)
 8003a28:	430a      	orrs	r2, r1
 8003a2a:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	683a      	ldr	r2, [r7, #0]
 8003a32:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	2b10      	cmp	r3, #16
 8003a3a:	d108      	bne.n	8003a4e <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	687a      	ldr	r2, [r7, #4]
 8003a42:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	68ba      	ldr	r2, [r7, #8]
 8003a4a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003a4c:	e007      	b.n	8003a5e <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	68ba      	ldr	r2, [r7, #8]
 8003a54:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	687a      	ldr	r2, [r7, #4]
 8003a5c:	60da      	str	r2, [r3, #12]
}
 8003a5e:	46c0      	nop			@ (mov r8, r8)
 8003a60:	46bd      	mov	sp, r7
 8003a62:	b004      	add	sp, #16
 8003a64:	bd80      	pop	{r7, pc}
 8003a66:	46c0      	nop			@ (mov r8, r8)
 8003a68:	40020000 	.word	0x40020000

08003a6c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b084      	sub	sp, #16
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a78:	089b      	lsrs	r3, r3, #2
 8003a7a:	4a10      	ldr	r2, [pc, #64]	@ (8003abc <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8003a7c:	4694      	mov	ip, r2
 8003a7e:	4463      	add	r3, ip
 8003a80:	009b      	lsls	r3, r3, #2
 8003a82:	001a      	movs	r2, r3
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	001a      	movs	r2, r3
 8003a8e:	23ff      	movs	r3, #255	@ 0xff
 8003a90:	4013      	ands	r3, r2
 8003a92:	3b08      	subs	r3, #8
 8003a94:	2114      	movs	r1, #20
 8003a96:	0018      	movs	r0, r3
 8003a98:	f7fc fb32 	bl	8000100 <__udivsi3>
 8003a9c:	0003      	movs	r3, r0
 8003a9e:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	4a07      	ldr	r2, [pc, #28]	@ (8003ac0 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8003aa4:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	221f      	movs	r2, #31
 8003aaa:	4013      	ands	r3, r2
 8003aac:	2201      	movs	r2, #1
 8003aae:	409a      	lsls	r2, r3
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8003ab4:	46c0      	nop			@ (mov r8, r8)
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	b004      	add	sp, #16
 8003aba:	bd80      	pop	{r7, pc}
 8003abc:	10008200 	.word	0x10008200
 8003ac0:	40020880 	.word	0x40020880

08003ac4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b084      	sub	sp, #16
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	223f      	movs	r2, #63	@ 0x3f
 8003ad2:	4013      	ands	r3, r2
 8003ad4:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	4a0a      	ldr	r2, [pc, #40]	@ (8003b04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003ada:	4694      	mov	ip, r2
 8003adc:	4463      	add	r3, ip
 8003ade:	009b      	lsls	r3, r3, #2
 8003ae0:	001a      	movs	r2, r3
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	651a      	str	r2, [r3, #80]	@ 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	4a07      	ldr	r2, [pc, #28]	@ (8003b08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003aea:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	3b01      	subs	r3, #1
 8003af0:	2203      	movs	r2, #3
 8003af2:	4013      	ands	r3, r2
 8003af4:	2201      	movs	r2, #1
 8003af6:	409a      	lsls	r2, r3
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	659a      	str	r2, [r3, #88]	@ 0x58
}
 8003afc:	46c0      	nop			@ (mov r8, r8)
 8003afe:	46bd      	mov	sp, r7
 8003b00:	b004      	add	sp, #16
 8003b02:	bd80      	pop	{r7, pc}
 8003b04:	1000823f 	.word	0x1000823f
 8003b08:	40020940 	.word	0x40020940

08003b0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b086      	sub	sp, #24
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
 8003b14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003b16:	2300      	movs	r3, #0
 8003b18:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b1a:	e147      	b.n	8003dac <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	2101      	movs	r1, #1
 8003b22:	697a      	ldr	r2, [r7, #20]
 8003b24:	4091      	lsls	r1, r2
 8003b26:	000a      	movs	r2, r1
 8003b28:	4013      	ands	r3, r2
 8003b2a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d100      	bne.n	8003b34 <HAL_GPIO_Init+0x28>
 8003b32:	e138      	b.n	8003da6 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	2203      	movs	r2, #3
 8003b3a:	4013      	ands	r3, r2
 8003b3c:	2b01      	cmp	r3, #1
 8003b3e:	d005      	beq.n	8003b4c <HAL_GPIO_Init+0x40>
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	2203      	movs	r2, #3
 8003b46:	4013      	ands	r3, r2
 8003b48:	2b02      	cmp	r3, #2
 8003b4a:	d130      	bne.n	8003bae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	689b      	ldr	r3, [r3, #8]
 8003b50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	005b      	lsls	r3, r3, #1
 8003b56:	2203      	movs	r2, #3
 8003b58:	409a      	lsls	r2, r3
 8003b5a:	0013      	movs	r3, r2
 8003b5c:	43da      	mvns	r2, r3
 8003b5e:	693b      	ldr	r3, [r7, #16]
 8003b60:	4013      	ands	r3, r2
 8003b62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	68da      	ldr	r2, [r3, #12]
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	005b      	lsls	r3, r3, #1
 8003b6c:	409a      	lsls	r2, r3
 8003b6e:	0013      	movs	r3, r2
 8003b70:	693a      	ldr	r2, [r7, #16]
 8003b72:	4313      	orrs	r3, r2
 8003b74:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	693a      	ldr	r2, [r7, #16]
 8003b7a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003b82:	2201      	movs	r2, #1
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	409a      	lsls	r2, r3
 8003b88:	0013      	movs	r3, r2
 8003b8a:	43da      	mvns	r2, r3
 8003b8c:	693b      	ldr	r3, [r7, #16]
 8003b8e:	4013      	ands	r3, r2
 8003b90:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	091b      	lsrs	r3, r3, #4
 8003b98:	2201      	movs	r2, #1
 8003b9a:	401a      	ands	r2, r3
 8003b9c:	697b      	ldr	r3, [r7, #20]
 8003b9e:	409a      	lsls	r2, r3
 8003ba0:	0013      	movs	r3, r2
 8003ba2:	693a      	ldr	r2, [r7, #16]
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	693a      	ldr	r2, [r7, #16]
 8003bac:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	2203      	movs	r2, #3
 8003bb4:	4013      	ands	r3, r2
 8003bb6:	2b03      	cmp	r3, #3
 8003bb8:	d017      	beq.n	8003bea <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	68db      	ldr	r3, [r3, #12]
 8003bbe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	005b      	lsls	r3, r3, #1
 8003bc4:	2203      	movs	r2, #3
 8003bc6:	409a      	lsls	r2, r3
 8003bc8:	0013      	movs	r3, r2
 8003bca:	43da      	mvns	r2, r3
 8003bcc:	693b      	ldr	r3, [r7, #16]
 8003bce:	4013      	ands	r3, r2
 8003bd0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	689a      	ldr	r2, [r3, #8]
 8003bd6:	697b      	ldr	r3, [r7, #20]
 8003bd8:	005b      	lsls	r3, r3, #1
 8003bda:	409a      	lsls	r2, r3
 8003bdc:	0013      	movs	r3, r2
 8003bde:	693a      	ldr	r2, [r7, #16]
 8003be0:	4313      	orrs	r3, r2
 8003be2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	693a      	ldr	r2, [r7, #16]
 8003be8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	2203      	movs	r2, #3
 8003bf0:	4013      	ands	r3, r2
 8003bf2:	2b02      	cmp	r3, #2
 8003bf4:	d123      	bne.n	8003c3e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003bf6:	697b      	ldr	r3, [r7, #20]
 8003bf8:	08da      	lsrs	r2, r3, #3
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	3208      	adds	r2, #8
 8003bfe:	0092      	lsls	r2, r2, #2
 8003c00:	58d3      	ldr	r3, [r2, r3]
 8003c02:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003c04:	697b      	ldr	r3, [r7, #20]
 8003c06:	2207      	movs	r2, #7
 8003c08:	4013      	ands	r3, r2
 8003c0a:	009b      	lsls	r3, r3, #2
 8003c0c:	220f      	movs	r2, #15
 8003c0e:	409a      	lsls	r2, r3
 8003c10:	0013      	movs	r3, r2
 8003c12:	43da      	mvns	r2, r3
 8003c14:	693b      	ldr	r3, [r7, #16]
 8003c16:	4013      	ands	r3, r2
 8003c18:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	691a      	ldr	r2, [r3, #16]
 8003c1e:	697b      	ldr	r3, [r7, #20]
 8003c20:	2107      	movs	r1, #7
 8003c22:	400b      	ands	r3, r1
 8003c24:	009b      	lsls	r3, r3, #2
 8003c26:	409a      	lsls	r2, r3
 8003c28:	0013      	movs	r3, r2
 8003c2a:	693a      	ldr	r2, [r7, #16]
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003c30:	697b      	ldr	r3, [r7, #20]
 8003c32:	08da      	lsrs	r2, r3, #3
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	3208      	adds	r2, #8
 8003c38:	0092      	lsls	r2, r2, #2
 8003c3a:	6939      	ldr	r1, [r7, #16]
 8003c3c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003c44:	697b      	ldr	r3, [r7, #20]
 8003c46:	005b      	lsls	r3, r3, #1
 8003c48:	2203      	movs	r2, #3
 8003c4a:	409a      	lsls	r2, r3
 8003c4c:	0013      	movs	r3, r2
 8003c4e:	43da      	mvns	r2, r3
 8003c50:	693b      	ldr	r3, [r7, #16]
 8003c52:	4013      	ands	r3, r2
 8003c54:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	2203      	movs	r2, #3
 8003c5c:	401a      	ands	r2, r3
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	005b      	lsls	r3, r3, #1
 8003c62:	409a      	lsls	r2, r3
 8003c64:	0013      	movs	r3, r2
 8003c66:	693a      	ldr	r2, [r7, #16]
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	693a      	ldr	r2, [r7, #16]
 8003c70:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	685a      	ldr	r2, [r3, #4]
 8003c76:	23c0      	movs	r3, #192	@ 0xc0
 8003c78:	029b      	lsls	r3, r3, #10
 8003c7a:	4013      	ands	r3, r2
 8003c7c:	d100      	bne.n	8003c80 <HAL_GPIO_Init+0x174>
 8003c7e:	e092      	b.n	8003da6 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8003c80:	4a50      	ldr	r2, [pc, #320]	@ (8003dc4 <HAL_GPIO_Init+0x2b8>)
 8003c82:	697b      	ldr	r3, [r7, #20]
 8003c84:	089b      	lsrs	r3, r3, #2
 8003c86:	3318      	adds	r3, #24
 8003c88:	009b      	lsls	r3, r3, #2
 8003c8a:	589b      	ldr	r3, [r3, r2]
 8003c8c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8003c8e:	697b      	ldr	r3, [r7, #20]
 8003c90:	2203      	movs	r2, #3
 8003c92:	4013      	ands	r3, r2
 8003c94:	00db      	lsls	r3, r3, #3
 8003c96:	220f      	movs	r2, #15
 8003c98:	409a      	lsls	r2, r3
 8003c9a:	0013      	movs	r3, r2
 8003c9c:	43da      	mvns	r2, r3
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	4013      	ands	r3, r2
 8003ca2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8003ca4:	687a      	ldr	r2, [r7, #4]
 8003ca6:	23a0      	movs	r3, #160	@ 0xa0
 8003ca8:	05db      	lsls	r3, r3, #23
 8003caa:	429a      	cmp	r2, r3
 8003cac:	d013      	beq.n	8003cd6 <HAL_GPIO_Init+0x1ca>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	4a45      	ldr	r2, [pc, #276]	@ (8003dc8 <HAL_GPIO_Init+0x2bc>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d00d      	beq.n	8003cd2 <HAL_GPIO_Init+0x1c6>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	4a44      	ldr	r2, [pc, #272]	@ (8003dcc <HAL_GPIO_Init+0x2c0>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d007      	beq.n	8003cce <HAL_GPIO_Init+0x1c2>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	4a43      	ldr	r2, [pc, #268]	@ (8003dd0 <HAL_GPIO_Init+0x2c4>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d101      	bne.n	8003cca <HAL_GPIO_Init+0x1be>
 8003cc6:	2303      	movs	r3, #3
 8003cc8:	e006      	b.n	8003cd8 <HAL_GPIO_Init+0x1cc>
 8003cca:	2305      	movs	r3, #5
 8003ccc:	e004      	b.n	8003cd8 <HAL_GPIO_Init+0x1cc>
 8003cce:	2302      	movs	r3, #2
 8003cd0:	e002      	b.n	8003cd8 <HAL_GPIO_Init+0x1cc>
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e000      	b.n	8003cd8 <HAL_GPIO_Init+0x1cc>
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	697a      	ldr	r2, [r7, #20]
 8003cda:	2103      	movs	r1, #3
 8003cdc:	400a      	ands	r2, r1
 8003cde:	00d2      	lsls	r2, r2, #3
 8003ce0:	4093      	lsls	r3, r2
 8003ce2:	693a      	ldr	r2, [r7, #16]
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8003ce8:	4936      	ldr	r1, [pc, #216]	@ (8003dc4 <HAL_GPIO_Init+0x2b8>)
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	089b      	lsrs	r3, r3, #2
 8003cee:	3318      	adds	r3, #24
 8003cf0:	009b      	lsls	r3, r3, #2
 8003cf2:	693a      	ldr	r2, [r7, #16]
 8003cf4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003cf6:	4b33      	ldr	r3, [pc, #204]	@ (8003dc4 <HAL_GPIO_Init+0x2b8>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	43da      	mvns	r2, r3
 8003d00:	693b      	ldr	r3, [r7, #16]
 8003d02:	4013      	ands	r3, r2
 8003d04:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	685a      	ldr	r2, [r3, #4]
 8003d0a:	2380      	movs	r3, #128	@ 0x80
 8003d0c:	035b      	lsls	r3, r3, #13
 8003d0e:	4013      	ands	r3, r2
 8003d10:	d003      	beq.n	8003d1a <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8003d12:	693a      	ldr	r2, [r7, #16]
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	4313      	orrs	r3, r2
 8003d18:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003d1a:	4b2a      	ldr	r3, [pc, #168]	@ (8003dc4 <HAL_GPIO_Init+0x2b8>)
 8003d1c:	693a      	ldr	r2, [r7, #16]
 8003d1e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8003d20:	4b28      	ldr	r3, [pc, #160]	@ (8003dc4 <HAL_GPIO_Init+0x2b8>)
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	43da      	mvns	r2, r3
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	4013      	ands	r3, r2
 8003d2e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	685a      	ldr	r2, [r3, #4]
 8003d34:	2380      	movs	r3, #128	@ 0x80
 8003d36:	039b      	lsls	r3, r3, #14
 8003d38:	4013      	ands	r3, r2
 8003d3a:	d003      	beq.n	8003d44 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8003d3c:	693a      	ldr	r2, [r7, #16]
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	4313      	orrs	r3, r2
 8003d42:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003d44:	4b1f      	ldr	r3, [pc, #124]	@ (8003dc4 <HAL_GPIO_Init+0x2b8>)
 8003d46:	693a      	ldr	r2, [r7, #16]
 8003d48:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003d4a:	4a1e      	ldr	r2, [pc, #120]	@ (8003dc4 <HAL_GPIO_Init+0x2b8>)
 8003d4c:	2384      	movs	r3, #132	@ 0x84
 8003d4e:	58d3      	ldr	r3, [r2, r3]
 8003d50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	43da      	mvns	r2, r3
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	4013      	ands	r3, r2
 8003d5a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	685a      	ldr	r2, [r3, #4]
 8003d60:	2380      	movs	r3, #128	@ 0x80
 8003d62:	029b      	lsls	r3, r3, #10
 8003d64:	4013      	ands	r3, r2
 8003d66:	d003      	beq.n	8003d70 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8003d68:	693a      	ldr	r2, [r7, #16]
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003d70:	4914      	ldr	r1, [pc, #80]	@ (8003dc4 <HAL_GPIO_Init+0x2b8>)
 8003d72:	2284      	movs	r2, #132	@ 0x84
 8003d74:	693b      	ldr	r3, [r7, #16]
 8003d76:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8003d78:	4a12      	ldr	r2, [pc, #72]	@ (8003dc4 <HAL_GPIO_Init+0x2b8>)
 8003d7a:	2380      	movs	r3, #128	@ 0x80
 8003d7c:	58d3      	ldr	r3, [r2, r3]
 8003d7e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	43da      	mvns	r2, r3
 8003d84:	693b      	ldr	r3, [r7, #16]
 8003d86:	4013      	ands	r3, r2
 8003d88:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	685a      	ldr	r2, [r3, #4]
 8003d8e:	2380      	movs	r3, #128	@ 0x80
 8003d90:	025b      	lsls	r3, r3, #9
 8003d92:	4013      	ands	r3, r2
 8003d94:	d003      	beq.n	8003d9e <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8003d96:	693a      	ldr	r2, [r7, #16]
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003d9e:	4909      	ldr	r1, [pc, #36]	@ (8003dc4 <HAL_GPIO_Init+0x2b8>)
 8003da0:	2280      	movs	r2, #128	@ 0x80
 8003da2:	693b      	ldr	r3, [r7, #16]
 8003da4:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	3301      	adds	r3, #1
 8003daa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	681a      	ldr	r2, [r3, #0]
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	40da      	lsrs	r2, r3
 8003db4:	1e13      	subs	r3, r2, #0
 8003db6:	d000      	beq.n	8003dba <HAL_GPIO_Init+0x2ae>
 8003db8:	e6b0      	b.n	8003b1c <HAL_GPIO_Init+0x10>
  }
}
 8003dba:	46c0      	nop			@ (mov r8, r8)
 8003dbc:	46c0      	nop			@ (mov r8, r8)
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	b006      	add	sp, #24
 8003dc2:	bd80      	pop	{r7, pc}
 8003dc4:	40021800 	.word	0x40021800
 8003dc8:	50000400 	.word	0x50000400
 8003dcc:	50000800 	.word	0x50000800
 8003dd0:	50000c00 	.word	0x50000c00

08003dd4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b082      	sub	sp, #8
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
 8003ddc:	0008      	movs	r0, r1
 8003dde:	0011      	movs	r1, r2
 8003de0:	1cbb      	adds	r3, r7, #2
 8003de2:	1c02      	adds	r2, r0, #0
 8003de4:	801a      	strh	r2, [r3, #0]
 8003de6:	1c7b      	adds	r3, r7, #1
 8003de8:	1c0a      	adds	r2, r1, #0
 8003dea:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003dec:	1c7b      	adds	r3, r7, #1
 8003dee:	781b      	ldrb	r3, [r3, #0]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d004      	beq.n	8003dfe <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003df4:	1cbb      	adds	r3, r7, #2
 8003df6:	881a      	ldrh	r2, [r3, #0]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003dfc:	e003      	b.n	8003e06 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003dfe:	1cbb      	adds	r3, r7, #2
 8003e00:	881a      	ldrh	r2, [r3, #0]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003e06:	46c0      	nop			@ (mov r8, r8)
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	b002      	add	sp, #8
 8003e0c:	bd80      	pop	{r7, pc}
	...

08003e10 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b084      	sub	sp, #16
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8003e18:	4b19      	ldr	r3, [pc, #100]	@ (8003e80 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a19      	ldr	r2, [pc, #100]	@ (8003e84 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8003e1e:	4013      	ands	r3, r2
 8003e20:	0019      	movs	r1, r3
 8003e22:	4b17      	ldr	r3, [pc, #92]	@ (8003e80 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003e24:	687a      	ldr	r2, [r7, #4]
 8003e26:	430a      	orrs	r2, r1
 8003e28:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003e2a:	687a      	ldr	r2, [r7, #4]
 8003e2c:	2380      	movs	r3, #128	@ 0x80
 8003e2e:	009b      	lsls	r3, r3, #2
 8003e30:	429a      	cmp	r2, r3
 8003e32:	d11f      	bne.n	8003e74 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8003e34:	4b14      	ldr	r3, [pc, #80]	@ (8003e88 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8003e36:	681a      	ldr	r2, [r3, #0]
 8003e38:	0013      	movs	r3, r2
 8003e3a:	005b      	lsls	r3, r3, #1
 8003e3c:	189b      	adds	r3, r3, r2
 8003e3e:	005b      	lsls	r3, r3, #1
 8003e40:	4912      	ldr	r1, [pc, #72]	@ (8003e8c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8003e42:	0018      	movs	r0, r3
 8003e44:	f7fc f95c 	bl	8000100 <__udivsi3>
 8003e48:	0003      	movs	r3, r0
 8003e4a:	3301      	adds	r3, #1
 8003e4c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003e4e:	e008      	b.n	8003e62 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d003      	beq.n	8003e5e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	3b01      	subs	r3, #1
 8003e5a:	60fb      	str	r3, [r7, #12]
 8003e5c:	e001      	b.n	8003e62 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8003e5e:	2303      	movs	r3, #3
 8003e60:	e009      	b.n	8003e76 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003e62:	4b07      	ldr	r3, [pc, #28]	@ (8003e80 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003e64:	695a      	ldr	r2, [r3, #20]
 8003e66:	2380      	movs	r3, #128	@ 0x80
 8003e68:	00db      	lsls	r3, r3, #3
 8003e6a:	401a      	ands	r2, r3
 8003e6c:	2380      	movs	r3, #128	@ 0x80
 8003e6e:	00db      	lsls	r3, r3, #3
 8003e70:	429a      	cmp	r2, r3
 8003e72:	d0ed      	beq.n	8003e50 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8003e74:	2300      	movs	r3, #0
}
 8003e76:	0018      	movs	r0, r3
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	b004      	add	sp, #16
 8003e7c:	bd80      	pop	{r7, pc}
 8003e7e:	46c0      	nop			@ (mov r8, r8)
 8003e80:	40007000 	.word	0x40007000
 8003e84:	fffff9ff 	.word	0xfffff9ff
 8003e88:	20000000 	.word	0x20000000
 8003e8c:	000f4240 	.word	0x000f4240

08003e90 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b088      	sub	sp, #32
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d101      	bne.n	8003ea2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	e2f3      	b.n	800448a <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	2201      	movs	r2, #1
 8003ea8:	4013      	ands	r3, r2
 8003eaa:	d100      	bne.n	8003eae <HAL_RCC_OscConfig+0x1e>
 8003eac:	e07c      	b.n	8003fa8 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003eae:	4bc3      	ldr	r3, [pc, #780]	@ (80041bc <HAL_RCC_OscConfig+0x32c>)
 8003eb0:	689b      	ldr	r3, [r3, #8]
 8003eb2:	2238      	movs	r2, #56	@ 0x38
 8003eb4:	4013      	ands	r3, r2
 8003eb6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003eb8:	4bc0      	ldr	r3, [pc, #768]	@ (80041bc <HAL_RCC_OscConfig+0x32c>)
 8003eba:	68db      	ldr	r3, [r3, #12]
 8003ebc:	2203      	movs	r2, #3
 8003ebe:	4013      	ands	r3, r2
 8003ec0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8003ec2:	69bb      	ldr	r3, [r7, #24]
 8003ec4:	2b10      	cmp	r3, #16
 8003ec6:	d102      	bne.n	8003ece <HAL_RCC_OscConfig+0x3e>
 8003ec8:	697b      	ldr	r3, [r7, #20]
 8003eca:	2b03      	cmp	r3, #3
 8003ecc:	d002      	beq.n	8003ed4 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8003ece:	69bb      	ldr	r3, [r7, #24]
 8003ed0:	2b08      	cmp	r3, #8
 8003ed2:	d10b      	bne.n	8003eec <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ed4:	4bb9      	ldr	r3, [pc, #740]	@ (80041bc <HAL_RCC_OscConfig+0x32c>)
 8003ed6:	681a      	ldr	r2, [r3, #0]
 8003ed8:	2380      	movs	r3, #128	@ 0x80
 8003eda:	029b      	lsls	r3, r3, #10
 8003edc:	4013      	ands	r3, r2
 8003ede:	d062      	beq.n	8003fa6 <HAL_RCC_OscConfig+0x116>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d15e      	bne.n	8003fa6 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8003ee8:	2301      	movs	r3, #1
 8003eea:	e2ce      	b.n	800448a <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	685a      	ldr	r2, [r3, #4]
 8003ef0:	2380      	movs	r3, #128	@ 0x80
 8003ef2:	025b      	lsls	r3, r3, #9
 8003ef4:	429a      	cmp	r2, r3
 8003ef6:	d107      	bne.n	8003f08 <HAL_RCC_OscConfig+0x78>
 8003ef8:	4bb0      	ldr	r3, [pc, #704]	@ (80041bc <HAL_RCC_OscConfig+0x32c>)
 8003efa:	681a      	ldr	r2, [r3, #0]
 8003efc:	4baf      	ldr	r3, [pc, #700]	@ (80041bc <HAL_RCC_OscConfig+0x32c>)
 8003efe:	2180      	movs	r1, #128	@ 0x80
 8003f00:	0249      	lsls	r1, r1, #9
 8003f02:	430a      	orrs	r2, r1
 8003f04:	601a      	str	r2, [r3, #0]
 8003f06:	e020      	b.n	8003f4a <HAL_RCC_OscConfig+0xba>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	685a      	ldr	r2, [r3, #4]
 8003f0c:	23a0      	movs	r3, #160	@ 0xa0
 8003f0e:	02db      	lsls	r3, r3, #11
 8003f10:	429a      	cmp	r2, r3
 8003f12:	d10e      	bne.n	8003f32 <HAL_RCC_OscConfig+0xa2>
 8003f14:	4ba9      	ldr	r3, [pc, #676]	@ (80041bc <HAL_RCC_OscConfig+0x32c>)
 8003f16:	681a      	ldr	r2, [r3, #0]
 8003f18:	4ba8      	ldr	r3, [pc, #672]	@ (80041bc <HAL_RCC_OscConfig+0x32c>)
 8003f1a:	2180      	movs	r1, #128	@ 0x80
 8003f1c:	02c9      	lsls	r1, r1, #11
 8003f1e:	430a      	orrs	r2, r1
 8003f20:	601a      	str	r2, [r3, #0]
 8003f22:	4ba6      	ldr	r3, [pc, #664]	@ (80041bc <HAL_RCC_OscConfig+0x32c>)
 8003f24:	681a      	ldr	r2, [r3, #0]
 8003f26:	4ba5      	ldr	r3, [pc, #660]	@ (80041bc <HAL_RCC_OscConfig+0x32c>)
 8003f28:	2180      	movs	r1, #128	@ 0x80
 8003f2a:	0249      	lsls	r1, r1, #9
 8003f2c:	430a      	orrs	r2, r1
 8003f2e:	601a      	str	r2, [r3, #0]
 8003f30:	e00b      	b.n	8003f4a <HAL_RCC_OscConfig+0xba>
 8003f32:	4ba2      	ldr	r3, [pc, #648]	@ (80041bc <HAL_RCC_OscConfig+0x32c>)
 8003f34:	681a      	ldr	r2, [r3, #0]
 8003f36:	4ba1      	ldr	r3, [pc, #644]	@ (80041bc <HAL_RCC_OscConfig+0x32c>)
 8003f38:	49a1      	ldr	r1, [pc, #644]	@ (80041c0 <HAL_RCC_OscConfig+0x330>)
 8003f3a:	400a      	ands	r2, r1
 8003f3c:	601a      	str	r2, [r3, #0]
 8003f3e:	4b9f      	ldr	r3, [pc, #636]	@ (80041bc <HAL_RCC_OscConfig+0x32c>)
 8003f40:	681a      	ldr	r2, [r3, #0]
 8003f42:	4b9e      	ldr	r3, [pc, #632]	@ (80041bc <HAL_RCC_OscConfig+0x32c>)
 8003f44:	499f      	ldr	r1, [pc, #636]	@ (80041c4 <HAL_RCC_OscConfig+0x334>)
 8003f46:	400a      	ands	r2, r1
 8003f48:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d014      	beq.n	8003f7c <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f52:	f7fd ffd3 	bl	8001efc <HAL_GetTick>
 8003f56:	0003      	movs	r3, r0
 8003f58:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f5a:	e008      	b.n	8003f6e <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f5c:	f7fd ffce 	bl	8001efc <HAL_GetTick>
 8003f60:	0002      	movs	r2, r0
 8003f62:	693b      	ldr	r3, [r7, #16]
 8003f64:	1ad3      	subs	r3, r2, r3
 8003f66:	2b64      	cmp	r3, #100	@ 0x64
 8003f68:	d901      	bls.n	8003f6e <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8003f6a:	2303      	movs	r3, #3
 8003f6c:	e28d      	b.n	800448a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f6e:	4b93      	ldr	r3, [pc, #588]	@ (80041bc <HAL_RCC_OscConfig+0x32c>)
 8003f70:	681a      	ldr	r2, [r3, #0]
 8003f72:	2380      	movs	r3, #128	@ 0x80
 8003f74:	029b      	lsls	r3, r3, #10
 8003f76:	4013      	ands	r3, r2
 8003f78:	d0f0      	beq.n	8003f5c <HAL_RCC_OscConfig+0xcc>
 8003f7a:	e015      	b.n	8003fa8 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f7c:	f7fd ffbe 	bl	8001efc <HAL_GetTick>
 8003f80:	0003      	movs	r3, r0
 8003f82:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003f84:	e008      	b.n	8003f98 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f86:	f7fd ffb9 	bl	8001efc <HAL_GetTick>
 8003f8a:	0002      	movs	r2, r0
 8003f8c:	693b      	ldr	r3, [r7, #16]
 8003f8e:	1ad3      	subs	r3, r2, r3
 8003f90:	2b64      	cmp	r3, #100	@ 0x64
 8003f92:	d901      	bls.n	8003f98 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003f94:	2303      	movs	r3, #3
 8003f96:	e278      	b.n	800448a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003f98:	4b88      	ldr	r3, [pc, #544]	@ (80041bc <HAL_RCC_OscConfig+0x32c>)
 8003f9a:	681a      	ldr	r2, [r3, #0]
 8003f9c:	2380      	movs	r3, #128	@ 0x80
 8003f9e:	029b      	lsls	r3, r3, #10
 8003fa0:	4013      	ands	r3, r2
 8003fa2:	d1f0      	bne.n	8003f86 <HAL_RCC_OscConfig+0xf6>
 8003fa4:	e000      	b.n	8003fa8 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fa6:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	2202      	movs	r2, #2
 8003fae:	4013      	ands	r3, r2
 8003fb0:	d100      	bne.n	8003fb4 <HAL_RCC_OscConfig+0x124>
 8003fb2:	e099      	b.n	80040e8 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003fb4:	4b81      	ldr	r3, [pc, #516]	@ (80041bc <HAL_RCC_OscConfig+0x32c>)
 8003fb6:	689b      	ldr	r3, [r3, #8]
 8003fb8:	2238      	movs	r2, #56	@ 0x38
 8003fba:	4013      	ands	r3, r2
 8003fbc:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003fbe:	4b7f      	ldr	r3, [pc, #508]	@ (80041bc <HAL_RCC_OscConfig+0x32c>)
 8003fc0:	68db      	ldr	r3, [r3, #12]
 8003fc2:	2203      	movs	r2, #3
 8003fc4:	4013      	ands	r3, r2
 8003fc6:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8003fc8:	69bb      	ldr	r3, [r7, #24]
 8003fca:	2b10      	cmp	r3, #16
 8003fcc:	d102      	bne.n	8003fd4 <HAL_RCC_OscConfig+0x144>
 8003fce:	697b      	ldr	r3, [r7, #20]
 8003fd0:	2b02      	cmp	r3, #2
 8003fd2:	d002      	beq.n	8003fda <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8003fd4:	69bb      	ldr	r3, [r7, #24]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d135      	bne.n	8004046 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003fda:	4b78      	ldr	r3, [pc, #480]	@ (80041bc <HAL_RCC_OscConfig+0x32c>)
 8003fdc:	681a      	ldr	r2, [r3, #0]
 8003fde:	2380      	movs	r3, #128	@ 0x80
 8003fe0:	00db      	lsls	r3, r3, #3
 8003fe2:	4013      	ands	r3, r2
 8003fe4:	d005      	beq.n	8003ff2 <HAL_RCC_OscConfig+0x162>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	68db      	ldr	r3, [r3, #12]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d101      	bne.n	8003ff2 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	e24b      	b.n	800448a <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ff2:	4b72      	ldr	r3, [pc, #456]	@ (80041bc <HAL_RCC_OscConfig+0x32c>)
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	4a74      	ldr	r2, [pc, #464]	@ (80041c8 <HAL_RCC_OscConfig+0x338>)
 8003ff8:	4013      	ands	r3, r2
 8003ffa:	0019      	movs	r1, r3
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	695b      	ldr	r3, [r3, #20]
 8004000:	021a      	lsls	r2, r3, #8
 8004002:	4b6e      	ldr	r3, [pc, #440]	@ (80041bc <HAL_RCC_OscConfig+0x32c>)
 8004004:	430a      	orrs	r2, r1
 8004006:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004008:	69bb      	ldr	r3, [r7, #24]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d112      	bne.n	8004034 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800400e:	4b6b      	ldr	r3, [pc, #428]	@ (80041bc <HAL_RCC_OscConfig+0x32c>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a6e      	ldr	r2, [pc, #440]	@ (80041cc <HAL_RCC_OscConfig+0x33c>)
 8004014:	4013      	ands	r3, r2
 8004016:	0019      	movs	r1, r3
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	691a      	ldr	r2, [r3, #16]
 800401c:	4b67      	ldr	r3, [pc, #412]	@ (80041bc <HAL_RCC_OscConfig+0x32c>)
 800401e:	430a      	orrs	r2, r1
 8004020:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8004022:	4b66      	ldr	r3, [pc, #408]	@ (80041bc <HAL_RCC_OscConfig+0x32c>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	0adb      	lsrs	r3, r3, #11
 8004028:	2207      	movs	r2, #7
 800402a:	4013      	ands	r3, r2
 800402c:	4a68      	ldr	r2, [pc, #416]	@ (80041d0 <HAL_RCC_OscConfig+0x340>)
 800402e:	40da      	lsrs	r2, r3
 8004030:	4b68      	ldr	r3, [pc, #416]	@ (80041d4 <HAL_RCC_OscConfig+0x344>)
 8004032:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004034:	4b68      	ldr	r3, [pc, #416]	@ (80041d8 <HAL_RCC_OscConfig+0x348>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	0018      	movs	r0, r3
 800403a:	f7fd ff03 	bl	8001e44 <HAL_InitTick>
 800403e:	1e03      	subs	r3, r0, #0
 8004040:	d051      	beq.n	80040e6 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8004042:	2301      	movs	r3, #1
 8004044:	e221      	b.n	800448a <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	68db      	ldr	r3, [r3, #12]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d030      	beq.n	80040b0 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800404e:	4b5b      	ldr	r3, [pc, #364]	@ (80041bc <HAL_RCC_OscConfig+0x32c>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a5e      	ldr	r2, [pc, #376]	@ (80041cc <HAL_RCC_OscConfig+0x33c>)
 8004054:	4013      	ands	r3, r2
 8004056:	0019      	movs	r1, r3
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	691a      	ldr	r2, [r3, #16]
 800405c:	4b57      	ldr	r3, [pc, #348]	@ (80041bc <HAL_RCC_OscConfig+0x32c>)
 800405e:	430a      	orrs	r2, r1
 8004060:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8004062:	4b56      	ldr	r3, [pc, #344]	@ (80041bc <HAL_RCC_OscConfig+0x32c>)
 8004064:	681a      	ldr	r2, [r3, #0]
 8004066:	4b55      	ldr	r3, [pc, #340]	@ (80041bc <HAL_RCC_OscConfig+0x32c>)
 8004068:	2180      	movs	r1, #128	@ 0x80
 800406a:	0049      	lsls	r1, r1, #1
 800406c:	430a      	orrs	r2, r1
 800406e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004070:	f7fd ff44 	bl	8001efc <HAL_GetTick>
 8004074:	0003      	movs	r3, r0
 8004076:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004078:	e008      	b.n	800408c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800407a:	f7fd ff3f 	bl	8001efc <HAL_GetTick>
 800407e:	0002      	movs	r2, r0
 8004080:	693b      	ldr	r3, [r7, #16]
 8004082:	1ad3      	subs	r3, r2, r3
 8004084:	2b02      	cmp	r3, #2
 8004086:	d901      	bls.n	800408c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8004088:	2303      	movs	r3, #3
 800408a:	e1fe      	b.n	800448a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800408c:	4b4b      	ldr	r3, [pc, #300]	@ (80041bc <HAL_RCC_OscConfig+0x32c>)
 800408e:	681a      	ldr	r2, [r3, #0]
 8004090:	2380      	movs	r3, #128	@ 0x80
 8004092:	00db      	lsls	r3, r3, #3
 8004094:	4013      	ands	r3, r2
 8004096:	d0f0      	beq.n	800407a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004098:	4b48      	ldr	r3, [pc, #288]	@ (80041bc <HAL_RCC_OscConfig+0x32c>)
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	4a4a      	ldr	r2, [pc, #296]	@ (80041c8 <HAL_RCC_OscConfig+0x338>)
 800409e:	4013      	ands	r3, r2
 80040a0:	0019      	movs	r1, r3
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	695b      	ldr	r3, [r3, #20]
 80040a6:	021a      	lsls	r2, r3, #8
 80040a8:	4b44      	ldr	r3, [pc, #272]	@ (80041bc <HAL_RCC_OscConfig+0x32c>)
 80040aa:	430a      	orrs	r2, r1
 80040ac:	605a      	str	r2, [r3, #4]
 80040ae:	e01b      	b.n	80040e8 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80040b0:	4b42      	ldr	r3, [pc, #264]	@ (80041bc <HAL_RCC_OscConfig+0x32c>)
 80040b2:	681a      	ldr	r2, [r3, #0]
 80040b4:	4b41      	ldr	r3, [pc, #260]	@ (80041bc <HAL_RCC_OscConfig+0x32c>)
 80040b6:	4949      	ldr	r1, [pc, #292]	@ (80041dc <HAL_RCC_OscConfig+0x34c>)
 80040b8:	400a      	ands	r2, r1
 80040ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040bc:	f7fd ff1e 	bl	8001efc <HAL_GetTick>
 80040c0:	0003      	movs	r3, r0
 80040c2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80040c4:	e008      	b.n	80040d8 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040c6:	f7fd ff19 	bl	8001efc <HAL_GetTick>
 80040ca:	0002      	movs	r2, r0
 80040cc:	693b      	ldr	r3, [r7, #16]
 80040ce:	1ad3      	subs	r3, r2, r3
 80040d0:	2b02      	cmp	r3, #2
 80040d2:	d901      	bls.n	80040d8 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80040d4:	2303      	movs	r3, #3
 80040d6:	e1d8      	b.n	800448a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80040d8:	4b38      	ldr	r3, [pc, #224]	@ (80041bc <HAL_RCC_OscConfig+0x32c>)
 80040da:	681a      	ldr	r2, [r3, #0]
 80040dc:	2380      	movs	r3, #128	@ 0x80
 80040de:	00db      	lsls	r3, r3, #3
 80040e0:	4013      	ands	r3, r2
 80040e2:	d1f0      	bne.n	80040c6 <HAL_RCC_OscConfig+0x236>
 80040e4:	e000      	b.n	80040e8 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80040e6:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	2208      	movs	r2, #8
 80040ee:	4013      	ands	r3, r2
 80040f0:	d047      	beq.n	8004182 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80040f2:	4b32      	ldr	r3, [pc, #200]	@ (80041bc <HAL_RCC_OscConfig+0x32c>)
 80040f4:	689b      	ldr	r3, [r3, #8]
 80040f6:	2238      	movs	r2, #56	@ 0x38
 80040f8:	4013      	ands	r3, r2
 80040fa:	2b18      	cmp	r3, #24
 80040fc:	d10a      	bne.n	8004114 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80040fe:	4b2f      	ldr	r3, [pc, #188]	@ (80041bc <HAL_RCC_OscConfig+0x32c>)
 8004100:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004102:	2202      	movs	r2, #2
 8004104:	4013      	ands	r3, r2
 8004106:	d03c      	beq.n	8004182 <HAL_RCC_OscConfig+0x2f2>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	699b      	ldr	r3, [r3, #24]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d138      	bne.n	8004182 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8004110:	2301      	movs	r3, #1
 8004112:	e1ba      	b.n	800448a <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	699b      	ldr	r3, [r3, #24]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d019      	beq.n	8004150 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800411c:	4b27      	ldr	r3, [pc, #156]	@ (80041bc <HAL_RCC_OscConfig+0x32c>)
 800411e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004120:	4b26      	ldr	r3, [pc, #152]	@ (80041bc <HAL_RCC_OscConfig+0x32c>)
 8004122:	2101      	movs	r1, #1
 8004124:	430a      	orrs	r2, r1
 8004126:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004128:	f7fd fee8 	bl	8001efc <HAL_GetTick>
 800412c:	0003      	movs	r3, r0
 800412e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004130:	e008      	b.n	8004144 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004132:	f7fd fee3 	bl	8001efc <HAL_GetTick>
 8004136:	0002      	movs	r2, r0
 8004138:	693b      	ldr	r3, [r7, #16]
 800413a:	1ad3      	subs	r3, r2, r3
 800413c:	2b02      	cmp	r3, #2
 800413e:	d901      	bls.n	8004144 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8004140:	2303      	movs	r3, #3
 8004142:	e1a2      	b.n	800448a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004144:	4b1d      	ldr	r3, [pc, #116]	@ (80041bc <HAL_RCC_OscConfig+0x32c>)
 8004146:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004148:	2202      	movs	r2, #2
 800414a:	4013      	ands	r3, r2
 800414c:	d0f1      	beq.n	8004132 <HAL_RCC_OscConfig+0x2a2>
 800414e:	e018      	b.n	8004182 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8004150:	4b1a      	ldr	r3, [pc, #104]	@ (80041bc <HAL_RCC_OscConfig+0x32c>)
 8004152:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004154:	4b19      	ldr	r3, [pc, #100]	@ (80041bc <HAL_RCC_OscConfig+0x32c>)
 8004156:	2101      	movs	r1, #1
 8004158:	438a      	bics	r2, r1
 800415a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800415c:	f7fd fece 	bl	8001efc <HAL_GetTick>
 8004160:	0003      	movs	r3, r0
 8004162:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004164:	e008      	b.n	8004178 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004166:	f7fd fec9 	bl	8001efc <HAL_GetTick>
 800416a:	0002      	movs	r2, r0
 800416c:	693b      	ldr	r3, [r7, #16]
 800416e:	1ad3      	subs	r3, r2, r3
 8004170:	2b02      	cmp	r3, #2
 8004172:	d901      	bls.n	8004178 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8004174:	2303      	movs	r3, #3
 8004176:	e188      	b.n	800448a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004178:	4b10      	ldr	r3, [pc, #64]	@ (80041bc <HAL_RCC_OscConfig+0x32c>)
 800417a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800417c:	2202      	movs	r2, #2
 800417e:	4013      	ands	r3, r2
 8004180:	d1f1      	bne.n	8004166 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	2204      	movs	r2, #4
 8004188:	4013      	ands	r3, r2
 800418a:	d100      	bne.n	800418e <HAL_RCC_OscConfig+0x2fe>
 800418c:	e0c6      	b.n	800431c <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800418e:	231f      	movs	r3, #31
 8004190:	18fb      	adds	r3, r7, r3
 8004192:	2200      	movs	r2, #0
 8004194:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004196:	4b09      	ldr	r3, [pc, #36]	@ (80041bc <HAL_RCC_OscConfig+0x32c>)
 8004198:	689b      	ldr	r3, [r3, #8]
 800419a:	2238      	movs	r2, #56	@ 0x38
 800419c:	4013      	ands	r3, r2
 800419e:	2b20      	cmp	r3, #32
 80041a0:	d11e      	bne.n	80041e0 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80041a2:	4b06      	ldr	r3, [pc, #24]	@ (80041bc <HAL_RCC_OscConfig+0x32c>)
 80041a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041a6:	2202      	movs	r2, #2
 80041a8:	4013      	ands	r3, r2
 80041aa:	d100      	bne.n	80041ae <HAL_RCC_OscConfig+0x31e>
 80041ac:	e0b6      	b.n	800431c <HAL_RCC_OscConfig+0x48c>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	689b      	ldr	r3, [r3, #8]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d000      	beq.n	80041b8 <HAL_RCC_OscConfig+0x328>
 80041b6:	e0b1      	b.n	800431c <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80041b8:	2301      	movs	r3, #1
 80041ba:	e166      	b.n	800448a <HAL_RCC_OscConfig+0x5fa>
 80041bc:	40021000 	.word	0x40021000
 80041c0:	fffeffff 	.word	0xfffeffff
 80041c4:	fffbffff 	.word	0xfffbffff
 80041c8:	ffff80ff 	.word	0xffff80ff
 80041cc:	ffffc7ff 	.word	0xffffc7ff
 80041d0:	00f42400 	.word	0x00f42400
 80041d4:	20000000 	.word	0x20000000
 80041d8:	20000004 	.word	0x20000004
 80041dc:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80041e0:	4bac      	ldr	r3, [pc, #688]	@ (8004494 <HAL_RCC_OscConfig+0x604>)
 80041e2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80041e4:	2380      	movs	r3, #128	@ 0x80
 80041e6:	055b      	lsls	r3, r3, #21
 80041e8:	4013      	ands	r3, r2
 80041ea:	d101      	bne.n	80041f0 <HAL_RCC_OscConfig+0x360>
 80041ec:	2301      	movs	r3, #1
 80041ee:	e000      	b.n	80041f2 <HAL_RCC_OscConfig+0x362>
 80041f0:	2300      	movs	r3, #0
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d011      	beq.n	800421a <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80041f6:	4ba7      	ldr	r3, [pc, #668]	@ (8004494 <HAL_RCC_OscConfig+0x604>)
 80041f8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80041fa:	4ba6      	ldr	r3, [pc, #664]	@ (8004494 <HAL_RCC_OscConfig+0x604>)
 80041fc:	2180      	movs	r1, #128	@ 0x80
 80041fe:	0549      	lsls	r1, r1, #21
 8004200:	430a      	orrs	r2, r1
 8004202:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004204:	4ba3      	ldr	r3, [pc, #652]	@ (8004494 <HAL_RCC_OscConfig+0x604>)
 8004206:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004208:	2380      	movs	r3, #128	@ 0x80
 800420a:	055b      	lsls	r3, r3, #21
 800420c:	4013      	ands	r3, r2
 800420e:	60fb      	str	r3, [r7, #12]
 8004210:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8004212:	231f      	movs	r3, #31
 8004214:	18fb      	adds	r3, r7, r3
 8004216:	2201      	movs	r2, #1
 8004218:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800421a:	4b9f      	ldr	r3, [pc, #636]	@ (8004498 <HAL_RCC_OscConfig+0x608>)
 800421c:	681a      	ldr	r2, [r3, #0]
 800421e:	2380      	movs	r3, #128	@ 0x80
 8004220:	005b      	lsls	r3, r3, #1
 8004222:	4013      	ands	r3, r2
 8004224:	d11a      	bne.n	800425c <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004226:	4b9c      	ldr	r3, [pc, #624]	@ (8004498 <HAL_RCC_OscConfig+0x608>)
 8004228:	681a      	ldr	r2, [r3, #0]
 800422a:	4b9b      	ldr	r3, [pc, #620]	@ (8004498 <HAL_RCC_OscConfig+0x608>)
 800422c:	2180      	movs	r1, #128	@ 0x80
 800422e:	0049      	lsls	r1, r1, #1
 8004230:	430a      	orrs	r2, r1
 8004232:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8004234:	f7fd fe62 	bl	8001efc <HAL_GetTick>
 8004238:	0003      	movs	r3, r0
 800423a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800423c:	e008      	b.n	8004250 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800423e:	f7fd fe5d 	bl	8001efc <HAL_GetTick>
 8004242:	0002      	movs	r2, r0
 8004244:	693b      	ldr	r3, [r7, #16]
 8004246:	1ad3      	subs	r3, r2, r3
 8004248:	2b02      	cmp	r3, #2
 800424a:	d901      	bls.n	8004250 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 800424c:	2303      	movs	r3, #3
 800424e:	e11c      	b.n	800448a <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004250:	4b91      	ldr	r3, [pc, #580]	@ (8004498 <HAL_RCC_OscConfig+0x608>)
 8004252:	681a      	ldr	r2, [r3, #0]
 8004254:	2380      	movs	r3, #128	@ 0x80
 8004256:	005b      	lsls	r3, r3, #1
 8004258:	4013      	ands	r3, r2
 800425a:	d0f0      	beq.n	800423e <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	689b      	ldr	r3, [r3, #8]
 8004260:	2b01      	cmp	r3, #1
 8004262:	d106      	bne.n	8004272 <HAL_RCC_OscConfig+0x3e2>
 8004264:	4b8b      	ldr	r3, [pc, #556]	@ (8004494 <HAL_RCC_OscConfig+0x604>)
 8004266:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004268:	4b8a      	ldr	r3, [pc, #552]	@ (8004494 <HAL_RCC_OscConfig+0x604>)
 800426a:	2101      	movs	r1, #1
 800426c:	430a      	orrs	r2, r1
 800426e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004270:	e01c      	b.n	80042ac <HAL_RCC_OscConfig+0x41c>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	689b      	ldr	r3, [r3, #8]
 8004276:	2b05      	cmp	r3, #5
 8004278:	d10c      	bne.n	8004294 <HAL_RCC_OscConfig+0x404>
 800427a:	4b86      	ldr	r3, [pc, #536]	@ (8004494 <HAL_RCC_OscConfig+0x604>)
 800427c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800427e:	4b85      	ldr	r3, [pc, #532]	@ (8004494 <HAL_RCC_OscConfig+0x604>)
 8004280:	2104      	movs	r1, #4
 8004282:	430a      	orrs	r2, r1
 8004284:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004286:	4b83      	ldr	r3, [pc, #524]	@ (8004494 <HAL_RCC_OscConfig+0x604>)
 8004288:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800428a:	4b82      	ldr	r3, [pc, #520]	@ (8004494 <HAL_RCC_OscConfig+0x604>)
 800428c:	2101      	movs	r1, #1
 800428e:	430a      	orrs	r2, r1
 8004290:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004292:	e00b      	b.n	80042ac <HAL_RCC_OscConfig+0x41c>
 8004294:	4b7f      	ldr	r3, [pc, #508]	@ (8004494 <HAL_RCC_OscConfig+0x604>)
 8004296:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004298:	4b7e      	ldr	r3, [pc, #504]	@ (8004494 <HAL_RCC_OscConfig+0x604>)
 800429a:	2101      	movs	r1, #1
 800429c:	438a      	bics	r2, r1
 800429e:	65da      	str	r2, [r3, #92]	@ 0x5c
 80042a0:	4b7c      	ldr	r3, [pc, #496]	@ (8004494 <HAL_RCC_OscConfig+0x604>)
 80042a2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80042a4:	4b7b      	ldr	r3, [pc, #492]	@ (8004494 <HAL_RCC_OscConfig+0x604>)
 80042a6:	2104      	movs	r1, #4
 80042a8:	438a      	bics	r2, r1
 80042aa:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	689b      	ldr	r3, [r3, #8]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d014      	beq.n	80042de <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042b4:	f7fd fe22 	bl	8001efc <HAL_GetTick>
 80042b8:	0003      	movs	r3, r0
 80042ba:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042bc:	e009      	b.n	80042d2 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042be:	f7fd fe1d 	bl	8001efc <HAL_GetTick>
 80042c2:	0002      	movs	r2, r0
 80042c4:	693b      	ldr	r3, [r7, #16]
 80042c6:	1ad3      	subs	r3, r2, r3
 80042c8:	4a74      	ldr	r2, [pc, #464]	@ (800449c <HAL_RCC_OscConfig+0x60c>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d901      	bls.n	80042d2 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80042ce:	2303      	movs	r3, #3
 80042d0:	e0db      	b.n	800448a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042d2:	4b70      	ldr	r3, [pc, #448]	@ (8004494 <HAL_RCC_OscConfig+0x604>)
 80042d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042d6:	2202      	movs	r2, #2
 80042d8:	4013      	ands	r3, r2
 80042da:	d0f0      	beq.n	80042be <HAL_RCC_OscConfig+0x42e>
 80042dc:	e013      	b.n	8004306 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042de:	f7fd fe0d 	bl	8001efc <HAL_GetTick>
 80042e2:	0003      	movs	r3, r0
 80042e4:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80042e6:	e009      	b.n	80042fc <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042e8:	f7fd fe08 	bl	8001efc <HAL_GetTick>
 80042ec:	0002      	movs	r2, r0
 80042ee:	693b      	ldr	r3, [r7, #16]
 80042f0:	1ad3      	subs	r3, r2, r3
 80042f2:	4a6a      	ldr	r2, [pc, #424]	@ (800449c <HAL_RCC_OscConfig+0x60c>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d901      	bls.n	80042fc <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80042f8:	2303      	movs	r3, #3
 80042fa:	e0c6      	b.n	800448a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80042fc:	4b65      	ldr	r3, [pc, #404]	@ (8004494 <HAL_RCC_OscConfig+0x604>)
 80042fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004300:	2202      	movs	r2, #2
 8004302:	4013      	ands	r3, r2
 8004304:	d1f0      	bne.n	80042e8 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8004306:	231f      	movs	r3, #31
 8004308:	18fb      	adds	r3, r7, r3
 800430a:	781b      	ldrb	r3, [r3, #0]
 800430c:	2b01      	cmp	r3, #1
 800430e:	d105      	bne.n	800431c <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8004310:	4b60      	ldr	r3, [pc, #384]	@ (8004494 <HAL_RCC_OscConfig+0x604>)
 8004312:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004314:	4b5f      	ldr	r3, [pc, #380]	@ (8004494 <HAL_RCC_OscConfig+0x604>)
 8004316:	4962      	ldr	r1, [pc, #392]	@ (80044a0 <HAL_RCC_OscConfig+0x610>)
 8004318:	400a      	ands	r2, r1
 800431a:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	69db      	ldr	r3, [r3, #28]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d100      	bne.n	8004326 <HAL_RCC_OscConfig+0x496>
 8004324:	e0b0      	b.n	8004488 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004326:	4b5b      	ldr	r3, [pc, #364]	@ (8004494 <HAL_RCC_OscConfig+0x604>)
 8004328:	689b      	ldr	r3, [r3, #8]
 800432a:	2238      	movs	r2, #56	@ 0x38
 800432c:	4013      	ands	r3, r2
 800432e:	2b10      	cmp	r3, #16
 8004330:	d100      	bne.n	8004334 <HAL_RCC_OscConfig+0x4a4>
 8004332:	e078      	b.n	8004426 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	69db      	ldr	r3, [r3, #28]
 8004338:	2b02      	cmp	r3, #2
 800433a:	d153      	bne.n	80043e4 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800433c:	4b55      	ldr	r3, [pc, #340]	@ (8004494 <HAL_RCC_OscConfig+0x604>)
 800433e:	681a      	ldr	r2, [r3, #0]
 8004340:	4b54      	ldr	r3, [pc, #336]	@ (8004494 <HAL_RCC_OscConfig+0x604>)
 8004342:	4958      	ldr	r1, [pc, #352]	@ (80044a4 <HAL_RCC_OscConfig+0x614>)
 8004344:	400a      	ands	r2, r1
 8004346:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004348:	f7fd fdd8 	bl	8001efc <HAL_GetTick>
 800434c:	0003      	movs	r3, r0
 800434e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004350:	e008      	b.n	8004364 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004352:	f7fd fdd3 	bl	8001efc <HAL_GetTick>
 8004356:	0002      	movs	r2, r0
 8004358:	693b      	ldr	r3, [r7, #16]
 800435a:	1ad3      	subs	r3, r2, r3
 800435c:	2b02      	cmp	r3, #2
 800435e:	d901      	bls.n	8004364 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8004360:	2303      	movs	r3, #3
 8004362:	e092      	b.n	800448a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004364:	4b4b      	ldr	r3, [pc, #300]	@ (8004494 <HAL_RCC_OscConfig+0x604>)
 8004366:	681a      	ldr	r2, [r3, #0]
 8004368:	2380      	movs	r3, #128	@ 0x80
 800436a:	049b      	lsls	r3, r3, #18
 800436c:	4013      	ands	r3, r2
 800436e:	d1f0      	bne.n	8004352 <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004370:	4b48      	ldr	r3, [pc, #288]	@ (8004494 <HAL_RCC_OscConfig+0x604>)
 8004372:	68db      	ldr	r3, [r3, #12]
 8004374:	4a4c      	ldr	r2, [pc, #304]	@ (80044a8 <HAL_RCC_OscConfig+0x618>)
 8004376:	4013      	ands	r3, r2
 8004378:	0019      	movs	r1, r3
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6a1a      	ldr	r2, [r3, #32]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004382:	431a      	orrs	r2, r3
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004388:	021b      	lsls	r3, r3, #8
 800438a:	431a      	orrs	r2, r3
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004390:	431a      	orrs	r2, r3
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004396:	431a      	orrs	r2, r3
 8004398:	4b3e      	ldr	r3, [pc, #248]	@ (8004494 <HAL_RCC_OscConfig+0x604>)
 800439a:	430a      	orrs	r2, r1
 800439c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800439e:	4b3d      	ldr	r3, [pc, #244]	@ (8004494 <HAL_RCC_OscConfig+0x604>)
 80043a0:	681a      	ldr	r2, [r3, #0]
 80043a2:	4b3c      	ldr	r3, [pc, #240]	@ (8004494 <HAL_RCC_OscConfig+0x604>)
 80043a4:	2180      	movs	r1, #128	@ 0x80
 80043a6:	0449      	lsls	r1, r1, #17
 80043a8:	430a      	orrs	r2, r1
 80043aa:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80043ac:	4b39      	ldr	r3, [pc, #228]	@ (8004494 <HAL_RCC_OscConfig+0x604>)
 80043ae:	68da      	ldr	r2, [r3, #12]
 80043b0:	4b38      	ldr	r3, [pc, #224]	@ (8004494 <HAL_RCC_OscConfig+0x604>)
 80043b2:	2180      	movs	r1, #128	@ 0x80
 80043b4:	0549      	lsls	r1, r1, #21
 80043b6:	430a      	orrs	r2, r1
 80043b8:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043ba:	f7fd fd9f 	bl	8001efc <HAL_GetTick>
 80043be:	0003      	movs	r3, r0
 80043c0:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80043c2:	e008      	b.n	80043d6 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043c4:	f7fd fd9a 	bl	8001efc <HAL_GetTick>
 80043c8:	0002      	movs	r2, r0
 80043ca:	693b      	ldr	r3, [r7, #16]
 80043cc:	1ad3      	subs	r3, r2, r3
 80043ce:	2b02      	cmp	r3, #2
 80043d0:	d901      	bls.n	80043d6 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 80043d2:	2303      	movs	r3, #3
 80043d4:	e059      	b.n	800448a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80043d6:	4b2f      	ldr	r3, [pc, #188]	@ (8004494 <HAL_RCC_OscConfig+0x604>)
 80043d8:	681a      	ldr	r2, [r3, #0]
 80043da:	2380      	movs	r3, #128	@ 0x80
 80043dc:	049b      	lsls	r3, r3, #18
 80043de:	4013      	ands	r3, r2
 80043e0:	d0f0      	beq.n	80043c4 <HAL_RCC_OscConfig+0x534>
 80043e2:	e051      	b.n	8004488 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043e4:	4b2b      	ldr	r3, [pc, #172]	@ (8004494 <HAL_RCC_OscConfig+0x604>)
 80043e6:	681a      	ldr	r2, [r3, #0]
 80043e8:	4b2a      	ldr	r3, [pc, #168]	@ (8004494 <HAL_RCC_OscConfig+0x604>)
 80043ea:	492e      	ldr	r1, [pc, #184]	@ (80044a4 <HAL_RCC_OscConfig+0x614>)
 80043ec:	400a      	ands	r2, r1
 80043ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043f0:	f7fd fd84 	bl	8001efc <HAL_GetTick>
 80043f4:	0003      	movs	r3, r0
 80043f6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043f8:	e008      	b.n	800440c <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043fa:	f7fd fd7f 	bl	8001efc <HAL_GetTick>
 80043fe:	0002      	movs	r2, r0
 8004400:	693b      	ldr	r3, [r7, #16]
 8004402:	1ad3      	subs	r3, r2, r3
 8004404:	2b02      	cmp	r3, #2
 8004406:	d901      	bls.n	800440c <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8004408:	2303      	movs	r3, #3
 800440a:	e03e      	b.n	800448a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800440c:	4b21      	ldr	r3, [pc, #132]	@ (8004494 <HAL_RCC_OscConfig+0x604>)
 800440e:	681a      	ldr	r2, [r3, #0]
 8004410:	2380      	movs	r3, #128	@ 0x80
 8004412:	049b      	lsls	r3, r3, #18
 8004414:	4013      	ands	r3, r2
 8004416:	d1f0      	bne.n	80043fa <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8004418:	4b1e      	ldr	r3, [pc, #120]	@ (8004494 <HAL_RCC_OscConfig+0x604>)
 800441a:	68da      	ldr	r2, [r3, #12]
 800441c:	4b1d      	ldr	r3, [pc, #116]	@ (8004494 <HAL_RCC_OscConfig+0x604>)
 800441e:	4923      	ldr	r1, [pc, #140]	@ (80044ac <HAL_RCC_OscConfig+0x61c>)
 8004420:	400a      	ands	r2, r1
 8004422:	60da      	str	r2, [r3, #12]
 8004424:	e030      	b.n	8004488 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	69db      	ldr	r3, [r3, #28]
 800442a:	2b01      	cmp	r3, #1
 800442c:	d101      	bne.n	8004432 <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 800442e:	2301      	movs	r3, #1
 8004430:	e02b      	b.n	800448a <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8004432:	4b18      	ldr	r3, [pc, #96]	@ (8004494 <HAL_RCC_OscConfig+0x604>)
 8004434:	68db      	ldr	r3, [r3, #12]
 8004436:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	2203      	movs	r2, #3
 800443c:	401a      	ands	r2, r3
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6a1b      	ldr	r3, [r3, #32]
 8004442:	429a      	cmp	r2, r3
 8004444:	d11e      	bne.n	8004484 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004446:	697b      	ldr	r3, [r7, #20]
 8004448:	2270      	movs	r2, #112	@ 0x70
 800444a:	401a      	ands	r2, r3
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004450:	429a      	cmp	r2, r3
 8004452:	d117      	bne.n	8004484 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004454:	697a      	ldr	r2, [r7, #20]
 8004456:	23fe      	movs	r3, #254	@ 0xfe
 8004458:	01db      	lsls	r3, r3, #7
 800445a:	401a      	ands	r2, r3
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004460:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004462:	429a      	cmp	r2, r3
 8004464:	d10e      	bne.n	8004484 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004466:	697a      	ldr	r2, [r7, #20]
 8004468:	23f8      	movs	r3, #248	@ 0xf8
 800446a:	039b      	lsls	r3, r3, #14
 800446c:	401a      	ands	r2, r3
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004472:	429a      	cmp	r2, r3
 8004474:	d106      	bne.n	8004484 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	0f5b      	lsrs	r3, r3, #29
 800447a:	075a      	lsls	r2, r3, #29
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004480:	429a      	cmp	r2, r3
 8004482:	d001      	beq.n	8004488 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8004484:	2301      	movs	r3, #1
 8004486:	e000      	b.n	800448a <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8004488:	2300      	movs	r3, #0
}
 800448a:	0018      	movs	r0, r3
 800448c:	46bd      	mov	sp, r7
 800448e:	b008      	add	sp, #32
 8004490:	bd80      	pop	{r7, pc}
 8004492:	46c0      	nop			@ (mov r8, r8)
 8004494:	40021000 	.word	0x40021000
 8004498:	40007000 	.word	0x40007000
 800449c:	00001388 	.word	0x00001388
 80044a0:	efffffff 	.word	0xefffffff
 80044a4:	feffffff 	.word	0xfeffffff
 80044a8:	1fc1808c 	.word	0x1fc1808c
 80044ac:	effefffc 	.word	0xeffefffc

080044b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b084      	sub	sp, #16
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
 80044b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d101      	bne.n	80044c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80044c0:	2301      	movs	r3, #1
 80044c2:	e0e9      	b.n	8004698 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80044c4:	4b76      	ldr	r3, [pc, #472]	@ (80046a0 <HAL_RCC_ClockConfig+0x1f0>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	2207      	movs	r2, #7
 80044ca:	4013      	ands	r3, r2
 80044cc:	683a      	ldr	r2, [r7, #0]
 80044ce:	429a      	cmp	r2, r3
 80044d0:	d91e      	bls.n	8004510 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044d2:	4b73      	ldr	r3, [pc, #460]	@ (80046a0 <HAL_RCC_ClockConfig+0x1f0>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	2207      	movs	r2, #7
 80044d8:	4393      	bics	r3, r2
 80044da:	0019      	movs	r1, r3
 80044dc:	4b70      	ldr	r3, [pc, #448]	@ (80046a0 <HAL_RCC_ClockConfig+0x1f0>)
 80044de:	683a      	ldr	r2, [r7, #0]
 80044e0:	430a      	orrs	r2, r1
 80044e2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80044e4:	f7fd fd0a 	bl	8001efc <HAL_GetTick>
 80044e8:	0003      	movs	r3, r0
 80044ea:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80044ec:	e009      	b.n	8004502 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044ee:	f7fd fd05 	bl	8001efc <HAL_GetTick>
 80044f2:	0002      	movs	r2, r0
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	1ad3      	subs	r3, r2, r3
 80044f8:	4a6a      	ldr	r2, [pc, #424]	@ (80046a4 <HAL_RCC_ClockConfig+0x1f4>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d901      	bls.n	8004502 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80044fe:	2303      	movs	r3, #3
 8004500:	e0ca      	b.n	8004698 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004502:	4b67      	ldr	r3, [pc, #412]	@ (80046a0 <HAL_RCC_ClockConfig+0x1f0>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	2207      	movs	r2, #7
 8004508:	4013      	ands	r3, r2
 800450a:	683a      	ldr	r2, [r7, #0]
 800450c:	429a      	cmp	r2, r3
 800450e:	d1ee      	bne.n	80044ee <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	2202      	movs	r2, #2
 8004516:	4013      	ands	r3, r2
 8004518:	d015      	beq.n	8004546 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	2204      	movs	r2, #4
 8004520:	4013      	ands	r3, r2
 8004522:	d006      	beq.n	8004532 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004524:	4b60      	ldr	r3, [pc, #384]	@ (80046a8 <HAL_RCC_ClockConfig+0x1f8>)
 8004526:	689a      	ldr	r2, [r3, #8]
 8004528:	4b5f      	ldr	r3, [pc, #380]	@ (80046a8 <HAL_RCC_ClockConfig+0x1f8>)
 800452a:	21e0      	movs	r1, #224	@ 0xe0
 800452c:	01c9      	lsls	r1, r1, #7
 800452e:	430a      	orrs	r2, r1
 8004530:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004532:	4b5d      	ldr	r3, [pc, #372]	@ (80046a8 <HAL_RCC_ClockConfig+0x1f8>)
 8004534:	689b      	ldr	r3, [r3, #8]
 8004536:	4a5d      	ldr	r2, [pc, #372]	@ (80046ac <HAL_RCC_ClockConfig+0x1fc>)
 8004538:	4013      	ands	r3, r2
 800453a:	0019      	movs	r1, r3
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	689a      	ldr	r2, [r3, #8]
 8004540:	4b59      	ldr	r3, [pc, #356]	@ (80046a8 <HAL_RCC_ClockConfig+0x1f8>)
 8004542:	430a      	orrs	r2, r1
 8004544:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	2201      	movs	r2, #1
 800454c:	4013      	ands	r3, r2
 800454e:	d057      	beq.n	8004600 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	2b01      	cmp	r3, #1
 8004556:	d107      	bne.n	8004568 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004558:	4b53      	ldr	r3, [pc, #332]	@ (80046a8 <HAL_RCC_ClockConfig+0x1f8>)
 800455a:	681a      	ldr	r2, [r3, #0]
 800455c:	2380      	movs	r3, #128	@ 0x80
 800455e:	029b      	lsls	r3, r3, #10
 8004560:	4013      	ands	r3, r2
 8004562:	d12b      	bne.n	80045bc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004564:	2301      	movs	r3, #1
 8004566:	e097      	b.n	8004698 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	2b02      	cmp	r3, #2
 800456e:	d107      	bne.n	8004580 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004570:	4b4d      	ldr	r3, [pc, #308]	@ (80046a8 <HAL_RCC_ClockConfig+0x1f8>)
 8004572:	681a      	ldr	r2, [r3, #0]
 8004574:	2380      	movs	r3, #128	@ 0x80
 8004576:	049b      	lsls	r3, r3, #18
 8004578:	4013      	ands	r3, r2
 800457a:	d11f      	bne.n	80045bc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800457c:	2301      	movs	r3, #1
 800457e:	e08b      	b.n	8004698 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d107      	bne.n	8004598 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004588:	4b47      	ldr	r3, [pc, #284]	@ (80046a8 <HAL_RCC_ClockConfig+0x1f8>)
 800458a:	681a      	ldr	r2, [r3, #0]
 800458c:	2380      	movs	r3, #128	@ 0x80
 800458e:	00db      	lsls	r3, r3, #3
 8004590:	4013      	ands	r3, r2
 8004592:	d113      	bne.n	80045bc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004594:	2301      	movs	r3, #1
 8004596:	e07f      	b.n	8004698 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	2b03      	cmp	r3, #3
 800459e:	d106      	bne.n	80045ae <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80045a0:	4b41      	ldr	r3, [pc, #260]	@ (80046a8 <HAL_RCC_ClockConfig+0x1f8>)
 80045a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045a4:	2202      	movs	r2, #2
 80045a6:	4013      	ands	r3, r2
 80045a8:	d108      	bne.n	80045bc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80045aa:	2301      	movs	r3, #1
 80045ac:	e074      	b.n	8004698 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80045ae:	4b3e      	ldr	r3, [pc, #248]	@ (80046a8 <HAL_RCC_ClockConfig+0x1f8>)
 80045b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045b2:	2202      	movs	r2, #2
 80045b4:	4013      	ands	r3, r2
 80045b6:	d101      	bne.n	80045bc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80045b8:	2301      	movs	r3, #1
 80045ba:	e06d      	b.n	8004698 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80045bc:	4b3a      	ldr	r3, [pc, #232]	@ (80046a8 <HAL_RCC_ClockConfig+0x1f8>)
 80045be:	689b      	ldr	r3, [r3, #8]
 80045c0:	2207      	movs	r2, #7
 80045c2:	4393      	bics	r3, r2
 80045c4:	0019      	movs	r1, r3
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	685a      	ldr	r2, [r3, #4]
 80045ca:	4b37      	ldr	r3, [pc, #220]	@ (80046a8 <HAL_RCC_ClockConfig+0x1f8>)
 80045cc:	430a      	orrs	r2, r1
 80045ce:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045d0:	f7fd fc94 	bl	8001efc <HAL_GetTick>
 80045d4:	0003      	movs	r3, r0
 80045d6:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045d8:	e009      	b.n	80045ee <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045da:	f7fd fc8f 	bl	8001efc <HAL_GetTick>
 80045de:	0002      	movs	r2, r0
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	1ad3      	subs	r3, r2, r3
 80045e4:	4a2f      	ldr	r2, [pc, #188]	@ (80046a4 <HAL_RCC_ClockConfig+0x1f4>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d901      	bls.n	80045ee <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80045ea:	2303      	movs	r3, #3
 80045ec:	e054      	b.n	8004698 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045ee:	4b2e      	ldr	r3, [pc, #184]	@ (80046a8 <HAL_RCC_ClockConfig+0x1f8>)
 80045f0:	689b      	ldr	r3, [r3, #8]
 80045f2:	2238      	movs	r2, #56	@ 0x38
 80045f4:	401a      	ands	r2, r3
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	00db      	lsls	r3, r3, #3
 80045fc:	429a      	cmp	r2, r3
 80045fe:	d1ec      	bne.n	80045da <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004600:	4b27      	ldr	r3, [pc, #156]	@ (80046a0 <HAL_RCC_ClockConfig+0x1f0>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	2207      	movs	r2, #7
 8004606:	4013      	ands	r3, r2
 8004608:	683a      	ldr	r2, [r7, #0]
 800460a:	429a      	cmp	r2, r3
 800460c:	d21e      	bcs.n	800464c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800460e:	4b24      	ldr	r3, [pc, #144]	@ (80046a0 <HAL_RCC_ClockConfig+0x1f0>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	2207      	movs	r2, #7
 8004614:	4393      	bics	r3, r2
 8004616:	0019      	movs	r1, r3
 8004618:	4b21      	ldr	r3, [pc, #132]	@ (80046a0 <HAL_RCC_ClockConfig+0x1f0>)
 800461a:	683a      	ldr	r2, [r7, #0]
 800461c:	430a      	orrs	r2, r1
 800461e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004620:	f7fd fc6c 	bl	8001efc <HAL_GetTick>
 8004624:	0003      	movs	r3, r0
 8004626:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004628:	e009      	b.n	800463e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800462a:	f7fd fc67 	bl	8001efc <HAL_GetTick>
 800462e:	0002      	movs	r2, r0
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	1ad3      	subs	r3, r2, r3
 8004634:	4a1b      	ldr	r2, [pc, #108]	@ (80046a4 <HAL_RCC_ClockConfig+0x1f4>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d901      	bls.n	800463e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800463a:	2303      	movs	r3, #3
 800463c:	e02c      	b.n	8004698 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800463e:	4b18      	ldr	r3, [pc, #96]	@ (80046a0 <HAL_RCC_ClockConfig+0x1f0>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	2207      	movs	r2, #7
 8004644:	4013      	ands	r3, r2
 8004646:	683a      	ldr	r2, [r7, #0]
 8004648:	429a      	cmp	r2, r3
 800464a:	d1ee      	bne.n	800462a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	2204      	movs	r2, #4
 8004652:	4013      	ands	r3, r2
 8004654:	d009      	beq.n	800466a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004656:	4b14      	ldr	r3, [pc, #80]	@ (80046a8 <HAL_RCC_ClockConfig+0x1f8>)
 8004658:	689b      	ldr	r3, [r3, #8]
 800465a:	4a15      	ldr	r2, [pc, #84]	@ (80046b0 <HAL_RCC_ClockConfig+0x200>)
 800465c:	4013      	ands	r3, r2
 800465e:	0019      	movs	r1, r3
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	68da      	ldr	r2, [r3, #12]
 8004664:	4b10      	ldr	r3, [pc, #64]	@ (80046a8 <HAL_RCC_ClockConfig+0x1f8>)
 8004666:	430a      	orrs	r2, r1
 8004668:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800466a:	f000 f829 	bl	80046c0 <HAL_RCC_GetSysClockFreq>
 800466e:	0001      	movs	r1, r0
 8004670:	4b0d      	ldr	r3, [pc, #52]	@ (80046a8 <HAL_RCC_ClockConfig+0x1f8>)
 8004672:	689b      	ldr	r3, [r3, #8]
 8004674:	0a1b      	lsrs	r3, r3, #8
 8004676:	220f      	movs	r2, #15
 8004678:	401a      	ands	r2, r3
 800467a:	4b0e      	ldr	r3, [pc, #56]	@ (80046b4 <HAL_RCC_ClockConfig+0x204>)
 800467c:	0092      	lsls	r2, r2, #2
 800467e:	58d3      	ldr	r3, [r2, r3]
 8004680:	221f      	movs	r2, #31
 8004682:	4013      	ands	r3, r2
 8004684:	000a      	movs	r2, r1
 8004686:	40da      	lsrs	r2, r3
 8004688:	4b0b      	ldr	r3, [pc, #44]	@ (80046b8 <HAL_RCC_ClockConfig+0x208>)
 800468a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800468c:	4b0b      	ldr	r3, [pc, #44]	@ (80046bc <HAL_RCC_ClockConfig+0x20c>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	0018      	movs	r0, r3
 8004692:	f7fd fbd7 	bl	8001e44 <HAL_InitTick>
 8004696:	0003      	movs	r3, r0
}
 8004698:	0018      	movs	r0, r3
 800469a:	46bd      	mov	sp, r7
 800469c:	b004      	add	sp, #16
 800469e:	bd80      	pop	{r7, pc}
 80046a0:	40022000 	.word	0x40022000
 80046a4:	00001388 	.word	0x00001388
 80046a8:	40021000 	.word	0x40021000
 80046ac:	fffff0ff 	.word	0xfffff0ff
 80046b0:	ffff8fff 	.word	0xffff8fff
 80046b4:	08004fb4 	.word	0x08004fb4
 80046b8:	20000000 	.word	0x20000000
 80046bc:	20000004 	.word	0x20000004

080046c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b086      	sub	sp, #24
 80046c4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80046c6:	4b3c      	ldr	r3, [pc, #240]	@ (80047b8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80046c8:	689b      	ldr	r3, [r3, #8]
 80046ca:	2238      	movs	r2, #56	@ 0x38
 80046cc:	4013      	ands	r3, r2
 80046ce:	d10f      	bne.n	80046f0 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80046d0:	4b39      	ldr	r3, [pc, #228]	@ (80047b8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	0adb      	lsrs	r3, r3, #11
 80046d6:	2207      	movs	r2, #7
 80046d8:	4013      	ands	r3, r2
 80046da:	2201      	movs	r2, #1
 80046dc:	409a      	lsls	r2, r3
 80046de:	0013      	movs	r3, r2
 80046e0:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80046e2:	6839      	ldr	r1, [r7, #0]
 80046e4:	4835      	ldr	r0, [pc, #212]	@ (80047bc <HAL_RCC_GetSysClockFreq+0xfc>)
 80046e6:	f7fb fd0b 	bl	8000100 <__udivsi3>
 80046ea:	0003      	movs	r3, r0
 80046ec:	613b      	str	r3, [r7, #16]
 80046ee:	e05d      	b.n	80047ac <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80046f0:	4b31      	ldr	r3, [pc, #196]	@ (80047b8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80046f2:	689b      	ldr	r3, [r3, #8]
 80046f4:	2238      	movs	r2, #56	@ 0x38
 80046f6:	4013      	ands	r3, r2
 80046f8:	2b08      	cmp	r3, #8
 80046fa:	d102      	bne.n	8004702 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80046fc:	4b30      	ldr	r3, [pc, #192]	@ (80047c0 <HAL_RCC_GetSysClockFreq+0x100>)
 80046fe:	613b      	str	r3, [r7, #16]
 8004700:	e054      	b.n	80047ac <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004702:	4b2d      	ldr	r3, [pc, #180]	@ (80047b8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004704:	689b      	ldr	r3, [r3, #8]
 8004706:	2238      	movs	r2, #56	@ 0x38
 8004708:	4013      	ands	r3, r2
 800470a:	2b10      	cmp	r3, #16
 800470c:	d138      	bne.n	8004780 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800470e:	4b2a      	ldr	r3, [pc, #168]	@ (80047b8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004710:	68db      	ldr	r3, [r3, #12]
 8004712:	2203      	movs	r2, #3
 8004714:	4013      	ands	r3, r2
 8004716:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004718:	4b27      	ldr	r3, [pc, #156]	@ (80047b8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800471a:	68db      	ldr	r3, [r3, #12]
 800471c:	091b      	lsrs	r3, r3, #4
 800471e:	2207      	movs	r2, #7
 8004720:	4013      	ands	r3, r2
 8004722:	3301      	adds	r3, #1
 8004724:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	2b03      	cmp	r3, #3
 800472a:	d10d      	bne.n	8004748 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800472c:	68b9      	ldr	r1, [r7, #8]
 800472e:	4824      	ldr	r0, [pc, #144]	@ (80047c0 <HAL_RCC_GetSysClockFreq+0x100>)
 8004730:	f7fb fce6 	bl	8000100 <__udivsi3>
 8004734:	0003      	movs	r3, r0
 8004736:	0019      	movs	r1, r3
 8004738:	4b1f      	ldr	r3, [pc, #124]	@ (80047b8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800473a:	68db      	ldr	r3, [r3, #12]
 800473c:	0a1b      	lsrs	r3, r3, #8
 800473e:	227f      	movs	r2, #127	@ 0x7f
 8004740:	4013      	ands	r3, r2
 8004742:	434b      	muls	r3, r1
 8004744:	617b      	str	r3, [r7, #20]
        break;
 8004746:	e00d      	b.n	8004764 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8004748:	68b9      	ldr	r1, [r7, #8]
 800474a:	481c      	ldr	r0, [pc, #112]	@ (80047bc <HAL_RCC_GetSysClockFreq+0xfc>)
 800474c:	f7fb fcd8 	bl	8000100 <__udivsi3>
 8004750:	0003      	movs	r3, r0
 8004752:	0019      	movs	r1, r3
 8004754:	4b18      	ldr	r3, [pc, #96]	@ (80047b8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004756:	68db      	ldr	r3, [r3, #12]
 8004758:	0a1b      	lsrs	r3, r3, #8
 800475a:	227f      	movs	r2, #127	@ 0x7f
 800475c:	4013      	ands	r3, r2
 800475e:	434b      	muls	r3, r1
 8004760:	617b      	str	r3, [r7, #20]
        break;
 8004762:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8004764:	4b14      	ldr	r3, [pc, #80]	@ (80047b8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004766:	68db      	ldr	r3, [r3, #12]
 8004768:	0f5b      	lsrs	r3, r3, #29
 800476a:	2207      	movs	r2, #7
 800476c:	4013      	ands	r3, r2
 800476e:	3301      	adds	r3, #1
 8004770:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8004772:	6879      	ldr	r1, [r7, #4]
 8004774:	6978      	ldr	r0, [r7, #20]
 8004776:	f7fb fcc3 	bl	8000100 <__udivsi3>
 800477a:	0003      	movs	r3, r0
 800477c:	613b      	str	r3, [r7, #16]
 800477e:	e015      	b.n	80047ac <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004780:	4b0d      	ldr	r3, [pc, #52]	@ (80047b8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004782:	689b      	ldr	r3, [r3, #8]
 8004784:	2238      	movs	r2, #56	@ 0x38
 8004786:	4013      	ands	r3, r2
 8004788:	2b20      	cmp	r3, #32
 800478a:	d103      	bne.n	8004794 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800478c:	2380      	movs	r3, #128	@ 0x80
 800478e:	021b      	lsls	r3, r3, #8
 8004790:	613b      	str	r3, [r7, #16]
 8004792:	e00b      	b.n	80047ac <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004794:	4b08      	ldr	r3, [pc, #32]	@ (80047b8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004796:	689b      	ldr	r3, [r3, #8]
 8004798:	2238      	movs	r2, #56	@ 0x38
 800479a:	4013      	ands	r3, r2
 800479c:	2b18      	cmp	r3, #24
 800479e:	d103      	bne.n	80047a8 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80047a0:	23fa      	movs	r3, #250	@ 0xfa
 80047a2:	01db      	lsls	r3, r3, #7
 80047a4:	613b      	str	r3, [r7, #16]
 80047a6:	e001      	b.n	80047ac <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80047a8:	2300      	movs	r3, #0
 80047aa:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80047ac:	693b      	ldr	r3, [r7, #16]
}
 80047ae:	0018      	movs	r0, r3
 80047b0:	46bd      	mov	sp, r7
 80047b2:	b006      	add	sp, #24
 80047b4:	bd80      	pop	{r7, pc}
 80047b6:	46c0      	nop			@ (mov r8, r8)
 80047b8:	40021000 	.word	0x40021000
 80047bc:	00f42400 	.word	0x00f42400
 80047c0:	007a1200 	.word	0x007a1200

080047c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b082      	sub	sp, #8
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d101      	bne.n	80047d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80047d2:	2301      	movs	r3, #1
 80047d4:	e04a      	b.n	800486c <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	223d      	movs	r2, #61	@ 0x3d
 80047da:	5c9b      	ldrb	r3, [r3, r2]
 80047dc:	b2db      	uxtb	r3, r3
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d107      	bne.n	80047f2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	223c      	movs	r2, #60	@ 0x3c
 80047e6:	2100      	movs	r1, #0
 80047e8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	0018      	movs	r0, r3
 80047ee:	f7fd fa95 	bl	8001d1c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	223d      	movs	r2, #61	@ 0x3d
 80047f6:	2102      	movs	r1, #2
 80047f8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681a      	ldr	r2, [r3, #0]
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	3304      	adds	r3, #4
 8004802:	0019      	movs	r1, r3
 8004804:	0010      	movs	r0, r2
 8004806:	f000 f951 	bl	8004aac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2248      	movs	r2, #72	@ 0x48
 800480e:	2101      	movs	r1, #1
 8004810:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	223e      	movs	r2, #62	@ 0x3e
 8004816:	2101      	movs	r1, #1
 8004818:	5499      	strb	r1, [r3, r2]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	223f      	movs	r2, #63	@ 0x3f
 800481e:	2101      	movs	r1, #1
 8004820:	5499      	strb	r1, [r3, r2]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2240      	movs	r2, #64	@ 0x40
 8004826:	2101      	movs	r1, #1
 8004828:	5499      	strb	r1, [r3, r2]
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2241      	movs	r2, #65	@ 0x41
 800482e:	2101      	movs	r1, #1
 8004830:	5499      	strb	r1, [r3, r2]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2242      	movs	r2, #66	@ 0x42
 8004836:	2101      	movs	r1, #1
 8004838:	5499      	strb	r1, [r3, r2]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2243      	movs	r2, #67	@ 0x43
 800483e:	2101      	movs	r1, #1
 8004840:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2244      	movs	r2, #68	@ 0x44
 8004846:	2101      	movs	r1, #1
 8004848:	5499      	strb	r1, [r3, r2]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2245      	movs	r2, #69	@ 0x45
 800484e:	2101      	movs	r1, #1
 8004850:	5499      	strb	r1, [r3, r2]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2246      	movs	r2, #70	@ 0x46
 8004856:	2101      	movs	r1, #1
 8004858:	5499      	strb	r1, [r3, r2]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2247      	movs	r2, #71	@ 0x47
 800485e:	2101      	movs	r1, #1
 8004860:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	223d      	movs	r2, #61	@ 0x3d
 8004866:	2101      	movs	r1, #1
 8004868:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800486a:	2300      	movs	r3, #0
}
 800486c:	0018      	movs	r0, r3
 800486e:	46bd      	mov	sp, r7
 8004870:	b002      	add	sp, #8
 8004872:	bd80      	pop	{r7, pc}

08004874 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b084      	sub	sp, #16
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	223d      	movs	r2, #61	@ 0x3d
 8004880:	5c9b      	ldrb	r3, [r3, r2]
 8004882:	b2db      	uxtb	r3, r3
 8004884:	2b01      	cmp	r3, #1
 8004886:	d001      	beq.n	800488c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004888:	2301      	movs	r3, #1
 800488a:	e02f      	b.n	80048ec <HAL_TIM_Base_Start+0x78>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	223d      	movs	r2, #61	@ 0x3d
 8004890:	2102      	movs	r1, #2
 8004892:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a16      	ldr	r2, [pc, #88]	@ (80048f4 <HAL_TIM_Base_Start+0x80>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d004      	beq.n	80048a8 <HAL_TIM_Base_Start+0x34>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4a15      	ldr	r2, [pc, #84]	@ (80048f8 <HAL_TIM_Base_Start+0x84>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d116      	bne.n	80048d6 <HAL_TIM_Base_Start+0x62>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	689b      	ldr	r3, [r3, #8]
 80048ae:	4a13      	ldr	r2, [pc, #76]	@ (80048fc <HAL_TIM_Base_Start+0x88>)
 80048b0:	4013      	ands	r3, r2
 80048b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	2b06      	cmp	r3, #6
 80048b8:	d016      	beq.n	80048e8 <HAL_TIM_Base_Start+0x74>
 80048ba:	68fa      	ldr	r2, [r7, #12]
 80048bc:	2380      	movs	r3, #128	@ 0x80
 80048be:	025b      	lsls	r3, r3, #9
 80048c0:	429a      	cmp	r2, r3
 80048c2:	d011      	beq.n	80048e8 <HAL_TIM_Base_Start+0x74>
    {
      __HAL_TIM_ENABLE(htim);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	681a      	ldr	r2, [r3, #0]
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	2101      	movs	r1, #1
 80048d0:	430a      	orrs	r2, r1
 80048d2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048d4:	e008      	b.n	80048e8 <HAL_TIM_Base_Start+0x74>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	681a      	ldr	r2, [r3, #0]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	2101      	movs	r1, #1
 80048e2:	430a      	orrs	r2, r1
 80048e4:	601a      	str	r2, [r3, #0]
 80048e6:	e000      	b.n	80048ea <HAL_TIM_Base_Start+0x76>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048e8:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80048ea:	2300      	movs	r3, #0
}
 80048ec:	0018      	movs	r0, r3
 80048ee:	46bd      	mov	sp, r7
 80048f0:	b004      	add	sp, #16
 80048f2:	bd80      	pop	{r7, pc}
 80048f4:	40012c00 	.word	0x40012c00
 80048f8:	40000400 	.word	0x40000400
 80048fc:	00010007 	.word	0x00010007

08004900 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b084      	sub	sp, #16
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
 8004908:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800490a:	230f      	movs	r3, #15
 800490c:	18fb      	adds	r3, r7, r3
 800490e:	2200      	movs	r2, #0
 8004910:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	223c      	movs	r2, #60	@ 0x3c
 8004916:	5c9b      	ldrb	r3, [r3, r2]
 8004918:	2b01      	cmp	r3, #1
 800491a:	d101      	bne.n	8004920 <HAL_TIM_ConfigClockSource+0x20>
 800491c:	2302      	movs	r3, #2
 800491e:	e0bc      	b.n	8004a9a <HAL_TIM_ConfigClockSource+0x19a>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	223c      	movs	r2, #60	@ 0x3c
 8004924:	2101      	movs	r1, #1
 8004926:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	223d      	movs	r2, #61	@ 0x3d
 800492c:	2102      	movs	r1, #2
 800492e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	689b      	ldr	r3, [r3, #8]
 8004936:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004938:	68bb      	ldr	r3, [r7, #8]
 800493a:	4a5a      	ldr	r2, [pc, #360]	@ (8004aa4 <HAL_TIM_ConfigClockSource+0x1a4>)
 800493c:	4013      	ands	r3, r2
 800493e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	4a59      	ldr	r2, [pc, #356]	@ (8004aa8 <HAL_TIM_ConfigClockSource+0x1a8>)
 8004944:	4013      	ands	r3, r2
 8004946:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	68ba      	ldr	r2, [r7, #8]
 800494e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	2280      	movs	r2, #128	@ 0x80
 8004956:	0192      	lsls	r2, r2, #6
 8004958:	4293      	cmp	r3, r2
 800495a:	d040      	beq.n	80049de <HAL_TIM_ConfigClockSource+0xde>
 800495c:	2280      	movs	r2, #128	@ 0x80
 800495e:	0192      	lsls	r2, r2, #6
 8004960:	4293      	cmp	r3, r2
 8004962:	d900      	bls.n	8004966 <HAL_TIM_ConfigClockSource+0x66>
 8004964:	e088      	b.n	8004a78 <HAL_TIM_ConfigClockSource+0x178>
 8004966:	2280      	movs	r2, #128	@ 0x80
 8004968:	0152      	lsls	r2, r2, #5
 800496a:	4293      	cmp	r3, r2
 800496c:	d100      	bne.n	8004970 <HAL_TIM_ConfigClockSource+0x70>
 800496e:	e088      	b.n	8004a82 <HAL_TIM_ConfigClockSource+0x182>
 8004970:	2280      	movs	r2, #128	@ 0x80
 8004972:	0152      	lsls	r2, r2, #5
 8004974:	4293      	cmp	r3, r2
 8004976:	d900      	bls.n	800497a <HAL_TIM_ConfigClockSource+0x7a>
 8004978:	e07e      	b.n	8004a78 <HAL_TIM_ConfigClockSource+0x178>
 800497a:	2b70      	cmp	r3, #112	@ 0x70
 800497c:	d018      	beq.n	80049b0 <HAL_TIM_ConfigClockSource+0xb0>
 800497e:	d900      	bls.n	8004982 <HAL_TIM_ConfigClockSource+0x82>
 8004980:	e07a      	b.n	8004a78 <HAL_TIM_ConfigClockSource+0x178>
 8004982:	2b60      	cmp	r3, #96	@ 0x60
 8004984:	d04f      	beq.n	8004a26 <HAL_TIM_ConfigClockSource+0x126>
 8004986:	d900      	bls.n	800498a <HAL_TIM_ConfigClockSource+0x8a>
 8004988:	e076      	b.n	8004a78 <HAL_TIM_ConfigClockSource+0x178>
 800498a:	2b50      	cmp	r3, #80	@ 0x50
 800498c:	d03b      	beq.n	8004a06 <HAL_TIM_ConfigClockSource+0x106>
 800498e:	d900      	bls.n	8004992 <HAL_TIM_ConfigClockSource+0x92>
 8004990:	e072      	b.n	8004a78 <HAL_TIM_ConfigClockSource+0x178>
 8004992:	2b40      	cmp	r3, #64	@ 0x40
 8004994:	d057      	beq.n	8004a46 <HAL_TIM_ConfigClockSource+0x146>
 8004996:	d900      	bls.n	800499a <HAL_TIM_ConfigClockSource+0x9a>
 8004998:	e06e      	b.n	8004a78 <HAL_TIM_ConfigClockSource+0x178>
 800499a:	2b30      	cmp	r3, #48	@ 0x30
 800499c:	d063      	beq.n	8004a66 <HAL_TIM_ConfigClockSource+0x166>
 800499e:	d86b      	bhi.n	8004a78 <HAL_TIM_ConfigClockSource+0x178>
 80049a0:	2b20      	cmp	r3, #32
 80049a2:	d060      	beq.n	8004a66 <HAL_TIM_ConfigClockSource+0x166>
 80049a4:	d868      	bhi.n	8004a78 <HAL_TIM_ConfigClockSource+0x178>
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d05d      	beq.n	8004a66 <HAL_TIM_ConfigClockSource+0x166>
 80049aa:	2b10      	cmp	r3, #16
 80049ac:	d05b      	beq.n	8004a66 <HAL_TIM_ConfigClockSource+0x166>
 80049ae:	e063      	b.n	8004a78 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80049c0:	f000 f96a 	bl	8004c98 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	689b      	ldr	r3, [r3, #8]
 80049ca:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	2277      	movs	r2, #119	@ 0x77
 80049d0:	4313      	orrs	r3, r2
 80049d2:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	68ba      	ldr	r2, [r7, #8]
 80049da:	609a      	str	r2, [r3, #8]
      break;
 80049dc:	e052      	b.n	8004a84 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80049ee:	f000 f953 	bl	8004c98 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	689a      	ldr	r2, [r3, #8]
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	2180      	movs	r1, #128	@ 0x80
 80049fe:	01c9      	lsls	r1, r1, #7
 8004a00:	430a      	orrs	r2, r1
 8004a02:	609a      	str	r2, [r3, #8]
      break;
 8004a04:	e03e      	b.n	8004a84 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a12:	001a      	movs	r2, r3
 8004a14:	f000 f8c4 	bl	8004ba0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	2150      	movs	r1, #80	@ 0x50
 8004a1e:	0018      	movs	r0, r3
 8004a20:	f000 f91e 	bl	8004c60 <TIM_ITRx_SetConfig>
      break;
 8004a24:	e02e      	b.n	8004a84 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004a32:	001a      	movs	r2, r3
 8004a34:	f000 f8e2 	bl	8004bfc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	2160      	movs	r1, #96	@ 0x60
 8004a3e:	0018      	movs	r0, r3
 8004a40:	f000 f90e 	bl	8004c60 <TIM_ITRx_SetConfig>
      break;
 8004a44:	e01e      	b.n	8004a84 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a52:	001a      	movs	r2, r3
 8004a54:	f000 f8a4 	bl	8004ba0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	2140      	movs	r1, #64	@ 0x40
 8004a5e:	0018      	movs	r0, r3
 8004a60:	f000 f8fe 	bl	8004c60 <TIM_ITRx_SetConfig>
      break;
 8004a64:	e00e      	b.n	8004a84 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681a      	ldr	r2, [r3, #0]
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	0019      	movs	r1, r3
 8004a70:	0010      	movs	r0, r2
 8004a72:	f000 f8f5 	bl	8004c60 <TIM_ITRx_SetConfig>
      break;
 8004a76:	e005      	b.n	8004a84 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8004a78:	230f      	movs	r3, #15
 8004a7a:	18fb      	adds	r3, r7, r3
 8004a7c:	2201      	movs	r2, #1
 8004a7e:	701a      	strb	r2, [r3, #0]
      break;
 8004a80:	e000      	b.n	8004a84 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8004a82:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	223d      	movs	r2, #61	@ 0x3d
 8004a88:	2101      	movs	r1, #1
 8004a8a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	223c      	movs	r2, #60	@ 0x3c
 8004a90:	2100      	movs	r1, #0
 8004a92:	5499      	strb	r1, [r3, r2]

  return status;
 8004a94:	230f      	movs	r3, #15
 8004a96:	18fb      	adds	r3, r7, r3
 8004a98:	781b      	ldrb	r3, [r3, #0]
}
 8004a9a:	0018      	movs	r0, r3
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	b004      	add	sp, #16
 8004aa0:	bd80      	pop	{r7, pc}
 8004aa2:	46c0      	nop			@ (mov r8, r8)
 8004aa4:	ffceff88 	.word	0xffceff88
 8004aa8:	ffff00ff 	.word	0xffff00ff

08004aac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b084      	sub	sp, #16
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
 8004ab4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	4a32      	ldr	r2, [pc, #200]	@ (8004b88 <TIM_Base_SetConfig+0xdc>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d003      	beq.n	8004acc <TIM_Base_SetConfig+0x20>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	4a31      	ldr	r2, [pc, #196]	@ (8004b8c <TIM_Base_SetConfig+0xe0>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d108      	bne.n	8004ade <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	2270      	movs	r2, #112	@ 0x70
 8004ad0:	4393      	bics	r3, r2
 8004ad2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	68fa      	ldr	r2, [r7, #12]
 8004ada:	4313      	orrs	r3, r2
 8004adc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	4a29      	ldr	r2, [pc, #164]	@ (8004b88 <TIM_Base_SetConfig+0xdc>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d00f      	beq.n	8004b06 <TIM_Base_SetConfig+0x5a>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	4a28      	ldr	r2, [pc, #160]	@ (8004b8c <TIM_Base_SetConfig+0xe0>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d00b      	beq.n	8004b06 <TIM_Base_SetConfig+0x5a>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	4a27      	ldr	r2, [pc, #156]	@ (8004b90 <TIM_Base_SetConfig+0xe4>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d007      	beq.n	8004b06 <TIM_Base_SetConfig+0x5a>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	4a26      	ldr	r2, [pc, #152]	@ (8004b94 <TIM_Base_SetConfig+0xe8>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d003      	beq.n	8004b06 <TIM_Base_SetConfig+0x5a>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	4a25      	ldr	r2, [pc, #148]	@ (8004b98 <TIM_Base_SetConfig+0xec>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d108      	bne.n	8004b18 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	4a24      	ldr	r2, [pc, #144]	@ (8004b9c <TIM_Base_SetConfig+0xf0>)
 8004b0a:	4013      	ands	r3, r2
 8004b0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	68db      	ldr	r3, [r3, #12]
 8004b12:	68fa      	ldr	r2, [r7, #12]
 8004b14:	4313      	orrs	r3, r2
 8004b16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	2280      	movs	r2, #128	@ 0x80
 8004b1c:	4393      	bics	r3, r2
 8004b1e:	001a      	movs	r2, r3
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	695b      	ldr	r3, [r3, #20]
 8004b24:	4313      	orrs	r3, r2
 8004b26:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	68fa      	ldr	r2, [r7, #12]
 8004b2c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	689a      	ldr	r2, [r3, #8]
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	681a      	ldr	r2, [r3, #0]
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	4a11      	ldr	r2, [pc, #68]	@ (8004b88 <TIM_Base_SetConfig+0xdc>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d007      	beq.n	8004b56 <TIM_Base_SetConfig+0xaa>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	4a12      	ldr	r2, [pc, #72]	@ (8004b94 <TIM_Base_SetConfig+0xe8>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d003      	beq.n	8004b56 <TIM_Base_SetConfig+0xaa>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	4a11      	ldr	r2, [pc, #68]	@ (8004b98 <TIM_Base_SetConfig+0xec>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d103      	bne.n	8004b5e <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	691a      	ldr	r2, [r3, #16]
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2201      	movs	r2, #1
 8004b62:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	691b      	ldr	r3, [r3, #16]
 8004b68:	2201      	movs	r2, #1
 8004b6a:	4013      	ands	r3, r2
 8004b6c:	2b01      	cmp	r3, #1
 8004b6e:	d106      	bne.n	8004b7e <TIM_Base_SetConfig+0xd2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	691b      	ldr	r3, [r3, #16]
 8004b74:	2201      	movs	r2, #1
 8004b76:	4393      	bics	r3, r2
 8004b78:	001a      	movs	r2, r3
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	611a      	str	r2, [r3, #16]
  }
}
 8004b7e:	46c0      	nop			@ (mov r8, r8)
 8004b80:	46bd      	mov	sp, r7
 8004b82:	b004      	add	sp, #16
 8004b84:	bd80      	pop	{r7, pc}
 8004b86:	46c0      	nop			@ (mov r8, r8)
 8004b88:	40012c00 	.word	0x40012c00
 8004b8c:	40000400 	.word	0x40000400
 8004b90:	40002000 	.word	0x40002000
 8004b94:	40014400 	.word	0x40014400
 8004b98:	40014800 	.word	0x40014800
 8004b9c:	fffffcff 	.word	0xfffffcff

08004ba0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b086      	sub	sp, #24
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	60f8      	str	r0, [r7, #12]
 8004ba8:	60b9      	str	r1, [r7, #8]
 8004baa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	6a1b      	ldr	r3, [r3, #32]
 8004bb0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	6a1b      	ldr	r3, [r3, #32]
 8004bb6:	2201      	movs	r2, #1
 8004bb8:	4393      	bics	r3, r2
 8004bba:	001a      	movs	r2, r3
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	699b      	ldr	r3, [r3, #24]
 8004bc4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004bc6:	693b      	ldr	r3, [r7, #16]
 8004bc8:	22f0      	movs	r2, #240	@ 0xf0
 8004bca:	4393      	bics	r3, r2
 8004bcc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	011b      	lsls	r3, r3, #4
 8004bd2:	693a      	ldr	r2, [r7, #16]
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004bd8:	697b      	ldr	r3, [r7, #20]
 8004bda:	220a      	movs	r2, #10
 8004bdc:	4393      	bics	r3, r2
 8004bde:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004be0:	697a      	ldr	r2, [r7, #20]
 8004be2:	68bb      	ldr	r3, [r7, #8]
 8004be4:	4313      	orrs	r3, r2
 8004be6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	693a      	ldr	r2, [r7, #16]
 8004bec:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	697a      	ldr	r2, [r7, #20]
 8004bf2:	621a      	str	r2, [r3, #32]
}
 8004bf4:	46c0      	nop			@ (mov r8, r8)
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	b006      	add	sp, #24
 8004bfa:	bd80      	pop	{r7, pc}

08004bfc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b086      	sub	sp, #24
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	60f8      	str	r0, [r7, #12]
 8004c04:	60b9      	str	r1, [r7, #8]
 8004c06:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	6a1b      	ldr	r3, [r3, #32]
 8004c0c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	6a1b      	ldr	r3, [r3, #32]
 8004c12:	2210      	movs	r2, #16
 8004c14:	4393      	bics	r3, r2
 8004c16:	001a      	movs	r2, r3
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	699b      	ldr	r3, [r3, #24]
 8004c20:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	4a0d      	ldr	r2, [pc, #52]	@ (8004c5c <TIM_TI2_ConfigInputStage+0x60>)
 8004c26:	4013      	ands	r3, r2
 8004c28:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	031b      	lsls	r3, r3, #12
 8004c2e:	693a      	ldr	r2, [r7, #16]
 8004c30:	4313      	orrs	r3, r2
 8004c32:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004c34:	697b      	ldr	r3, [r7, #20]
 8004c36:	22a0      	movs	r2, #160	@ 0xa0
 8004c38:	4393      	bics	r3, r2
 8004c3a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	011b      	lsls	r3, r3, #4
 8004c40:	697a      	ldr	r2, [r7, #20]
 8004c42:	4313      	orrs	r3, r2
 8004c44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	693a      	ldr	r2, [r7, #16]
 8004c4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	697a      	ldr	r2, [r7, #20]
 8004c50:	621a      	str	r2, [r3, #32]
}
 8004c52:	46c0      	nop			@ (mov r8, r8)
 8004c54:	46bd      	mov	sp, r7
 8004c56:	b006      	add	sp, #24
 8004c58:	bd80      	pop	{r7, pc}
 8004c5a:	46c0      	nop			@ (mov r8, r8)
 8004c5c:	ffff0fff 	.word	0xffff0fff

08004c60 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b084      	sub	sp, #16
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
 8004c68:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	689b      	ldr	r3, [r3, #8]
 8004c6e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	4a08      	ldr	r2, [pc, #32]	@ (8004c94 <TIM_ITRx_SetConfig+0x34>)
 8004c74:	4013      	ands	r3, r2
 8004c76:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004c78:	683a      	ldr	r2, [r7, #0]
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	4313      	orrs	r3, r2
 8004c7e:	2207      	movs	r2, #7
 8004c80:	4313      	orrs	r3, r2
 8004c82:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	68fa      	ldr	r2, [r7, #12]
 8004c88:	609a      	str	r2, [r3, #8]
}
 8004c8a:	46c0      	nop			@ (mov r8, r8)
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	b004      	add	sp, #16
 8004c90:	bd80      	pop	{r7, pc}
 8004c92:	46c0      	nop			@ (mov r8, r8)
 8004c94:	ffcfff8f 	.word	0xffcfff8f

08004c98 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b086      	sub	sp, #24
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	60f8      	str	r0, [r7, #12]
 8004ca0:	60b9      	str	r1, [r7, #8]
 8004ca2:	607a      	str	r2, [r7, #4]
 8004ca4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	689b      	ldr	r3, [r3, #8]
 8004caa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004cac:	697b      	ldr	r3, [r7, #20]
 8004cae:	4a09      	ldr	r2, [pc, #36]	@ (8004cd4 <TIM_ETR_SetConfig+0x3c>)
 8004cb0:	4013      	ands	r3, r2
 8004cb2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	021a      	lsls	r2, r3, #8
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	431a      	orrs	r2, r3
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	697a      	ldr	r2, [r7, #20]
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	697a      	ldr	r2, [r7, #20]
 8004cca:	609a      	str	r2, [r3, #8]
}
 8004ccc:	46c0      	nop			@ (mov r8, r8)
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	b006      	add	sp, #24
 8004cd2:	bd80      	pop	{r7, pc}
 8004cd4:	ffff00ff 	.word	0xffff00ff

08004cd8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b084      	sub	sp, #16
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
 8004ce0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	223c      	movs	r2, #60	@ 0x3c
 8004ce6:	5c9b      	ldrb	r3, [r3, r2]
 8004ce8:	2b01      	cmp	r3, #1
 8004cea:	d101      	bne.n	8004cf0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004cec:	2302      	movs	r3, #2
 8004cee:	e04a      	b.n	8004d86 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	223c      	movs	r2, #60	@ 0x3c
 8004cf4:	2101      	movs	r1, #1
 8004cf6:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	223d      	movs	r2, #61	@ 0x3d
 8004cfc:	2102      	movs	r1, #2
 8004cfe:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	689b      	ldr	r3, [r3, #8]
 8004d0e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4a1e      	ldr	r2, [pc, #120]	@ (8004d90 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d108      	bne.n	8004d2c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	4a1d      	ldr	r2, [pc, #116]	@ (8004d94 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8004d1e:	4013      	ands	r3, r2
 8004d20:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	68fa      	ldr	r2, [r7, #12]
 8004d28:	4313      	orrs	r3, r2
 8004d2a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	2270      	movs	r2, #112	@ 0x70
 8004d30:	4393      	bics	r3, r2
 8004d32:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	68fa      	ldr	r2, [r7, #12]
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	68fa      	ldr	r2, [r7, #12]
 8004d44:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a11      	ldr	r2, [pc, #68]	@ (8004d90 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d004      	beq.n	8004d5a <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4a10      	ldr	r2, [pc, #64]	@ (8004d98 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d10c      	bne.n	8004d74 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004d5a:	68bb      	ldr	r3, [r7, #8]
 8004d5c:	2280      	movs	r2, #128	@ 0x80
 8004d5e:	4393      	bics	r3, r2
 8004d60:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	689b      	ldr	r3, [r3, #8]
 8004d66:	68ba      	ldr	r2, [r7, #8]
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	68ba      	ldr	r2, [r7, #8]
 8004d72:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	223d      	movs	r2, #61	@ 0x3d
 8004d78:	2101      	movs	r1, #1
 8004d7a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	223c      	movs	r2, #60	@ 0x3c
 8004d80:	2100      	movs	r1, #0
 8004d82:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004d84:	2300      	movs	r3, #0
}
 8004d86:	0018      	movs	r0, r3
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	b004      	add	sp, #16
 8004d8c:	bd80      	pop	{r7, pc}
 8004d8e:	46c0      	nop			@ (mov r8, r8)
 8004d90:	40012c00 	.word	0x40012c00
 8004d94:	ff0fffff 	.word	0xff0fffff
 8004d98:	40000400 	.word	0x40000400

08004d9c <memset>:
 8004d9c:	0003      	movs	r3, r0
 8004d9e:	1882      	adds	r2, r0, r2
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d100      	bne.n	8004da6 <memset+0xa>
 8004da4:	4770      	bx	lr
 8004da6:	7019      	strb	r1, [r3, #0]
 8004da8:	3301      	adds	r3, #1
 8004daa:	e7f9      	b.n	8004da0 <memset+0x4>

08004dac <__errno>:
 8004dac:	4b01      	ldr	r3, [pc, #4]	@ (8004db4 <__errno+0x8>)
 8004dae:	6818      	ldr	r0, [r3, #0]
 8004db0:	4770      	bx	lr
 8004db2:	46c0      	nop			@ (mov r8, r8)
 8004db4:	2000000c 	.word	0x2000000c

08004db8 <__libc_init_array>:
 8004db8:	b570      	push	{r4, r5, r6, lr}
 8004dba:	2600      	movs	r6, #0
 8004dbc:	4c0c      	ldr	r4, [pc, #48]	@ (8004df0 <__libc_init_array+0x38>)
 8004dbe:	4d0d      	ldr	r5, [pc, #52]	@ (8004df4 <__libc_init_array+0x3c>)
 8004dc0:	1b64      	subs	r4, r4, r5
 8004dc2:	10a4      	asrs	r4, r4, #2
 8004dc4:	42a6      	cmp	r6, r4
 8004dc6:	d109      	bne.n	8004ddc <__libc_init_array+0x24>
 8004dc8:	2600      	movs	r6, #0
 8004dca:	f000 f8a9 	bl	8004f20 <_init>
 8004dce:	4c0a      	ldr	r4, [pc, #40]	@ (8004df8 <__libc_init_array+0x40>)
 8004dd0:	4d0a      	ldr	r5, [pc, #40]	@ (8004dfc <__libc_init_array+0x44>)
 8004dd2:	1b64      	subs	r4, r4, r5
 8004dd4:	10a4      	asrs	r4, r4, #2
 8004dd6:	42a6      	cmp	r6, r4
 8004dd8:	d105      	bne.n	8004de6 <__libc_init_array+0x2e>
 8004dda:	bd70      	pop	{r4, r5, r6, pc}
 8004ddc:	00b3      	lsls	r3, r6, #2
 8004dde:	58eb      	ldr	r3, [r5, r3]
 8004de0:	4798      	blx	r3
 8004de2:	3601      	adds	r6, #1
 8004de4:	e7ee      	b.n	8004dc4 <__libc_init_array+0xc>
 8004de6:	00b3      	lsls	r3, r6, #2
 8004de8:	58eb      	ldr	r3, [r5, r3]
 8004dea:	4798      	blx	r3
 8004dec:	3601      	adds	r6, #1
 8004dee:	e7f2      	b.n	8004dd6 <__libc_init_array+0x1e>
 8004df0:	08004ffc 	.word	0x08004ffc
 8004df4:	08004ffc 	.word	0x08004ffc
 8004df8:	08005000 	.word	0x08005000
 8004dfc:	08004ffc 	.word	0x08004ffc

08004e00 <sqrtf>:
 8004e00:	b570      	push	{r4, r5, r6, lr}
 8004e02:	1c05      	adds	r5, r0, #0
 8004e04:	f000 f818 	bl	8004e38 <__ieee754_sqrtf>
 8004e08:	1c29      	adds	r1, r5, #0
 8004e0a:	1c04      	adds	r4, r0, #0
 8004e0c:	1c28      	adds	r0, r5, #0
 8004e0e:	f7fc fabd 	bl	800138c <__aeabi_fcmpun>
 8004e12:	2800      	cmp	r0, #0
 8004e14:	d10e      	bne.n	8004e34 <sqrtf+0x34>
 8004e16:	2100      	movs	r1, #0
 8004e18:	1c28      	adds	r0, r5, #0
 8004e1a:	f7fb faf9 	bl	8000410 <__aeabi_fcmplt>
 8004e1e:	2800      	cmp	r0, #0
 8004e20:	d008      	beq.n	8004e34 <sqrtf+0x34>
 8004e22:	f7ff ffc3 	bl	8004dac <__errno>
 8004e26:	2321      	movs	r3, #33	@ 0x21
 8004e28:	2100      	movs	r1, #0
 8004e2a:	6003      	str	r3, [r0, #0]
 8004e2c:	1c08      	adds	r0, r1, #0
 8004e2e:	f7fb fd21 	bl	8000874 <__aeabi_fdiv>
 8004e32:	1c04      	adds	r4, r0, #0
 8004e34:	1c20      	adds	r0, r4, #0
 8004e36:	bd70      	pop	{r4, r5, r6, pc}

08004e38 <__ieee754_sqrtf>:
 8004e38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004e3a:	21ff      	movs	r1, #255	@ 0xff
 8004e3c:	0042      	lsls	r2, r0, #1
 8004e3e:	0003      	movs	r3, r0
 8004e40:	1c04      	adds	r4, r0, #0
 8004e42:	0852      	lsrs	r2, r2, #1
 8004e44:	05c9      	lsls	r1, r1, #23
 8004e46:	428a      	cmp	r2, r1
 8004e48:	d309      	bcc.n	8004e5e <__ieee754_sqrtf+0x26>
 8004e4a:	1c01      	adds	r1, r0, #0
 8004e4c:	f7fb fee0 	bl	8000c10 <__aeabi_fmul>
 8004e50:	1c01      	adds	r1, r0, #0
 8004e52:	1c20      	adds	r0, r4, #0
 8004e54:	f7fb fb1c 	bl	8000490 <__aeabi_fadd>
 8004e58:	1c04      	adds	r4, r0, #0
 8004e5a:	1c20      	adds	r0, r4, #0
 8004e5c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004e5e:	2a00      	cmp	r2, #0
 8004e60:	d0fb      	beq.n	8004e5a <__ieee754_sqrtf+0x22>
 8004e62:	2800      	cmp	r0, #0
 8004e64:	da06      	bge.n	8004e74 <__ieee754_sqrtf+0x3c>
 8004e66:	1c01      	adds	r1, r0, #0
 8004e68:	f7fc f82c 	bl	8000ec4 <__aeabi_fsub>
 8004e6c:	1c01      	adds	r1, r0, #0
 8004e6e:	f7fb fd01 	bl	8000874 <__aeabi_fdiv>
 8004e72:	e7f1      	b.n	8004e58 <__ieee754_sqrtf+0x20>
 8004e74:	0002      	movs	r2, r0
 8004e76:	400a      	ands	r2, r1
 8004e78:	4208      	tst	r0, r1
 8004e7a:	d040      	beq.n	8004efe <__ieee754_sqrtf+0xc6>
 8004e7c:	15c1      	asrs	r1, r0, #23
 8004e7e:	2280      	movs	r2, #128	@ 0x80
 8004e80:	000f      	movs	r7, r1
 8004e82:	025b      	lsls	r3, r3, #9
 8004e84:	0a5b      	lsrs	r3, r3, #9
 8004e86:	0412      	lsls	r2, r2, #16
 8004e88:	3f7f      	subs	r7, #127	@ 0x7f
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	07c9      	lsls	r1, r1, #31
 8004e8e:	d400      	bmi.n	8004e92 <__ieee754_sqrtf+0x5a>
 8004e90:	005b      	lsls	r3, r3, #1
 8004e92:	2400      	movs	r4, #0
 8004e94:	2180      	movs	r1, #128	@ 0x80
 8004e96:	2019      	movs	r0, #25
 8004e98:	0026      	movs	r6, r4
 8004e9a:	107f      	asrs	r7, r7, #1
 8004e9c:	005b      	lsls	r3, r3, #1
 8004e9e:	0449      	lsls	r1, r1, #17
 8004ea0:	1875      	adds	r5, r6, r1
 8004ea2:	001a      	movs	r2, r3
 8004ea4:	429d      	cmp	r5, r3
 8004ea6:	dc02      	bgt.n	8004eae <__ieee754_sqrtf+0x76>
 8004ea8:	186e      	adds	r6, r5, r1
 8004eaa:	1b5a      	subs	r2, r3, r5
 8004eac:	1864      	adds	r4, r4, r1
 8004eae:	3801      	subs	r0, #1
 8004eb0:	0053      	lsls	r3, r2, #1
 8004eb2:	0849      	lsrs	r1, r1, #1
 8004eb4:	2800      	cmp	r0, #0
 8004eb6:	d1f3      	bne.n	8004ea0 <__ieee754_sqrtf+0x68>
 8004eb8:	2a00      	cmp	r2, #0
 8004eba:	d019      	beq.n	8004ef0 <__ieee754_sqrtf+0xb8>
 8004ebc:	4d16      	ldr	r5, [pc, #88]	@ (8004f18 <__ieee754_sqrtf+0xe0>)
 8004ebe:	4e17      	ldr	r6, [pc, #92]	@ (8004f1c <__ieee754_sqrtf+0xe4>)
 8004ec0:	6828      	ldr	r0, [r5, #0]
 8004ec2:	6831      	ldr	r1, [r6, #0]
 8004ec4:	682b      	ldr	r3, [r5, #0]
 8004ec6:	9301      	str	r3, [sp, #4]
 8004ec8:	f7fb fffc 	bl	8000ec4 <__aeabi_fsub>
 8004ecc:	1c01      	adds	r1, r0, #0
 8004ece:	9801      	ldr	r0, [sp, #4]
 8004ed0:	f7fb faa8 	bl	8000424 <__aeabi_fcmple>
 8004ed4:	2800      	cmp	r0, #0
 8004ed6:	d00b      	beq.n	8004ef0 <__ieee754_sqrtf+0xb8>
 8004ed8:	6828      	ldr	r0, [r5, #0]
 8004eda:	6831      	ldr	r1, [r6, #0]
 8004edc:	f7fb fad8 	bl	8000490 <__aeabi_fadd>
 8004ee0:	682d      	ldr	r5, [r5, #0]
 8004ee2:	1c01      	adds	r1, r0, #0
 8004ee4:	1c28      	adds	r0, r5, #0
 8004ee6:	f7fb fa93 	bl	8000410 <__aeabi_fcmplt>
 8004eea:	2800      	cmp	r0, #0
 8004eec:	d010      	beq.n	8004f10 <__ieee754_sqrtf+0xd8>
 8004eee:	3402      	adds	r4, #2
 8004ef0:	23fc      	movs	r3, #252	@ 0xfc
 8004ef2:	1064      	asrs	r4, r4, #1
 8004ef4:	059b      	lsls	r3, r3, #22
 8004ef6:	18e3      	adds	r3, r4, r3
 8004ef8:	05fc      	lsls	r4, r7, #23
 8004efa:	18e4      	adds	r4, r4, r3
 8004efc:	e7ad      	b.n	8004e5a <__ieee754_sqrtf+0x22>
 8004efe:	2080      	movs	r0, #128	@ 0x80
 8004f00:	0400      	lsls	r0, r0, #16
 8004f02:	005b      	lsls	r3, r3, #1
 8004f04:	0011      	movs	r1, r2
 8004f06:	3201      	adds	r2, #1
 8004f08:	4203      	tst	r3, r0
 8004f0a:	d0fa      	beq.n	8004f02 <__ieee754_sqrtf+0xca>
 8004f0c:	4249      	negs	r1, r1
 8004f0e:	e7b6      	b.n	8004e7e <__ieee754_sqrtf+0x46>
 8004f10:	2301      	movs	r3, #1
 8004f12:	3401      	adds	r4, #1
 8004f14:	439c      	bics	r4, r3
 8004f16:	e7eb      	b.n	8004ef0 <__ieee754_sqrtf+0xb8>
 8004f18:	08004ff8 	.word	0x08004ff8
 8004f1c:	08004ff4 	.word	0x08004ff4

08004f20 <_init>:
 8004f20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f22:	46c0      	nop			@ (mov r8, r8)
 8004f24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f26:	bc08      	pop	{r3}
 8004f28:	469e      	mov	lr, r3
 8004f2a:	4770      	bx	lr

08004f2c <_fini>:
 8004f2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f2e:	46c0      	nop			@ (mov r8, r8)
 8004f30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f32:	bc08      	pop	{r3}
 8004f34:	469e      	mov	lr, r3
 8004f36:	4770      	bx	lr
