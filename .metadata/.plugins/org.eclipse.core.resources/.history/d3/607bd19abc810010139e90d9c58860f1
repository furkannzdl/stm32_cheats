/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2025 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include <math.h>

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

TIM_HandleTypeDef htim3;

/* USER CODE BEGIN PV */
/* USER CODE BEGIN PV */
#define ADC_BUF_LEN   200         // buffer uzunluğu
#define CAL_FACTOR   0.1872f
#define IIR_ALPHA     0.2f        // filtre katsayısı (0.1–0.3 arası oynayabilirsin)
// ---- PIN EŞLEŞTİRME (senin verdiğin eşleşmeye göre) ----
#define RLY_LED_GPIO_Port   GPIOA
#define RLY_LED_Pin         GPIO_PIN_13   // RLY LED = PA13

#define Led_Out_GPIO_Port   GPIOA
#define Led_Out_Pin         GPIO_PIN_11   // Low (DG) LED = PA11

#define HIGH_LED_GPIO_Port  GPIOA
#define HIGH_LED_Pin        GPIO_PIN_12   // High (YG) LED = PA12

#define PHASE_LED_GPIO_Port GPIOB
#define PHASE_LED_Pin       GPIO_PIN_3    // Phase LED = PB3


#define VREFINT_TYP       1.212f    // Vrefint tipik voltajı (datasheet’ten)

volatile uint16_t adc_buf[ADC_BUF_LEN];
volatile uint8_t  adc_ready = 0;
volatile uint16_t rms_value = 0;
float vrms_filtered = 0.0f;
// ---- Low Voltage (minimal) ----
typedef enum {
  LV_ST_NORMAL = 0, LV_ST_WAIT_TRIP, LV_ST_TRIPPED, LV_ST_WAIT_RETURN
} LV_State;

static LV_State lv_state = LV_ST_NORMAL;
static uint32_t lv_t_delay_start = 0, lv_t_return_start = 0;

// Test için sabit eşik/süre (sonra pot okuyacağız)
static float    lv_threshold_V = 200.0f;  // eşik (V)
static uint32_t lv_delay_ms    = 1000;    // gecikme (ms)
static uint32_t lv_return_ms   = 2000;    // dönüş süresi (ms)
static const float LV_HYST     = 2.0f;    // histerezis (V)

// Şimdilik 3 fazı tek değerden besleyeceğiz
static float Vrms[3] = {0};

uint16_t vrefint_cal = 0;
/* USER CODE END PV */

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_DMA_Init(void);
static void MX_ADC1_Init(void);
static void MX_TIM3_Init(void);
static uint16_t ReadVrefintOnce(void);
static void RunMeasurementAndLowVoltage(void);
static void LowVoltage_Update(void);

/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_DMA_Init();
  MX_ADC1_Init();
  MX_TIM3_Init();
  /* USER CODE BEGIN 2 */
    HAL_ADCEx_Calibration_Start(&hadc1);
    vrefint_cal = *VREFINT_CAL_ADDR;     // fabrika kalibrasyonunu al

    HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buf, ADC_BUF_LEN);
    HAL_TIM_Base_Start(&htim3);          // Timer3 başlat
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    while (1) {
      if (adc_ready) {
        adc_ready = 0;
        RunMeasurementAndLowVoltage();
      }
    }



    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
}


// Tek karelik ölçüm + işleme + LV state-machine
static void RunMeasurementAndLowVoltage(void)
{
  // 1) RMS hesapla (adc_buf → rms_value)
  uint32_t sum_sq = 0;
  int32_t  dc_offset = 0;

  for (int i = 0; i < ADC_BUF_LEN; i++) dc_offset += adc_buf[i];
  dc_offset /= ADC_BUF_LEN;

  for (int i = 0; i < ADC_BUF_LEN; i++) {
    int32_t s = adc_buf[i] - dc_offset;
    sum_sq += (uint32_t)(s * s);
  }
  rms_value = (uint16_t)(sqrtf((float)sum_sq / ADC_BUF_LEN));

  // 2) Vdda kompanzasyonu için VrefInt ölç
  uint16_t vref_adc = ReadVrefintOnce();
  float Vdda = 3.0f;
  if (vrefint_cal != 0xFFFF && vrefint_cal != 0x0000) {
    Vdda = 3.0f * ((float)vrefint_cal / (float)vref_adc);
  } else {
    Vdda = (VREFINT_TYP * 4095.0f) / (float)vref_adc;
  }

  // 3) Ham RMS → Volt (kalibrasyon + Vdda düzeltmesi)
  float vrms_real = 0.0f;
  if (rms_value > 50) {
    vrms_real = rms_value * CAL_FACTOR * (Vdda / 3.0f);
  }

  // 4) IIR filtre
  vrms_filtered += IIR_ALPHA * (vrms_real - vrms_filtered);

  // 5) (Şimdilik) 3 fazı tek kanaldan simüle et → LV mantığını akıtmak için yeterli
  // Gerçekte ADC taramana L1/L2/L3 ayrı ayrı konup ayrı RMS hesaplayacağız.
  Vrms[0] = Vrms[1] = Vrms[2] = vrms_filtered;

  // 6) Düşük voltaj koruması state-machine’i çalıştır
  LowVoltage_Update();
}
static inline void relay_on(void) {
  HAL_GPIO_WritePin(RELAY_GPIO_Port, RELAY_Pin, GPIO_PIN_SET);
  HAL_GPIO_WritePin(RLY_LED_GPIO_Port, RLY_LED_Pin, GPIO_PIN_SET);   // güncel
}
static inline void relay_off(void) {
  HAL_GPIO_WritePin(RELAY_GPIO_Port, RELAY_Pin, GPIO_PIN_RESET);
  HAL_GPIO_WritePin(RLY_LED_GPIO_Port, RLY_LED_Pin, GPIO_PIN_RESET); // güncel
}

static inline uint8_t relay_is_on(void) {
  return (HAL_GPIO_ReadPin(RELAY_GPIO_Port, RELAY_Pin) == GPIO_PIN_SET);
}
static inline void low_led_on(void)  { HAL_GPIO_WritePin(Led_Out_GPIO_Port, Led_Out_Pin, GPIO_PIN_SET); }
static inline void low_led_off(void) { HAL_GPIO_WritePin(Led_Out_GPIO_Port, Led_Out_Pin, GPIO_PIN_RESET); }

static void LowVoltage_Update(void)
{
  float vL1 = Vrms[0], vL2 = Vrms[1], vL3 = Vrms[2];
  uint8_t any_low = (vL1 < lv_threshold_V) || (vL2 < lv_threshold_V) || (vL3 < lv_threshold_V);
  uint8_t all_norm = (vL1 > lv_threshold_V + LV_HYST) &&
                     (vL2 > lv_threshold_V + LV_HYST) &&
                     (vL3 > lv_threshold_V + LV_HYST);

  switch (lv_state) {
    case LV_ST_NORMAL:
      low_led_off();
      if (any_low) { lv_t_delay_start = HAL_GetTick(); lv_state = LV_ST_WAIT_TRIP; }
      break;

    case LV_ST_WAIT_TRIP:
      if (!any_low) { lv_state = LV_ST_NORMAL; break; }
      if ((HAL_GetTick() - lv_t_delay_start) >= lv_delay_ms) {
        relay_off(); low_led_on(); lv_state = LV_ST_TRIPPED;
      }
      break;

    case LV_ST_TRIPPED:
      if (all_norm) { lv_t_return_start = HAL_GetTick(); lv_state = LV_ST_WAIT_RETURN; }
      break;

    case LV_ST_WAIT_RETURN:
      if (!all_norm) { lv_state = LV_ST_TRIPPED; break; }
      if ((HAL_GetTick() - lv_t_return_start) >= lv_return_ms) {
        relay_on(); low_led_off(); lv_state = LV_ST_NORMAL;
      }
      break;

    default: lv_state = LV_ST_NORMAL; break;
  }
}

  /* USER CODE END 3 */
/* USER CODE BEGIN 4 */
static uint16_t ReadVrefintOnce(void)
{
    ADC_ChannelConfTypeDef sConfig = {0};

    // DMA durdur
    HAL_ADC_Stop_DMA(&hadc1);

    // VREFINT kanalını seç
    sConfig.Channel = ADC_CHANNEL_VREFINT;
    sConfig.Rank = ADC_REGULAR_RANK_1;
    sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_2; // uzun süre daha doğru
    HAL_ADC_ConfigChannel(&hadc1, &sConfig);

    HAL_ADC_Start(&hadc1);
    HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
    uint16_t vref_adc = HAL_ADC_GetValue(&hadc1);
    HAL_ADC_Stop(&hadc1);

    // Tekrar CH0’a dön
    sConfig.Channel = ADC_CHANNEL_0;
    sConfig.Rank = ADC_REGULAR_RANK_1;
    sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
    HAL_ADC_ConfigChannel(&hadc1, &sConfig);

    // DMA’yı tekrar başlat
    HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buf, ADC_BUF_LEN);

    return vref_adc;
}


/* USER CODE END 4 */


/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
  ADC_ChannelConfTypeDef sConfig = {0};

  /** Global ADC config */
  hadc1.Instance                      = ADC1;
  hadc1.Init.ClockPrescaler           = ADC_CLOCK_SYNC_PCLK_DIV2;
  hadc1.Init.Resolution               = ADC_RESOLUTION_12B;
  hadc1.Init.DataAlign                = ADC_DATAALIGN_RIGHT;
  hadc1.Init.ScanConvMode             = ADC_SCAN_DISABLE;           // tek kanal
  hadc1.Init.EOCSelection             = ADC_EOC_SINGLE_CONV;
  hadc1.Init.LowPowerAutoWait         = DISABLE;
  hadc1.Init.LowPowerAutoPowerOff     = DISABLE;
  hadc1.Init.ContinuousConvMode       = DISABLE;                    // tetik: TIM3 TRGO
  hadc1.Init.NbrOfConversion          = 1;                          // 1 kanal
  hadc1.Init.DiscontinuousConvMode    = DISABLE;
  hadc1.Init.ExternalTrigConv         = ADC_EXTERNALTRIG_T3_TRGO;   // TIM3 Update TRGO
  hadc1.Init.ExternalTrigConvEdge     = ADC_EXTERNALTRIGCONVEDGE_RISING;
  hadc1.Init.DMAContinuousRequests    = ENABLE;                     // DMA ile alım
  hadc1.Init.Overrun                  = ADC_OVR_DATA_PRESERVED;
  hadc1.Init.SamplingTimeCommon1      = ADC_SAMPLETIME_79CYCLES_5;  // normal kanallar için
  hadc1.Init.SamplingTimeCommon2      = ADC_SAMPLETIME_160CYCLES_5; // Vrefint gibi uzun örneklemeli kanallar için
  hadc1.Init.OversamplingMode         = DISABLE;
  hadc1.Init.TriggerFrequencyMode     = ADC_TRIGGER_FREQ_HIGH;

  if (HAL_ADC_Init(&hadc1) != HAL_OK) {
    Error_Handler();
  }

  /** Regular Channel Config (ölçüm kanalın) */
  sConfig.Channel      = ADC_CHANNEL_0;                 // kullandığın analog giriş
  sConfig.Rank         = ADC_REGULAR_RANK_1;
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;      // COMMON1 = 79.5 cycles (yukarıda)
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
    Error_Handler();
  }
}

/**
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
  htim3.Init.Prescaler = 16-1;
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim3.Init.Period = 1000-1;
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /* Çıkışları başlangıçta LOW yap */
  HAL_GPIO_WritePin(GPIOA, Led_Out_Pin | HIGH_LED_Pin | RLY_LED_Pin | D14_Pin, GPIO_PIN_RESET);
  HAL_GPIO_WritePin(GPIOB, PHASE_LED_Pin, GPIO_PIN_RESET);

  /* PA11 (LOW), PA12 (HIGH), PA13 (RLY LED), D14 (röle) => OUTPUT */
  GPIO_InitStruct.Pin = Led_Out_Pin | HIGH_LED_Pin | RLY_LED_Pin | D14_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /* PB3 (PHASE LED) => OUTPUT */
  GPIO_InitStruct.Pin = PHASE_LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
}


/* USER CODE BEGIN 4 */
  void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
  {
    if (hadc->Instance == ADC1) {
      adc_ready = 1;   // buffer doldu → main döngüsünde RMS hesapla
    }
  }
/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
#ifdef USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
